// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 6.0.106.0. www.xsd2code.com
//    {"NameSpace":"musicxml","Properties":{"PascalCaseProperty":true},"ClassParams":{},"Serialization":{"ShouldSerialize":{},"AdditionalSerializers":{},"XmlSerializerEvent":{},"XmlOutput":{},"JsonOutput":{},"Enabled":true},"Miscellaneous":{}}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace musicxml
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    
    
    [DebuggerStepThrough]
    public partial class Scorepartwise
    {
        #region Private fields
        private Work _work;
        private string _movementnumber;
        private string _movementtitle;
        private Identification _identification;
        private Defaults _defaults;
        private List<Credit> _credit;
        private Partlist _partlist;
        private List<ScorepartwisePart> _part;
        private string _version;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Scorepartwise()
        {
            _part = new List<ScorepartwisePart>();
            _partlist = new Partlist();
            _credit = new List<Credit>();
            _defaults = new Defaults();
            _identification = new Identification();
            _work = new Work();
            _version = "1.0";
        }
        
        public Work Work
        {
            get
            {
                return _work;
            }
            set
            {
                _work = value;
            }
        }
        
        public string Movementnumber
        {
            get
            {
                return _movementnumber;
            }
            set
            {
                _movementnumber = value;
            }
        }
        
        public string Movementtitle
        {
            get
            {
                return _movementtitle;
            }
            set
            {
                _movementtitle = value;
            }
        }
        
        public Identification Identification
        {
            get
            {
                return _identification;
            }
            set
            {
                _identification = value;
            }
        }
        
        public Defaults Defaults
        {
            get
            {
                return _defaults;
            }
            set
            {
                _defaults = value;
            }
        }
        
        public List<Credit> Credit
        {
            get
            {
                return _credit;
            }
            set
            {
                _credit = value;
            }
        }
        
        public Partlist Partlist
        {
            get
            {
                return _partlist;
            }
            set
            {
                _partlist = value;
            }
        }
        
        public List<ScorepartwisePart> Part
        {
            get
            {
                return _part;
            }
            set
            {
                _part = value;
            }
        }
        
        [DefaultValue("1.0")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Scorepartwise));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Scorepartwise object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Scorepartwise object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Scorepartwise object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Scorepartwise obj, out Exception exception)
        {
            exception = null;
            obj = default(Scorepartwise);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Scorepartwise obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Scorepartwise Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Scorepartwise)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Scorepartwise Deserialize(Stream s)
        {
            return ((Scorepartwise)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Scorepartwise object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Scorepartwise object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Scorepartwise object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Scorepartwise obj, out Exception exception)
        {
            exception = null;
            obj = default(Scorepartwise);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Scorepartwise obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Scorepartwise LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Work
    {
        #region Private fields
        private string _worknumber;
        private string _worktitle;
        private Opus _opus;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Work()
        {
            _opus = new Opus();
        }
        
        public string Worknumber
        {
            get
            {
                return _worknumber;
            }
            set
            {
                _worknumber = value;
            }
        }
        
        public string Worktitle
        {
            get
            {
                return _worktitle;
            }
            set
            {
                _worktitle = value;
            }
        }
        
        public Opus Opus
        {
            get
            {
                return _opus;
            }
            set
            {
                _opus = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Work));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Work object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Work object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Work object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Work obj, out Exception exception)
        {
            exception = null;
            obj = default(Work);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Work obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Work Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Work)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Work Deserialize(Stream s)
        {
            return ((Work)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Work object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Work object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Work object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Work obj, out Exception exception)
        {
            exception = null;
            obj = default(Work);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Work obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Work LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Opus
    {
        #region Private fields
        private string _href;
        private OpusType _type;
        private string _role;
        private string _title;
        private OpusShow _show;
        private OpusActuate _actuate;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Opus()
        {
            _type = OpusType.simple;
            _show = OpusShow.replace;
            _actuate = OpusActuate.onRequest;
        }
        
        public string Href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }
        
        public OpusType Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Role
        {
            get
            {
                return _role;
            }
            set
            {
                _role = value;
            }
        }
        
        public string Title
        {
            get
            {
                return _title;
            }
            set
            {
                _title = value;
            }
        }
        
        [DefaultValue(OpusShow.replace)]
        public OpusShow Show
        {
            get
            {
                return _show;
            }
            set
            {
                _show = value;
            }
        }
        
        [DefaultValue(OpusActuate.onRequest)]
        public OpusActuate Actuate
        {
            get
            {
                return _actuate;
            }
            set
            {
                _actuate = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Opus));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Opus object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Opus object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Opus object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Opus obj, out Exception exception)
        {
            exception = null;
            obj = default(Opus);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Opus obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Opus Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Opus)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Opus Deserialize(Stream s)
        {
            return ((Opus)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Opus object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Opus object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Opus object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Opus obj, out Exception exception)
        {
            exception = null;
            obj = default(Opus);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Opus obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Opus LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum OpusType
    {
        simple,
    }
    
    public enum OpusShow
    {
        @new,
        replace,
        embed,
        other,
        none,
    }
    
    public enum OpusActuate
    {
        onRequest,
        onLoad,
        other,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Feature
    {
        #region Private fields
        private string _type;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Feature));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Feature object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Feature object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Feature object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Feature obj, out Exception exception)
        {
            exception = null;
            obj = default(Feature);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Feature obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Feature Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Feature)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Feature Deserialize(Stream s)
        {
            return ((Feature)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Feature object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Feature object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Feature object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Feature obj, out Exception exception)
        {
            exception = null;
            obj = default(Feature);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Feature obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Feature LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Grouping
    {
        #region Private fields
        private List<Feature> _feature;
        private Startstopsingle _type;
        private string _number;
        private string _memberof;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Grouping()
        {
            _feature = new List<Feature>();
            _number = "1";
        }
        
        public List<Feature> Feature
        {
            get
            {
                return _feature;
            }
            set
            {
                _feature = value;
            }
        }
        
        public Startstopsingle Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Memberof
        {
            get
            {
                return _memberof;
            }
            set
            {
                _memberof = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Grouping));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Grouping object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Grouping object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Grouping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Grouping obj, out Exception exception)
        {
            exception = null;
            obj = default(Grouping);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Grouping obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Grouping Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Grouping)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Grouping Deserialize(Stream s)
        {
            return ((Grouping)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Grouping object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Grouping object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Grouping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Grouping obj, out Exception exception)
        {
            exception = null;
            obj = default(Grouping);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Grouping obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Grouping LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Startstopsingle
    {
        start,
        stop,
        single,
    }
    
    [DebuggerStepThrough]
    public partial class Repeat
    {
        #region Private fields
        private Backwardforward _direction;
        private string _times;
        private Yesno _afterjump;
        private Winged _winged;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Backwardforward Direction
        {
            get
            {
                return _direction;
            }
            set
            {
                _direction = value;
            }
        }
        
        public string Times
        {
            get
            {
                return _times;
            }
            set
            {
                _times = value;
            }
        }
        
        public Yesno Afterjump
        {
            get
            {
                return _afterjump;
            }
            set
            {
                _afterjump = value;
            }
        }
        
        public Winged Winged
        {
            get
            {
                return _winged;
            }
            set
            {
                _winged = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Repeat));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Repeat object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Repeat object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Repeat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Repeat obj, out Exception exception)
        {
            exception = null;
            obj = default(Repeat);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Repeat obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Repeat Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Repeat)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Repeat Deserialize(Stream s)
        {
            return ((Repeat)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Repeat object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Repeat object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Repeat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Repeat obj, out Exception exception)
        {
            exception = null;
            obj = default(Repeat);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Repeat obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Repeat LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Backwardforward
    {
        backward,
        forward,
    }
    
    public enum Yesno
    {
        yes,
        no,
    }
    
    public enum Winged
    {
        none,
        straight,
        curved,
        [XmlEnumAttribute("double-straight")]
        doublestraight,
        [XmlEnumAttribute("double-curved")]
        doublecurved,
    }
    
    [DebuggerStepThrough]
    public partial class Ending
    {
        #region Private fields
        private string _number;
        private Startstopdiscontinue _type;
        private Yesno _printobject;
        private Systemrelation _system;
        private decimal _endlength;
        private decimal _textx;
        private decimal _texty;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Startstopdiscontinue Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public Systemrelation System
        {
            get
            {
                return _system;
            }
            set
            {
                _system = value;
            }
        }
        
        public decimal Endlength
        {
            get
            {
                return _endlength;
            }
            set
            {
                _endlength = value;
            }
        }
        
        public decimal Textx
        {
            get
            {
                return _textx;
            }
            set
            {
                _textx = value;
            }
        }
        
        public decimal Texty
        {
            get
            {
                return _texty;
            }
            set
            {
                _texty = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Ending));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Ending object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Ending object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Ending object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Ending obj, out Exception exception)
        {
            exception = null;
            obj = default(Ending);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Ending obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Ending Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Ending)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Ending Deserialize(Stream s)
        {
            return ((Ending)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Ending object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Ending object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Ending object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Ending obj, out Exception exception)
        {
            exception = null;
            obj = default(Ending);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Ending obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Ending LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Startstopdiscontinue
    {
        start,
        stop,
        discontinue,
    }
    
    public enum Systemrelation
    {
        [XmlEnumAttribute("only-top")]
        onlytop,
        [XmlEnumAttribute("also-top")]
        alsotop,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Barstylecolor
    {
        #region Private fields
        private string _color;
        private Barstyle _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Barstyle Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Barstylecolor));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Barstylecolor object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Barstylecolor object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Barstylecolor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Barstylecolor obj, out Exception exception)
        {
            exception = null;
            obj = default(Barstylecolor);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Barstylecolor obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Barstylecolor Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Barstylecolor)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Barstylecolor Deserialize(Stream s)
        {
            return ((Barstylecolor)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Barstylecolor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Barstylecolor object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Barstylecolor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Barstylecolor obj, out Exception exception)
        {
            exception = null;
            obj = default(Barstylecolor);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Barstylecolor obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Barstylecolor LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Barstyle
    {
        regular,
        dotted,
        dashed,
        heavy,
        [XmlEnumAttribute("light-light")]
        lightlight,
        [XmlEnumAttribute("light-heavy")]
        lightheavy,
        [XmlEnumAttribute("heavy-light")]
        heavylight,
        [XmlEnumAttribute("heavy-heavy")]
        heavyheavy,
        tick,
        @short,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Barline
    {
        #region Private fields
        private Barstylecolor _barstyle;
        private Formattedtext _footnote;
        private Level _level;
        private Wavyline _wavyline;
        private Segno _segno;
        private Coda _coda;
        private List<Fermata> _fermata;
        private Ending _ending;
        private Repeat _repeat;
        private Rightleftmiddle _location;
        private string _segno1;
        private string _coda1;
        private decimal _divisions;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Barline()
        {
            _repeat = new Repeat();
            _ending = new Ending();
            _fermata = new List<Fermata>();
            _coda = new Coda();
            _segno = new Segno();
            _wavyline = new Wavyline();
            _level = new Level();
            _footnote = new Formattedtext();
            _barstyle = new Barstylecolor();
            _location = Rightleftmiddle.right;
        }
        
        public Barstylecolor Barstyle
        {
            get
            {
                return _barstyle;
            }
            set
            {
                _barstyle = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public Wavyline Wavyline
        {
            get
            {
                return _wavyline;
            }
            set
            {
                _wavyline = value;
            }
        }
        
        public Segno Segno
        {
            get
            {
                return _segno;
            }
            set
            {
                _segno = value;
            }
        }
        
        public Coda Coda
        {
            get
            {
                return _coda;
            }
            set
            {
                _coda = value;
            }
        }
        
        public List<Fermata> Fermata
        {
            get
            {
                return _fermata;
            }
            set
            {
                _fermata = value;
            }
        }
        
        public Ending Ending
        {
            get
            {
                return _ending;
            }
            set
            {
                _ending = value;
            }
        }
        
        public Repeat Repeat
        {
            get
            {
                return _repeat;
            }
            set
            {
                _repeat = value;
            }
        }
        
        [DefaultValue(Rightleftmiddle.right)]
        public Rightleftmiddle Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
        
        public string Segno1
        {
            get
            {
                return _segno1;
            }
            set
            {
                _segno1 = value;
            }
        }
        
        public string Coda1
        {
            get
            {
                return _coda1;
            }
            set
            {
                _coda1 = value;
            }
        }
        
        public decimal Divisions
        {
            get
            {
                return _divisions;
            }
            set
            {
                _divisions = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Barline));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Barline object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Barline object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Barline object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Barline obj, out Exception exception)
        {
            exception = null;
            obj = default(Barline);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Barline obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Barline Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Barline)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Barline Deserialize(Stream s)
        {
            return ((Barline)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Barline object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Barline object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Barline object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Barline obj, out Exception exception)
        {
            exception = null;
            obj = default(Barline);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Barline obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Barline LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Formattedtext
    {
        #region Private fields
        private string _lang;
        private string _space;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Lang
        {
            get
            {
                return _lang;
            }
            set
            {
                _lang = value;
            }
        }
        
        public string Space
        {
            get
            {
                return _space;
            }
            set
            {
                _space = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Formattedtext));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Formattedtext object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Formattedtext object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Formattedtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Formattedtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Formattedtext);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Formattedtext obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Formattedtext Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Formattedtext)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Formattedtext Deserialize(Stream s)
        {
            return ((Formattedtext)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Formattedtext object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Formattedtext object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Formattedtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Formattedtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Formattedtext);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Formattedtext obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Formattedtext LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Level
    {
        #region Private fields
        private Yesno _reference;
        private Startstopsingle _type;
        private Yesno _parentheses;
        private Yesno _bracket;
        private Symbolsize _size;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Reference
        {
            get
            {
                return _reference;
            }
            set
            {
                _reference = value;
            }
        }
        
        public Startstopsingle Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public Yesno Parentheses
        {
            get
            {
                return _parentheses;
            }
            set
            {
                _parentheses = value;
            }
        }
        
        public Yesno Bracket
        {
            get
            {
                return _bracket;
            }
            set
            {
                _bracket = value;
            }
        }
        
        public Symbolsize Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Level));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Level object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Level object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Level object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Level obj, out Exception exception)
        {
            exception = null;
            obj = default(Level);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Level obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Level Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Level)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Level Deserialize(Stream s)
        {
            return ((Level)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Level object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Level object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Level object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Level obj, out Exception exception)
        {
            exception = null;
            obj = default(Level);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Level obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Level LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Symbolsize
    {
        full,
        cue,
        [XmlEnumAttribute("grace-cue")]
        gracecue,
        large,
    }
    
    [DebuggerStepThrough]
    public partial class Wavyline
    {
        #region Private fields
        private Startstopcontinue _type;
        private string _number;
        private string _smufl;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private Abovebelow _placement;
        private string _color;
        private Startnote _startnote;
        private Trillstep _trillstep;
        private Twonoteturn _twonoteturn;
        private Yesno _accelerate;
        private decimal _beats;
        private decimal _secondbeat;
        private decimal _lastbeat;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstopcontinue Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Startnote Startnote
        {
            get
            {
                return _startnote;
            }
            set
            {
                _startnote = value;
            }
        }
        
        public Trillstep Trillstep
        {
            get
            {
                return _trillstep;
            }
            set
            {
                _trillstep = value;
            }
        }
        
        public Twonoteturn Twonoteturn
        {
            get
            {
                return _twonoteturn;
            }
            set
            {
                _twonoteturn = value;
            }
        }
        
        public Yesno Accelerate
        {
            get
            {
                return _accelerate;
            }
            set
            {
                _accelerate = value;
            }
        }
        
        public decimal Beats
        {
            get
            {
                return _beats;
            }
            set
            {
                _beats = value;
            }
        }
        
        public decimal Secondbeat
        {
            get
            {
                return _secondbeat;
            }
            set
            {
                _secondbeat = value;
            }
        }
        
        public decimal Lastbeat
        {
            get
            {
                return _lastbeat;
            }
            set
            {
                _lastbeat = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Wavyline));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Wavyline object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Wavyline object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Wavyline object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Wavyline obj, out Exception exception)
        {
            exception = null;
            obj = default(Wavyline);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Wavyline obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Wavyline Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Wavyline)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Wavyline Deserialize(Stream s)
        {
            return ((Wavyline)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Wavyline object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Wavyline object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Wavyline object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Wavyline obj, out Exception exception)
        {
            exception = null;
            obj = default(Wavyline);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Wavyline obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Wavyline LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Startstopcontinue
    {
        start,
        stop,
        @continue,
    }
    
    public enum Abovebelow
    {
        above,
        below,
    }
    
    public enum Startnote
    {
        upper,
        main,
        below,
    }
    
    public enum Trillstep
    {
        whole,
        half,
        unison,
    }
    
    public enum Twonoteturn
    {
        whole,
        half,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Segno
    {
        #region Private fields
        private string _id;
        private string _smufl;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Segno));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Segno object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Segno object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Segno object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Segno obj, out Exception exception)
        {
            exception = null;
            obj = default(Segno);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Segno obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Segno Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Segno)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Segno Deserialize(Stream s)
        {
            return ((Segno)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Segno object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Segno object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Segno object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Segno obj, out Exception exception)
        {
            exception = null;
            obj = default(Segno);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Segno obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Segno LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Coda
    {
        #region Private fields
        private string _id;
        private string _smufl;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Coda));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Coda object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Coda object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Coda object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Coda obj, out Exception exception)
        {
            exception = null;
            obj = default(Coda);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Coda obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Coda Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Coda)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Coda Deserialize(Stream s)
        {
            return ((Coda)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Coda object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Coda object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Coda object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Coda obj, out Exception exception)
        {
            exception = null;
            obj = default(Coda);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Coda obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Coda LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Fermata
    {
        #region Private fields
        private Uprightinverted _type;
        private string _id;
        private Fermatashape _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Uprightinverted Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public Fermatashape Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Fermata));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Fermata object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Fermata object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Fermata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Fermata obj, out Exception exception)
        {
            exception = null;
            obj = default(Fermata);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Fermata obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Fermata Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Fermata)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Fermata Deserialize(Stream s)
        {
            return ((Fermata)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Fermata object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Fermata object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Fermata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Fermata obj, out Exception exception)
        {
            exception = null;
            obj = default(Fermata);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Fermata obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Fermata LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Uprightinverted
    {
        upright,
        inverted,
    }
    
    public enum Fermatashape
    {
        normal,
        angled,
        square,
        [XmlEnumAttribute("double-angled")]
        doubleangled,
        [XmlEnumAttribute("double-square")]
        doublesquare,
        [XmlEnumAttribute("double-dot")]
        doubledot,
        [XmlEnumAttribute("half-curve")]
        halfcurve,
        curlew,
        [XmlEnumAttribute("")]
        Item,
    }
    
    public enum Rightleftmiddle
    {
        right,
        left,
        middle,
    }
    
    [DebuggerStepThrough]
    public partial class Measurenumbering
    {
        #region Private fields
        private Systemrelationnumber _system;
        private string _staff;
        private Yesno _multiplerestalways;
        private Yesno _multiplerestrange;
        private Measurenumberingvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Systemrelationnumber System
        {
            get
            {
                return _system;
            }
            set
            {
                _system = value;
            }
        }
        
        public string Staff
        {
            get
            {
                return _staff;
            }
            set
            {
                _staff = value;
            }
        }
        
        public Yesno Multiplerestalways
        {
            get
            {
                return _multiplerestalways;
            }
            set
            {
                _multiplerestalways = value;
            }
        }
        
        public Yesno Multiplerestrange
        {
            get
            {
                return _multiplerestrange;
            }
            set
            {
                _multiplerestrange = value;
            }
        }
        
        public Measurenumberingvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Measurenumbering));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Measurenumbering object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Measurenumbering object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Measurenumbering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Measurenumbering obj, out Exception exception)
        {
            exception = null;
            obj = default(Measurenumbering);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Measurenumbering obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Measurenumbering Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Measurenumbering)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Measurenumbering Deserialize(Stream s)
        {
            return ((Measurenumbering)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Measurenumbering object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Measurenumbering object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Measurenumbering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Measurenumbering obj, out Exception exception)
        {
            exception = null;
            obj = default(Measurenumbering);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Measurenumbering obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Measurenumbering LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Systemrelationnumber
    {
        [XmlEnumAttribute("only-top")]
        onlytop,
        [XmlEnumAttribute("only-bottom")]
        onlybottom,
        [XmlEnumAttribute("also-top")]
        alsotop,
        [XmlEnumAttribute("also-bottom")]
        alsobottom,
        none,
    }
    
    public enum Measurenumberingvalue
    {
        none,
        measure,
        system,
    }
    
    [DebuggerStepThrough]
    public partial class Measurelayout
    {
        #region Private fields
        private decimal _measuredistance;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Measuredistance
        {
            get
            {
                return _measuredistance;
            }
            set
            {
                _measuredistance = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Measurelayout));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Measurelayout object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Measurelayout object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Measurelayout object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Measurelayout obj, out Exception exception)
        {
            exception = null;
            obj = default(Measurelayout);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Measurelayout obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Measurelayout Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Measurelayout)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Measurelayout Deserialize(Stream s)
        {
            return ((Measurelayout)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Measurelayout object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Measurelayout object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Measurelayout object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Measurelayout obj, out Exception exception)
        {
            exception = null;
            obj = default(Measurelayout);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Measurelayout obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Measurelayout LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Print
    {
        #region Private fields
        private Pagelayout _pagelayout;
        private Systemlayout _systemlayout;
        private List<Stafflayout> _stafflayout;
        private Measurelayout _measurelayout;
        private Measurenumbering _measurenumbering;
        private Namedisplay _partnamedisplay;
        private Namedisplay _partabbreviationdisplay;
        private decimal _staffspacing;
        private Yesno _newsystem;
        private Yesno _newpage;
        private string _blankpage;
        private string _pagenumber;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Print()
        {
            _partabbreviationdisplay = new Namedisplay();
            _partnamedisplay = new Namedisplay();
            _measurenumbering = new Measurenumbering();
            _measurelayout = new Measurelayout();
            _stafflayout = new List<Stafflayout>();
            _systemlayout = new Systemlayout();
            _pagelayout = new Pagelayout();
        }
        
        public Pagelayout Pagelayout
        {
            get
            {
                return _pagelayout;
            }
            set
            {
                _pagelayout = value;
            }
        }
        
        public Systemlayout Systemlayout
        {
            get
            {
                return _systemlayout;
            }
            set
            {
                _systemlayout = value;
            }
        }
        
        public List<Stafflayout> Stafflayout
        {
            get
            {
                return _stafflayout;
            }
            set
            {
                _stafflayout = value;
            }
        }
        
        public Measurelayout Measurelayout
        {
            get
            {
                return _measurelayout;
            }
            set
            {
                _measurelayout = value;
            }
        }
        
        public Measurenumbering Measurenumbering
        {
            get
            {
                return _measurenumbering;
            }
            set
            {
                _measurenumbering = value;
            }
        }
        
        public Namedisplay Partnamedisplay
        {
            get
            {
                return _partnamedisplay;
            }
            set
            {
                _partnamedisplay = value;
            }
        }
        
        public Namedisplay Partabbreviationdisplay
        {
            get
            {
                return _partabbreviationdisplay;
            }
            set
            {
                _partabbreviationdisplay = value;
            }
        }
        
        public decimal Staffspacing
        {
            get
            {
                return _staffspacing;
            }
            set
            {
                _staffspacing = value;
            }
        }
        
        public Yesno Newsystem
        {
            get
            {
                return _newsystem;
            }
            set
            {
                _newsystem = value;
            }
        }
        
        public Yesno Newpage
        {
            get
            {
                return _newpage;
            }
            set
            {
                _newpage = value;
            }
        }
        
        public string Blankpage
        {
            get
            {
                return _blankpage;
            }
            set
            {
                _blankpage = value;
            }
        }
        
        public string Pagenumber
        {
            get
            {
                return _pagenumber;
            }
            set
            {
                _pagenumber = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Print));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Print object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Print object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Print object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Print obj, out Exception exception)
        {
            exception = null;
            obj = default(Print);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Print obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Print Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Print)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Print Deserialize(Stream s)
        {
            return ((Print)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Print object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Print object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Print object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Print obj, out Exception exception)
        {
            exception = null;
            obj = default(Print);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Print obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Print LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Pagelayout
    {
        #region Private fields
        private decimal _pageheight;
        private decimal _pagewidth;
        private List<Pagemargins> _pagemargins;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Pagelayout()
        {
            _pagemargins = new List<Pagemargins>();
        }
        
        public decimal Pageheight
        {
            get
            {
                return _pageheight;
            }
            set
            {
                _pageheight = value;
            }
        }
        
        public decimal Pagewidth
        {
            get
            {
                return _pagewidth;
            }
            set
            {
                _pagewidth = value;
            }
        }
        
        public List<Pagemargins> Pagemargins
        {
            get
            {
                return _pagemargins;
            }
            set
            {
                _pagemargins = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Pagelayout));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Pagelayout object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Pagelayout object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Pagelayout object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Pagelayout obj, out Exception exception)
        {
            exception = null;
            obj = default(Pagelayout);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Pagelayout obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Pagelayout Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Pagelayout)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Pagelayout Deserialize(Stream s)
        {
            return ((Pagelayout)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Pagelayout object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Pagelayout object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Pagelayout object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Pagelayout obj, out Exception exception)
        {
            exception = null;
            obj = default(Pagelayout);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Pagelayout obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Pagelayout LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Pagemargins
    {
        #region Private fields
        private decimal _leftmargin;
        private decimal _rightmargin;
        private decimal _topmargin;
        private decimal _bottommargin;
        private Margintype _type;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Leftmargin
        {
            get
            {
                return _leftmargin;
            }
            set
            {
                _leftmargin = value;
            }
        }
        
        public decimal Rightmargin
        {
            get
            {
                return _rightmargin;
            }
            set
            {
                _rightmargin = value;
            }
        }
        
        public decimal Topmargin
        {
            get
            {
                return _topmargin;
            }
            set
            {
                _topmargin = value;
            }
        }
        
        public decimal Bottommargin
        {
            get
            {
                return _bottommargin;
            }
            set
            {
                _bottommargin = value;
            }
        }
        
        public Margintype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Pagemargins));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Pagemargins object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Pagemargins object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Pagemargins object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Pagemargins obj, out Exception exception)
        {
            exception = null;
            obj = default(Pagemargins);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Pagemargins obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Pagemargins Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Pagemargins)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Pagemargins Deserialize(Stream s)
        {
            return ((Pagemargins)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Pagemargins object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Pagemargins object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Pagemargins object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Pagemargins obj, out Exception exception)
        {
            exception = null;
            obj = default(Pagemargins);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Pagemargins obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Pagemargins LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Margintype
    {
        odd,
        even,
        both,
    }
    
    [DebuggerStepThrough]
    public partial class Systemlayout
    {
        #region Private fields
        private Systemmargins _systemmargins;
        private decimal _systemdistance;
        private decimal _topsystemdistance;
        private Systemdividers _systemdividers;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Systemlayout()
        {
            _systemdividers = new Systemdividers();
            _systemmargins = new Systemmargins();
        }
        
        public Systemmargins Systemmargins
        {
            get
            {
                return _systemmargins;
            }
            set
            {
                _systemmargins = value;
            }
        }
        
        public decimal Systemdistance
        {
            get
            {
                return _systemdistance;
            }
            set
            {
                _systemdistance = value;
            }
        }
        
        public decimal Topsystemdistance
        {
            get
            {
                return _topsystemdistance;
            }
            set
            {
                _topsystemdistance = value;
            }
        }
        
        public Systemdividers Systemdividers
        {
            get
            {
                return _systemdividers;
            }
            set
            {
                _systemdividers = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Systemlayout));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Systemlayout object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Systemlayout object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Systemlayout object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Systemlayout obj, out Exception exception)
        {
            exception = null;
            obj = default(Systemlayout);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Systemlayout obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Systemlayout Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Systemlayout)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Systemlayout Deserialize(Stream s)
        {
            return ((Systemlayout)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Systemlayout object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Systemlayout object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Systemlayout object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Systemlayout obj, out Exception exception)
        {
            exception = null;
            obj = default(Systemlayout);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Systemlayout obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Systemlayout LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Systemmargins
    {
        #region Private fields
        private decimal _leftmargin;
        private decimal _rightmargin;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Leftmargin
        {
            get
            {
                return _leftmargin;
            }
            set
            {
                _leftmargin = value;
            }
        }
        
        public decimal Rightmargin
        {
            get
            {
                return _rightmargin;
            }
            set
            {
                _rightmargin = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Systemmargins));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Systemmargins object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Systemmargins object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Systemmargins object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Systemmargins obj, out Exception exception)
        {
            exception = null;
            obj = default(Systemmargins);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Systemmargins obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Systemmargins Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Systemmargins)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Systemmargins Deserialize(Stream s)
        {
            return ((Systemmargins)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Systemmargins object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Systemmargins object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Systemmargins object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Systemmargins obj, out Exception exception)
        {
            exception = null;
            obj = default(Systemmargins);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Systemmargins obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Systemmargins LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Systemdividers
    {
        #region Private fields
        private Emptyprintobjectstylealign _leftdivider;
        private Emptyprintobjectstylealign _rightdivider;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Systemdividers()
        {
            _rightdivider = new Emptyprintobjectstylealign();
            _leftdivider = new Emptyprintobjectstylealign();
        }
        
        public Emptyprintobjectstylealign Leftdivider
        {
            get
            {
                return _leftdivider;
            }
            set
            {
                _leftdivider = value;
            }
        }
        
        public Emptyprintobjectstylealign Rightdivider
        {
            get
            {
                return _rightdivider;
            }
            set
            {
                _rightdivider = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Systemdividers));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Systemdividers object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Systemdividers object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Systemdividers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Systemdividers obj, out Exception exception)
        {
            exception = null;
            obj = default(Systemdividers);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Systemdividers obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Systemdividers Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Systemdividers)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Systemdividers Deserialize(Stream s)
        {
            return ((Systemdividers)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Systemdividers object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Systemdividers object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Systemdividers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Systemdividers obj, out Exception exception)
        {
            exception = null;
            obj = default(Systemdividers);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Systemdividers obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Systemdividers LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Emptyprintobjectstylealign
    {
        #region Private fields
        private Yesno _printobject;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Emptyprintobjectstylealign));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Emptyprintobjectstylealign object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Emptyprintobjectstylealign object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Emptyprintobjectstylealign object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Emptyprintobjectstylealign obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyprintobjectstylealign);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Emptyprintobjectstylealign obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Emptyprintobjectstylealign Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Emptyprintobjectstylealign)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Emptyprintobjectstylealign Deserialize(Stream s)
        {
            return ((Emptyprintobjectstylealign)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Emptyprintobjectstylealign object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Emptyprintobjectstylealign object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Emptyprintobjectstylealign object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Emptyprintobjectstylealign obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyprintobjectstylealign);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Emptyprintobjectstylealign obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Emptyprintobjectstylealign LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Stafflayout
    {
        #region Private fields
        private decimal _staffdistance;
        private string _number;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Staffdistance
        {
            get
            {
                return _staffdistance;
            }
            set
            {
                _staffdistance = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Stafflayout));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Stafflayout object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Stafflayout object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Stafflayout object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Stafflayout obj, out Exception exception)
        {
            exception = null;
            obj = default(Stafflayout);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Stafflayout obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Stafflayout Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Stafflayout)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Stafflayout Deserialize(Stream s)
        {
            return ((Stafflayout)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Stafflayout object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Stafflayout object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Stafflayout object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Stafflayout obj, out Exception exception)
        {
            exception = null;
            obj = default(Stafflayout);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Stafflayout obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Stafflayout LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Namedisplay
    {
        #region Private fields
        private List<object> _items;
        private Yesno _printobject;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Namedisplay()
        {
            _items = new List<object>();
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Namedisplay));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Namedisplay object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Namedisplay object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Namedisplay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Namedisplay obj, out Exception exception)
        {
            exception = null;
            obj = default(Namedisplay);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Namedisplay obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Namedisplay Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Namedisplay)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Namedisplay Deserialize(Stream s)
        {
            return ((Namedisplay)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Namedisplay object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Namedisplay object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Namedisplay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Namedisplay obj, out Exception exception)
        {
            exception = null;
            obj = default(Namedisplay);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Namedisplay obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Namedisplay LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Accidentaltext
    {
        #region Private fields
        private string _lang;
        private string _space;
        private string _smufl;
        private Accidentalvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Lang
        {
            get
            {
                return _lang;
            }
            set
            {
                _lang = value;
            }
        }
        
        public string Space
        {
            get
            {
                return _space;
            }
            set
            {
                _space = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Accidentalvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Accidentaltext));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Accidentaltext object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Accidentaltext object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Accidentaltext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Accidentaltext obj, out Exception exception)
        {
            exception = null;
            obj = default(Accidentaltext);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Accidentaltext obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Accidentaltext Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Accidentaltext)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Accidentaltext Deserialize(Stream s)
        {
            return ((Accidentaltext)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Accidentaltext object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Accidentaltext object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Accidentaltext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Accidentaltext obj, out Exception exception)
        {
            exception = null;
            obj = default(Accidentaltext);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Accidentaltext obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Accidentaltext LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Accidentalvalue
    {
        sharp,
        natural,
        flat,
        [XmlEnumAttribute("double-sharp")]
        doublesharp,
        [XmlEnumAttribute("sharp-sharp")]
        sharpsharp,
        [XmlEnumAttribute("flat-flat")]
        flatflat,
        [XmlEnumAttribute("natural-sharp")]
        naturalsharp,
        [XmlEnumAttribute("natural-flat")]
        naturalflat,
        [XmlEnumAttribute("quarter-flat")]
        quarterflat,
        [XmlEnumAttribute("quarter-sharp")]
        quartersharp,
        [XmlEnumAttribute("three-quarters-flat")]
        threequartersflat,
        [XmlEnumAttribute("three-quarters-sharp")]
        threequarterssharp,
        [XmlEnumAttribute("sharp-down")]
        sharpdown,
        [XmlEnumAttribute("sharp-up")]
        sharpup,
        [XmlEnumAttribute("natural-down")]
        naturaldown,
        [XmlEnumAttribute("natural-up")]
        naturalup,
        [XmlEnumAttribute("flat-down")]
        flatdown,
        [XmlEnumAttribute("flat-up")]
        flatup,
        [XmlEnumAttribute("double-sharp-down")]
        doublesharpdown,
        [XmlEnumAttribute("double-sharp-up")]
        doublesharpup,
        [XmlEnumAttribute("flat-flat-down")]
        flatflatdown,
        [XmlEnumAttribute("flat-flat-up")]
        flatflatup,
        [XmlEnumAttribute("arrow-down")]
        arrowdown,
        [XmlEnumAttribute("arrow-up")]
        arrowup,
        [XmlEnumAttribute("triple-sharp")]
        triplesharp,
        [XmlEnumAttribute("triple-flat")]
        tripleflat,
        [XmlEnumAttribute("slash-quarter-sharp")]
        slashquartersharp,
        [XmlEnumAttribute("slash-sharp")]
        slashsharp,
        [XmlEnumAttribute("slash-flat")]
        slashflat,
        [XmlEnumAttribute("double-slash-flat")]
        doubleslashflat,
        [XmlEnumAttribute("sharp-1")]
        sharp1,
        [XmlEnumAttribute("sharp-2")]
        sharp2,
        [XmlEnumAttribute("sharp-3")]
        sharp3,
        [XmlEnumAttribute("sharp-5")]
        sharp5,
        [XmlEnumAttribute("flat-1")]
        flat1,
        [XmlEnumAttribute("flat-2")]
        flat2,
        [XmlEnumAttribute("flat-3")]
        flat3,
        [XmlEnumAttribute("flat-4")]
        flat4,
        sori,
        koron,
        other,
    }
    
    [DebuggerStepThrough]
    public partial class Figure
    {
        #region Private fields
        private Styletext _prefix;
        private Styletext _figurenumber;
        private Styletext _suffix;
        private Extend _extend;
        private Formattedtext _footnote;
        private Level _level;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Figure()
        {
            _level = new Level();
            _footnote = new Formattedtext();
            _extend = new Extend();
            _suffix = new Styletext();
            _figurenumber = new Styletext();
            _prefix = new Styletext();
        }
        
        public Styletext Prefix
        {
            get
            {
                return _prefix;
            }
            set
            {
                _prefix = value;
            }
        }
        
        public Styletext Figurenumber
        {
            get
            {
                return _figurenumber;
            }
            set
            {
                _figurenumber = value;
            }
        }
        
        public Styletext Suffix
        {
            get
            {
                return _suffix;
            }
            set
            {
                _suffix = value;
            }
        }
        
        public Extend Extend
        {
            get
            {
                return _extend;
            }
            set
            {
                _extend = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Figure));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Figure object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Figure object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Figure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Figure obj, out Exception exception)
        {
            exception = null;
            obj = default(Figure);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Figure obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Figure Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Figure)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Figure Deserialize(Stream s)
        {
            return ((Figure)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Figure object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Figure object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Figure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Figure obj, out Exception exception)
        {
            exception = null;
            obj = default(Figure);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Figure obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Figure LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Styletext
    {
        #region Private fields
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Styletext));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Styletext object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Styletext object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Styletext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Styletext obj, out Exception exception)
        {
            exception = null;
            obj = default(Styletext);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Styletext obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Styletext Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Styletext)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Styletext Deserialize(Stream s)
        {
            return ((Styletext)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Styletext object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Styletext object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Styletext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Styletext obj, out Exception exception)
        {
            exception = null;
            obj = default(Styletext);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Styletext obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Styletext LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Extend
    {
        #region Private fields
        private Startstopcontinue _type;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _color;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstopcontinue Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Extend));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Extend object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Extend object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Extend object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Extend obj, out Exception exception)
        {
            exception = null;
            obj = default(Extend);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Extend obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Extend Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Extend)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Extend Deserialize(Stream s)
        {
            return ((Extend)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Extend object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Extend object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Extend object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Extend obj, out Exception exception)
        {
            exception = null;
            obj = default(Extend);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Extend obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Extend LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Figuredbass
    {
        #region Private fields
        private List<Figure> _figure;
        private decimal _duration;
        private Formattedtext _footnote;
        private Level _level;
        private Abovebelow _placement;
        private Yesno _printdot;
        private Yesno _printlyric;
        private Yesno _parentheses;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Figuredbass()
        {
            _level = new Level();
            _footnote = new Formattedtext();
            _figure = new List<Figure>();
        }
        
        public List<Figure> Figure
        {
            get
            {
                return _figure;
            }
            set
            {
                _figure = value;
            }
        }
        
        public decimal Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Yesno Printdot
        {
            get
            {
                return _printdot;
            }
            set
            {
                _printdot = value;
            }
        }
        
        public Yesno Printlyric
        {
            get
            {
                return _printlyric;
            }
            set
            {
                _printlyric = value;
            }
        }
        
        public Yesno Parentheses
        {
            get
            {
                return _parentheses;
            }
            set
            {
                _parentheses = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Figuredbass));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Figuredbass object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Figuredbass object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Figuredbass object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Figuredbass obj, out Exception exception)
        {
            exception = null;
            obj = default(Figuredbass);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Figuredbass obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Figuredbass Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Figuredbass)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Figuredbass Deserialize(Stream s)
        {
            return ((Figuredbass)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Figuredbass object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Figuredbass object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Figuredbass object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Figuredbass obj, out Exception exception)
        {
            exception = null;
            obj = default(Figuredbass);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Figuredbass obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Figuredbass LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Barre
    {
        #region Private fields
        private Startstop _type;
        private string _color;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Barre));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Barre object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Barre object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Barre object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Barre obj, out Exception exception)
        {
            exception = null;
            obj = default(Barre);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Barre obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Barre Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Barre)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Barre Deserialize(Stream s)
        {
            return ((Barre)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Barre object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Barre object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Barre object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Barre obj, out Exception exception)
        {
            exception = null;
            obj = default(Barre);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Barre obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Barre LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Startstop
    {
        start,
        stop,
    }
    
    [DebuggerStepThrough]
    public partial class Framenote
    {
        #region Private fields
        private String _string;
        private Fret _fret;
        private Fingering _fingering;
        private Barre _barre;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Framenote()
        {
            _barre = new Barre();
            _fingering = new Fingering();
            _fret = new Fret();
            _string = new String();
        }
        
        public String String
        {
            get
            {
                return _string;
            }
            set
            {
                _string = value;
            }
        }
        
        public Fret Fret
        {
            get
            {
                return _fret;
            }
            set
            {
                _fret = value;
            }
        }
        
        public Fingering Fingering
        {
            get
            {
                return _fingering;
            }
            set
            {
                _fingering = value;
            }
        }
        
        public Barre Barre
        {
            get
            {
                return _barre;
            }
            set
            {
                _barre = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Framenote));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Framenote object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Framenote object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Framenote object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Framenote obj, out Exception exception)
        {
            exception = null;
            obj = default(Framenote);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Framenote obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Framenote Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Framenote)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Framenote Deserialize(Stream s)
        {
            return ((Framenote)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Framenote object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Framenote object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Framenote object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Framenote obj, out Exception exception)
        {
            exception = null;
            obj = default(Framenote);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Framenote obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Framenote LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class String
    {
        #region Private fields
        private Abovebelow _placement;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(String));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize String object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes String object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output String object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out String obj, out Exception exception)
        {
            exception = null;
            obj = default(String);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out String obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static String Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((String)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static String Deserialize(Stream s)
        {
            return ((String)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current String object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an String object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output String object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out String obj, out Exception exception)
        {
            exception = null;
            obj = default(String);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out String obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static String LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Fret
    {
        #region Private fields
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Fret));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Fret object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Fret object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Fret object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Fret obj, out Exception exception)
        {
            exception = null;
            obj = default(Fret);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Fret obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Fret Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Fret)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Fret Deserialize(Stream s)
        {
            return ((Fret)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Fret object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Fret object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Fret object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Fret obj, out Exception exception)
        {
            exception = null;
            obj = default(Fret);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Fret obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Fret LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Fontstyle
    {
        normal,
        italic,
    }
    
    public enum Fontweight
    {
        normal,
        bold,
    }
    
    [DebuggerStepThrough]
    public partial class Fingering
    {
        #region Private fields
        private Yesno _substitution;
        private Yesno _alternate;
        private Abovebelow _placement;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Substitution
        {
            get
            {
                return _substitution;
            }
            set
            {
                _substitution = value;
            }
        }
        
        public Yesno Alternate
        {
            get
            {
                return _alternate;
            }
            set
            {
                _alternate = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Fingering));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Fingering object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Fingering object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Fingering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Fingering obj, out Exception exception)
        {
            exception = null;
            obj = default(Fingering);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Fingering obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Fingering Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Fingering)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Fingering Deserialize(Stream s)
        {
            return ((Fingering)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Fingering object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Fingering object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Fingering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Fingering obj, out Exception exception)
        {
            exception = null;
            obj = default(Fingering);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Fingering obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Fingering LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Firstfret
    {
        #region Private fields
        private string _text;
        private Leftright _location;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public Leftright Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Firstfret));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Firstfret object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Firstfret object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Firstfret object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Firstfret obj, out Exception exception)
        {
            exception = null;
            obj = default(Firstfret);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Firstfret obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Firstfret Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Firstfret)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Firstfret Deserialize(Stream s)
        {
            return ((Firstfret)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Firstfret object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Firstfret object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Firstfret object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Firstfret obj, out Exception exception)
        {
            exception = null;
            obj = default(Firstfret);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Firstfret obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Firstfret LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Leftright
    {
        left,
        right,
    }
    
    [DebuggerStepThrough]
    public partial class Frame
    {
        #region Private fields
        private string _framestrings;
        private string _framefrets;
        private Firstfret _firstfret;
        private List<Framenote> _framenote;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _color;
        private Leftcenterright _halign;
        private Valignimage _valign;
        private decimal _height;
        private decimal _width;
        private string _unplayed;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Frame()
        {
            _framenote = new List<Framenote>();
            _firstfret = new Firstfret();
        }
        
        public string Framestrings
        {
            get
            {
                return _framestrings;
            }
            set
            {
                _framestrings = value;
            }
        }
        
        public string Framefrets
        {
            get
            {
                return _framefrets;
            }
            set
            {
                _framefrets = value;
            }
        }
        
        public Firstfret Firstfret
        {
            get
            {
                return _firstfret;
            }
            set
            {
                _firstfret = value;
            }
        }
        
        public List<Framenote> Framenote
        {
            get
            {
                return _framenote;
            }
            set
            {
                _framenote = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Leftcenterright Halign
        {
            get
            {
                return _halign;
            }
            set
            {
                _halign = value;
            }
        }
        
        public Valignimage Valign
        {
            get
            {
                return _valign;
            }
            set
            {
                _valign = value;
            }
        }
        
        public decimal Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
        
        public decimal Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
        
        public string Unplayed
        {
            get
            {
                return _unplayed;
            }
            set
            {
                _unplayed = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Frame));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Frame object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Frame object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Frame object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Frame obj, out Exception exception)
        {
            exception = null;
            obj = default(Frame);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Frame obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Frame Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Frame)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Frame Deserialize(Stream s)
        {
            return ((Frame)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Frame object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Frame object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Frame object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Frame obj, out Exception exception)
        {
            exception = null;
            obj = default(Frame);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Frame obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Frame LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Leftcenterright
    {
        left,
        center,
        right,
    }
    
    public enum Valignimage
    {
        top,
        middle,
        bottom,
    }
    
    [DebuggerStepThrough]
    public partial class Degreetype
    {
        #region Private fields
        private string _text;
        private Degreetypevalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public Degreetypevalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Degreetype));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Degreetype object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Degreetype object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Degreetype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Degreetype obj, out Exception exception)
        {
            exception = null;
            obj = default(Degreetype);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Degreetype obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Degreetype Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Degreetype)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Degreetype Deserialize(Stream s)
        {
            return ((Degreetype)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Degreetype object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Degreetype object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Degreetype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Degreetype obj, out Exception exception)
        {
            exception = null;
            obj = default(Degreetype);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Degreetype obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Degreetype LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Degreetypevalue
    {
        add,
        alter,
        subtract,
    }
    
    [DebuggerStepThrough]
    public partial class Degreealter
    {
        #region Private fields
        private Yesno _plusminus;
        private decimal _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Plusminus
        {
            get
            {
                return _plusminus;
            }
            set
            {
                _plusminus = value;
            }
        }
        
        public decimal Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Degreealter));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Degreealter object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Degreealter object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Degreealter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Degreealter obj, out Exception exception)
        {
            exception = null;
            obj = default(Degreealter);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Degreealter obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Degreealter Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Degreealter)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Degreealter Deserialize(Stream s)
        {
            return ((Degreealter)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Degreealter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Degreealter object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Degreealter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Degreealter obj, out Exception exception)
        {
            exception = null;
            obj = default(Degreealter);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Degreealter obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Degreealter LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Degreevalue
    {
        #region Private fields
        private Degreesymbolvalue _symbol;
        private string _text;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Degreesymbolvalue Symbol
        {
            get
            {
                return _symbol;
            }
            set
            {
                _symbol = value;
            }
        }
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Degreevalue));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Degreevalue object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Degreevalue object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Degreevalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Degreevalue obj, out Exception exception)
        {
            exception = null;
            obj = default(Degreevalue);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Degreevalue obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Degreevalue Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Degreevalue)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Degreevalue Deserialize(Stream s)
        {
            return ((Degreevalue)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Degreevalue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Degreevalue object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Degreevalue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Degreevalue obj, out Exception exception)
        {
            exception = null;
            obj = default(Degreevalue);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Degreevalue obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Degreevalue LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Degreesymbolvalue
    {
        major,
        minor,
        augmented,
        diminished,
        [XmlEnumAttribute("half-diminished")]
        halfdiminished,
    }
    
    [DebuggerStepThrough]
    public partial class Degree
    {
        #region Private fields
        private Degreevalue _degreevalue;
        private Degreealter _degreealter;
        private Degreetype _degreetype;
        private Yesno _printobject;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Degree()
        {
            _degreetype = new Degreetype();
            _degreealter = new Degreealter();
            _degreevalue = new Degreevalue();
        }
        
        public Degreevalue Degreevalue
        {
            get
            {
                return _degreevalue;
            }
            set
            {
                _degreevalue = value;
            }
        }
        
        public Degreealter Degreealter
        {
            get
            {
                return _degreealter;
            }
            set
            {
                _degreealter = value;
            }
        }
        
        public Degreetype Degreetype
        {
            get
            {
                return _degreetype;
            }
            set
            {
                _degreetype = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Degree));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Degree object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Degree object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Degree object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Degree obj, out Exception exception)
        {
            exception = null;
            obj = default(Degree);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Degree obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Degree Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Degree)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Degree Deserialize(Stream s)
        {
            return ((Degree)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Degree object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Degree object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Degree object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Degree obj, out Exception exception)
        {
            exception = null;
            obj = default(Degree);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Degree obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Degree LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Bassstep
    {
        #region Private fields
        private string _text;
        private Step _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public Step Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Bassstep));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Bassstep object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Bassstep object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Bassstep object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Bassstep obj, out Exception exception)
        {
            exception = null;
            obj = default(Bassstep);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Bassstep obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Bassstep Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Bassstep)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Bassstep Deserialize(Stream s)
        {
            return ((Bassstep)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Bassstep object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Bassstep object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Bassstep object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Bassstep obj, out Exception exception)
        {
            exception = null;
            obj = default(Bassstep);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Bassstep obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Bassstep LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Step
    {
        A,
        B,
        C,
        D,
        E,
        F,
        G,
    }
    
    [DebuggerStepThrough]
    public partial class Bass
    {
        #region Private fields
        private Styletext _bassseparator;
        private Bassstep _bassstep;
        private Harmonyalter _bassalter;
        private Harmonyarrangement _arrangement;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Bass()
        {
            _bassalter = new Harmonyalter();
            _bassstep = new Bassstep();
            _bassseparator = new Styletext();
        }
        
        public Styletext Bassseparator
        {
            get
            {
                return _bassseparator;
            }
            set
            {
                _bassseparator = value;
            }
        }
        
        public Bassstep Bassstep
        {
            get
            {
                return _bassstep;
            }
            set
            {
                _bassstep = value;
            }
        }
        
        public Harmonyalter Bassalter
        {
            get
            {
                return _bassalter;
            }
            set
            {
                _bassalter = value;
            }
        }
        
        public Harmonyarrangement Arrangement
        {
            get
            {
                return _arrangement;
            }
            set
            {
                _arrangement = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Bass));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Bass object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Bass object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Bass object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Bass obj, out Exception exception)
        {
            exception = null;
            obj = default(Bass);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Bass obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Bass Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Bass)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Bass Deserialize(Stream s)
        {
            return ((Bass)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Bass object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Bass object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Bass object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Bass obj, out Exception exception)
        {
            exception = null;
            obj = default(Bass);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Bass obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Bass LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Harmonyalter
    {
        #region Private fields
        private Yesno _printobject;
        private Leftright _location;
        private decimal _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public Leftright Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
        
        public decimal Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Harmonyalter));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Harmonyalter object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Harmonyalter object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Harmonyalter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Harmonyalter obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmonyalter);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Harmonyalter obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Harmonyalter Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Harmonyalter)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Harmonyalter Deserialize(Stream s)
        {
            return ((Harmonyalter)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Harmonyalter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Harmonyalter object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Harmonyalter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Harmonyalter obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmonyalter);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Harmonyalter obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Harmonyalter LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Harmonyarrangement
    {
        vertical,
        horizontal,
        diagonal,
    }
    
    [DebuggerStepThrough]
    public partial class Inversion
    {
        #region Private fields
        private string _text;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Inversion));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Inversion object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Inversion object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Inversion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Inversion obj, out Exception exception)
        {
            exception = null;
            obj = default(Inversion);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Inversion obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Inversion Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Inversion)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Inversion Deserialize(Stream s)
        {
            return ((Inversion)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Inversion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Inversion object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Inversion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Inversion obj, out Exception exception)
        {
            exception = null;
            obj = default(Inversion);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Inversion obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Inversion LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Kind
    {
        #region Private fields
        private Yesno _usesymbols;
        private string _text;
        private Yesno _stackdegrees;
        private Yesno _parenthesesdegrees;
        private Yesno _bracketdegrees;
        private Leftcenterright _halign;
        private Valign _valign;
        private Kindvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Usesymbols
        {
            get
            {
                return _usesymbols;
            }
            set
            {
                _usesymbols = value;
            }
        }
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public Yesno Stackdegrees
        {
            get
            {
                return _stackdegrees;
            }
            set
            {
                _stackdegrees = value;
            }
        }
        
        public Yesno Parenthesesdegrees
        {
            get
            {
                return _parenthesesdegrees;
            }
            set
            {
                _parenthesesdegrees = value;
            }
        }
        
        public Yesno Bracketdegrees
        {
            get
            {
                return _bracketdegrees;
            }
            set
            {
                _bracketdegrees = value;
            }
        }
        
        public Leftcenterright Halign
        {
            get
            {
                return _halign;
            }
            set
            {
                _halign = value;
            }
        }
        
        public Valign Valign
        {
            get
            {
                return _valign;
            }
            set
            {
                _valign = value;
            }
        }
        
        public Kindvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Kind));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Kind object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Kind object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Kind object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Kind obj, out Exception exception)
        {
            exception = null;
            obj = default(Kind);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Kind obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Kind Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Kind)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Kind Deserialize(Stream s)
        {
            return ((Kind)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Kind object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Kind object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Kind object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Kind obj, out Exception exception)
        {
            exception = null;
            obj = default(Kind);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Kind obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Kind LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Valign
    {
        top,
        middle,
        bottom,
        baseline,
    }
    
    public enum Kindvalue
    {
        major,
        minor,
        augmented,
        diminished,
        dominant,
        [XmlEnumAttribute("major-seventh")]
        majorseventh,
        [XmlEnumAttribute("minor-seventh")]
        minorseventh,
        [XmlEnumAttribute("diminished-seventh")]
        diminishedseventh,
        [XmlEnumAttribute("augmented-seventh")]
        augmentedseventh,
        [XmlEnumAttribute("half-diminished")]
        halfdiminished,
        [XmlEnumAttribute("major-minor")]
        majorminor,
        [XmlEnumAttribute("major-sixth")]
        majorsixth,
        [XmlEnumAttribute("minor-sixth")]
        minorsixth,
        [XmlEnumAttribute("dominant-ninth")]
        dominantninth,
        [XmlEnumAttribute("major-ninth")]
        majorninth,
        [XmlEnumAttribute("minor-ninth")]
        minorninth,
        [XmlEnumAttribute("dominant-11th")]
        dominant11th,
        [XmlEnumAttribute("major-11th")]
        major11th,
        [XmlEnumAttribute("minor-11th")]
        minor11th,
        [XmlEnumAttribute("dominant-13th")]
        dominant13th,
        [XmlEnumAttribute("major-13th")]
        major13th,
        [XmlEnumAttribute("minor-13th")]
        minor13th,
        [XmlEnumAttribute("suspended-second")]
        suspendedsecond,
        [XmlEnumAttribute("suspended-fourth")]
        suspendedfourth,
        Neapolitan,
        Italian,
        French,
        German,
        pedal,
        power,
        Tristan,
        other,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Numeralkey
    {
        #region Private fields
        private string _numeralfifths;
        private Numeralmode _numeralmode;
        private Yesno _printobject;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Numeralfifths
        {
            get
            {
                return _numeralfifths;
            }
            set
            {
                _numeralfifths = value;
            }
        }
        
        public Numeralmode Numeralmode
        {
            get
            {
                return _numeralmode;
            }
            set
            {
                _numeralmode = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Numeralkey));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Numeralkey object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Numeralkey object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Numeralkey object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Numeralkey obj, out Exception exception)
        {
            exception = null;
            obj = default(Numeralkey);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Numeralkey obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Numeralkey Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Numeralkey)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Numeralkey Deserialize(Stream s)
        {
            return ((Numeralkey)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Numeralkey object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Numeralkey object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Numeralkey object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Numeralkey obj, out Exception exception)
        {
            exception = null;
            obj = default(Numeralkey);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Numeralkey obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Numeralkey LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Numeralmode
    {
        major,
        minor,
        [XmlEnumAttribute("natural minor")]
        naturalminor,
        [XmlEnumAttribute("melodic minor")]
        melodicminor,
        [XmlEnumAttribute("harmonic minor")]
        harmonicminor,
    }
    
    [DebuggerStepThrough]
    public partial class Numeralroot
    {
        #region Private fields
        private string _text;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Numeralroot));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Numeralroot object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Numeralroot object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Numeralroot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Numeralroot obj, out Exception exception)
        {
            exception = null;
            obj = default(Numeralroot);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Numeralroot obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Numeralroot Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Numeralroot)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Numeralroot Deserialize(Stream s)
        {
            return ((Numeralroot)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Numeralroot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Numeralroot object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Numeralroot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Numeralroot obj, out Exception exception)
        {
            exception = null;
            obj = default(Numeralroot);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Numeralroot obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Numeralroot LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Numeral
    {
        #region Private fields
        private Numeralroot _numeralroot;
        private Harmonyalter _numeralalter;
        private Numeralkey _numeralkey;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Numeral()
        {
            _numeralkey = new Numeralkey();
            _numeralalter = new Harmonyalter();
            _numeralroot = new Numeralroot();
        }
        
        public Numeralroot Numeralroot
        {
            get
            {
                return _numeralroot;
            }
            set
            {
                _numeralroot = value;
            }
        }
        
        public Harmonyalter Numeralalter
        {
            get
            {
                return _numeralalter;
            }
            set
            {
                _numeralalter = value;
            }
        }
        
        public Numeralkey Numeralkey
        {
            get
            {
                return _numeralkey;
            }
            set
            {
                _numeralkey = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Numeral));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Numeral object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Numeral object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Numeral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Numeral obj, out Exception exception)
        {
            exception = null;
            obj = default(Numeral);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Numeral obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Numeral Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Numeral)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Numeral Deserialize(Stream s)
        {
            return ((Numeral)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Numeral object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Numeral object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Numeral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Numeral obj, out Exception exception)
        {
            exception = null;
            obj = default(Numeral);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Numeral obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Numeral LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Rootstep
    {
        #region Private fields
        private string _text;
        private Step _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public Step Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Rootstep));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Rootstep object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Rootstep object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Rootstep object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Rootstep obj, out Exception exception)
        {
            exception = null;
            obj = default(Rootstep);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Rootstep obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Rootstep Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Rootstep)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Rootstep Deserialize(Stream s)
        {
            return ((Rootstep)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Rootstep object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Rootstep object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Rootstep object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Rootstep obj, out Exception exception)
        {
            exception = null;
            obj = default(Rootstep);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Rootstep obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Rootstep LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Root
    {
        #region Private fields
        private Rootstep _rootstep;
        private Harmonyalter _rootalter;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Root()
        {
            _rootalter = new Harmonyalter();
            _rootstep = new Rootstep();
        }
        
        public Rootstep Rootstep
        {
            get
            {
                return _rootstep;
            }
            set
            {
                _rootstep = value;
            }
        }
        
        public Harmonyalter Rootalter
        {
            get
            {
                return _rootalter;
            }
            set
            {
                _rootalter = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Root));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Root object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Root object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Root object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Root obj, out Exception exception)
        {
            exception = null;
            obj = default(Root);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Root obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Root Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Root)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Root Deserialize(Stream s)
        {
            return ((Root)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Root object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Root object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Root object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Root obj, out Exception exception)
        {
            exception = null;
            obj = default(Root);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Root obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Root LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Harmony
    {
        #region Private fields
        private List<object> _items;
        private List<Kind> _kind;
        private List<Inversion> _inversion;
        private List<Bass> _bass;
        private List<Degree> _degree;
        private Frame _frame;
        private Offset _offset;
        private Formattedtext _footnote;
        private Level _level;
        private string _staff;
        private Harmonytype _type;
        private Yesno _printobject;
        private Yesno _printframe;
        private Harmonyarrangement _arrangement;
        private Abovebelow _placement;
        private Systemrelation _system;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Harmony()
        {
            _level = new Level();
            _footnote = new Formattedtext();
            _offset = new Offset();
            _frame = new Frame();
            _degree = new List<Degree>();
            _bass = new List<Bass>();
            _inversion = new List<Inversion>();
            _kind = new List<Kind>();
            _items = new List<object>();
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public List<Kind> Kind
        {
            get
            {
                return _kind;
            }
            set
            {
                _kind = value;
            }
        }
        
        public List<Inversion> Inversion
        {
            get
            {
                return _inversion;
            }
            set
            {
                _inversion = value;
            }
        }
        
        public List<Bass> Bass
        {
            get
            {
                return _bass;
            }
            set
            {
                _bass = value;
            }
        }
        
        public List<Degree> Degree
        {
            get
            {
                return _degree;
            }
            set
            {
                _degree = value;
            }
        }
        
        public Frame Frame
        {
            get
            {
                return _frame;
            }
            set
            {
                _frame = value;
            }
        }
        
        public Offset Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public string Staff
        {
            get
            {
                return _staff;
            }
            set
            {
                _staff = value;
            }
        }
        
        public Harmonytype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public Yesno Printframe
        {
            get
            {
                return _printframe;
            }
            set
            {
                _printframe = value;
            }
        }
        
        public Harmonyarrangement Arrangement
        {
            get
            {
                return _arrangement;
            }
            set
            {
                _arrangement = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Systemrelation System
        {
            get
            {
                return _system;
            }
            set
            {
                _system = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Harmony));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Harmony object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Harmony object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Harmony object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Harmony obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmony);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Harmony obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Harmony Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Harmony)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Harmony Deserialize(Stream s)
        {
            return ((Harmony)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Harmony object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Harmony object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Harmony object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Harmony obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmony);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Harmony obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Harmony LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Offset
    {
        #region Private fields
        private Yesno _sound;
        private decimal _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Sound
        {
            get
            {
                return _sound;
            }
            set
            {
                _sound = value;
            }
        }
        
        public decimal Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Offset));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Offset object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Offset object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Offset object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Offset obj, out Exception exception)
        {
            exception = null;
            obj = default(Offset);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Offset obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Offset Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Offset)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Offset Deserialize(Stream s)
        {
            return ((Offset)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Offset object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Offset object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Offset object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Offset obj, out Exception exception)
        {
            exception = null;
            obj = default(Offset);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Offset obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Offset LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Harmonytype
    {
        @explicit,
        implied,
        alternate,
    }
    
    [DebuggerStepThrough]
    public partial class Slash
    {
        #region Private fields
        private Notetypevalue _slashtype;
        private List<Empty> _slashdot;
        private List<string> _exceptvoice;
        private Startstop _type;
        private Yesno _usedots;
        private Yesno _usestems;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Slash()
        {
            _exceptvoice = new List<string>();
            _slashdot = new List<Empty>();
        }
        
        public Notetypevalue Slashtype
        {
            get
            {
                return _slashtype;
            }
            set
            {
                _slashtype = value;
            }
        }
        
        public List<Empty> Slashdot
        {
            get
            {
                return _slashdot;
            }
            set
            {
                _slashdot = value;
            }
        }
        
        public List<string> Exceptvoice
        {
            get
            {
                return _exceptvoice;
            }
            set
            {
                _exceptvoice = value;
            }
        }
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public Yesno Usedots
        {
            get
            {
                return _usedots;
            }
            set
            {
                _usedots = value;
            }
        }
        
        public Yesno Usestems
        {
            get
            {
                return _usestems;
            }
            set
            {
                _usestems = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Slash));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Slash object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Slash object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Slash object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Slash obj, out Exception exception)
        {
            exception = null;
            obj = default(Slash);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Slash obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Slash Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Slash)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Slash Deserialize(Stream s)
        {
            return ((Slash)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Slash object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Slash object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Slash object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Slash obj, out Exception exception)
        {
            exception = null;
            obj = default(Slash);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Slash obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Slash LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Notetypevalue
    {
        [XmlEnumAttribute("1024th")]
        Item1024th,
        [XmlEnumAttribute("512th")]
        Item512th,
        [XmlEnumAttribute("256th")]
        Item256th,
        [XmlEnumAttribute("128th")]
        Item128th,
        [XmlEnumAttribute("64th")]
        Item64th,
        [XmlEnumAttribute("32nd")]
        Item32nd,
        [XmlEnumAttribute("16th")]
        Item16th,
        eighth,
        quarter,
        half,
        whole,
        breve,
        @long,
        maxima,
    }
    
    [DebuggerStepThrough]
    public partial class Empty
    {
        #region Private fields
        private static XmlSerializer _serializerXml;
        #endregion
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Empty));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Empty object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Empty object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Empty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Empty obj, out Exception exception)
        {
            exception = null;
            obj = default(Empty);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Empty obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Empty Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Empty)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Empty Deserialize(Stream s)
        {
            return ((Empty)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Empty object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Empty object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Empty object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Empty obj, out Exception exception)
        {
            exception = null;
            obj = default(Empty);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Empty obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Empty LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Release : Empty
    {
        #region Private fields
        private decimal _offset;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Release));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Release object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Release object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Release object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Release obj, out Exception exception)
        {
            exception = null;
            obj = default(Release);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Release obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public new static Release Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Release)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Release Deserialize(Stream s)
        {
            return ((Release)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Release object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Release object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Release object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Release obj, out Exception exception)
        {
            exception = null;
            obj = default(Release);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Release obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public new static Release LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Beatrepeat
    {
        #region Private fields
        private Notetypevalue _slashtype;
        private List<Empty> _slashdot;
        private List<string> _exceptvoice;
        private Startstop _type;
        private string _slashes;
        private Yesno _usedots;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Beatrepeat()
        {
            _exceptvoice = new List<string>();
            _slashdot = new List<Empty>();
        }
        
        public Notetypevalue Slashtype
        {
            get
            {
                return _slashtype;
            }
            set
            {
                _slashtype = value;
            }
        }
        
        public List<Empty> Slashdot
        {
            get
            {
                return _slashdot;
            }
            set
            {
                _slashdot = value;
            }
        }
        
        public List<string> Exceptvoice
        {
            get
            {
                return _exceptvoice;
            }
            set
            {
                _exceptvoice = value;
            }
        }
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Slashes
        {
            get
            {
                return _slashes;
            }
            set
            {
                _slashes = value;
            }
        }
        
        public Yesno Usedots
        {
            get
            {
                return _usedots;
            }
            set
            {
                _usedots = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Beatrepeat));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Beatrepeat object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Beatrepeat object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Beatrepeat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Beatrepeat obj, out Exception exception)
        {
            exception = null;
            obj = default(Beatrepeat);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Beatrepeat obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Beatrepeat Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Beatrepeat)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Beatrepeat Deserialize(Stream s)
        {
            return ((Beatrepeat)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Beatrepeat object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Beatrepeat object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Beatrepeat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Beatrepeat obj, out Exception exception)
        {
            exception = null;
            obj = default(Beatrepeat);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Beatrepeat obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Beatrepeat LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Measurerepeat
    {
        #region Private fields
        private Startstop _type;
        private string _slashes;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Slashes
        {
            get
            {
                return _slashes;
            }
            set
            {
                _slashes = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Measurerepeat));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Measurerepeat object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Measurerepeat object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Measurerepeat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Measurerepeat obj, out Exception exception)
        {
            exception = null;
            obj = default(Measurerepeat);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Measurerepeat obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Measurerepeat Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Measurerepeat)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Measurerepeat Deserialize(Stream s)
        {
            return ((Measurerepeat)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Measurerepeat object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Measurerepeat object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Measurerepeat object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Measurerepeat obj, out Exception exception)
        {
            exception = null;
            obj = default(Measurerepeat);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Measurerepeat obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Measurerepeat LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Multiplerest
    {
        #region Private fields
        private Yesno _usesymbols;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Usesymbols
        {
            get
            {
                return _usesymbols;
            }
            set
            {
                _usesymbols = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Multiplerest));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Multiplerest object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Multiplerest object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Multiplerest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Multiplerest obj, out Exception exception)
        {
            exception = null;
            obj = default(Multiplerest);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Multiplerest obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Multiplerest Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Multiplerest)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Multiplerest Deserialize(Stream s)
        {
            return ((Multiplerest)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Multiplerest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Multiplerest object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Multiplerest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Multiplerest obj, out Exception exception)
        {
            exception = null;
            obj = default(Multiplerest);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Multiplerest obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Multiplerest LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Measurestyle
    {
        #region Private fields
        private object _item;
        private string _number;
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Measurestyle));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Measurestyle object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Measurestyle object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Measurestyle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Measurestyle obj, out Exception exception)
        {
            exception = null;
            obj = default(Measurestyle);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Measurestyle obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Measurestyle Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Measurestyle)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Measurestyle Deserialize(Stream s)
        {
            return ((Measurestyle)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Measurestyle object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Measurestyle object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Measurestyle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Measurestyle obj, out Exception exception)
        {
            exception = null;
            obj = default(Measurestyle);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Measurestyle obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Measurestyle LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Parttranspose
    {
        #region Private fields
        private string _diatonic;
        private decimal _chromatic;
        private string _octavechange;
        private Double _double;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Parttranspose()
        {
            _double = new Double();
        }
        
        public string Diatonic
        {
            get
            {
                return _diatonic;
            }
            set
            {
                _diatonic = value;
            }
        }
        
        public decimal Chromatic
        {
            get
            {
                return _chromatic;
            }
            set
            {
                _chromatic = value;
            }
        }
        
        public string Octavechange
        {
            get
            {
                return _octavechange;
            }
            set
            {
                _octavechange = value;
            }
        }
        
        public Double Double
        {
            get
            {
                return _double;
            }
            set
            {
                _double = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Parttranspose));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Parttranspose object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Parttranspose object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Parttranspose object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Parttranspose obj, out Exception exception)
        {
            exception = null;
            obj = default(Parttranspose);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Parttranspose obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Parttranspose Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Parttranspose)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Parttranspose Deserialize(Stream s)
        {
            return ((Parttranspose)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Parttranspose object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Parttranspose object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Parttranspose object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Parttranspose obj, out Exception exception)
        {
            exception = null;
            obj = default(Parttranspose);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Parttranspose obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Parttranspose LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Double
    {
        #region Private fields
        private Yesno _above;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Above
        {
            get
            {
                return _above;
            }
            set
            {
                _above = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Double));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Double object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Double object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Double object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Double obj, out Exception exception)
        {
            exception = null;
            obj = default(Double);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Double obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Double Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Double)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Double Deserialize(Stream s)
        {
            return ((Double)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Double object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Double object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Double object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Double obj, out Exception exception)
        {
            exception = null;
            obj = default(Double);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Double obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Double LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Partclef
    {
        #region Private fields
        private Clefsign _sign;
        private string _line;
        private string _clefoctavechange;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Clefsign Sign
        {
            get
            {
                return _sign;
            }
            set
            {
                _sign = value;
            }
        }
        
        public string Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
        
        public string Clefoctavechange
        {
            get
            {
                return _clefoctavechange;
            }
            set
            {
                _clefoctavechange = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Partclef));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Partclef object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Partclef object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Partclef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Partclef obj, out Exception exception)
        {
            exception = null;
            obj = default(Partclef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Partclef obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Partclef Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Partclef)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Partclef Deserialize(Stream s)
        {
            return ((Partclef)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Partclef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Partclef object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Partclef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Partclef obj, out Exception exception)
        {
            exception = null;
            obj = default(Partclef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Partclef obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Partclef LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Clefsign
    {
        G,
        F,
        C,
        percussion,
        TAB,
        jianpu,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Forpart
    {
        #region Private fields
        private Partclef _partclef;
        private Parttranspose _parttranspose;
        private string _number;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Forpart()
        {
            _parttranspose = new Parttranspose();
            _partclef = new Partclef();
        }
        
        public Partclef Partclef
        {
            get
            {
                return _partclef;
            }
            set
            {
                _partclef = value;
            }
        }
        
        public Parttranspose Parttranspose
        {
            get
            {
                return _parttranspose;
            }
            set
            {
                _parttranspose = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Forpart));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Forpart object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Forpart object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Forpart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Forpart obj, out Exception exception)
        {
            exception = null;
            obj = default(Forpart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Forpart obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Forpart Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Forpart)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Forpart Deserialize(Stream s)
        {
            return ((Forpart)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Forpart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Forpart object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Forpart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Forpart obj, out Exception exception)
        {
            exception = null;
            obj = default(Forpart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Forpart obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Forpart LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Transpose
    {
        #region Private fields
        private string _diatonic;
        private decimal _chromatic;
        private string _octavechange;
        private Double _double;
        private string _number;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Transpose()
        {
            _double = new Double();
        }
        
        public string Diatonic
        {
            get
            {
                return _diatonic;
            }
            set
            {
                _diatonic = value;
            }
        }
        
        public decimal Chromatic
        {
            get
            {
                return _chromatic;
            }
            set
            {
                _chromatic = value;
            }
        }
        
        public string Octavechange
        {
            get
            {
                return _octavechange;
            }
            set
            {
                _octavechange = value;
            }
        }
        
        public Double Double
        {
            get
            {
                return _double;
            }
            set
            {
                _double = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Transpose));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Transpose object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Transpose object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Transpose object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Transpose obj, out Exception exception)
        {
            exception = null;
            obj = default(Transpose);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Transpose obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Transpose Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Transpose)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Transpose Deserialize(Stream s)
        {
            return ((Transpose)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Transpose object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Transpose object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Transpose object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Transpose obj, out Exception exception)
        {
            exception = null;
            obj = default(Transpose);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Transpose obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Transpose LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Staffsize
    {
        #region Private fields
        private decimal _scaling;
        private decimal _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Scaling
        {
            get
            {
                return _scaling;
            }
            set
            {
                _scaling = value;
            }
        }
        
        public decimal Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Staffsize));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Staffsize object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Staffsize object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Staffsize object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Staffsize obj, out Exception exception)
        {
            exception = null;
            obj = default(Staffsize);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Staffsize obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Staffsize Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Staffsize)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Staffsize Deserialize(Stream s)
        {
            return ((Staffsize)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Staffsize object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Staffsize object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Staffsize object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Staffsize obj, out Exception exception)
        {
            exception = null;
            obj = default(Staffsize);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Staffsize obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Staffsize LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Stafftuning
    {
        #region Private fields
        private Step _tuningstep;
        private decimal _tuningalter;
        private string _tuningoctave;
        private string _line;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Step Tuningstep
        {
            get
            {
                return _tuningstep;
            }
            set
            {
                _tuningstep = value;
            }
        }
        
        public decimal Tuningalter
        {
            get
            {
                return _tuningalter;
            }
            set
            {
                _tuningalter = value;
            }
        }
        
        public string Tuningoctave
        {
            get
            {
                return _tuningoctave;
            }
            set
            {
                _tuningoctave = value;
            }
        }
        
        public string Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Stafftuning));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Stafftuning object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Stafftuning object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Stafftuning object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Stafftuning obj, out Exception exception)
        {
            exception = null;
            obj = default(Stafftuning);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Stafftuning obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Stafftuning Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Stafftuning)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Stafftuning Deserialize(Stream s)
        {
            return ((Stafftuning)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Stafftuning object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Stafftuning object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Stafftuning object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Stafftuning obj, out Exception exception)
        {
            exception = null;
            obj = default(Stafftuning);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Stafftuning obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Stafftuning LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Linedetail
    {
        #region Private fields
        private string _line;
        private decimal _width;
        private string _color;
        private Linetype _linetype;
        private Yesno _printobject;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
        
        public decimal Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Linetype Linetype
        {
            get
            {
                return _linetype;
            }
            set
            {
                _linetype = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Linedetail));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Linedetail object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Linedetail object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Linedetail object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Linedetail obj, out Exception exception)
        {
            exception = null;
            obj = default(Linedetail);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Linedetail obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Linedetail Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Linedetail)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Linedetail Deserialize(Stream s)
        {
            return ((Linedetail)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Linedetail object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Linedetail object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Linedetail object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Linedetail obj, out Exception exception)
        {
            exception = null;
            obj = default(Linedetail);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Linedetail obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Linedetail LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Linetype
    {
        solid,
        dashed,
        dotted,
        wavy,
    }
    
    [DebuggerStepThrough]
    public partial class Staffdetails
    {
        #region Private fields
        private Stafftype _stafftype;
        private string _stafflines;
        private List<Linedetail> _linedetail;
        private List<Stafftuning> _stafftuning;
        private string _capo;
        private Staffsize _staffsize;
        private string _number;
        private Showfrets _showfrets;
        private Yesno _printobject;
        private Yesno _printspacing;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Staffdetails()
        {
            _staffsize = new Staffsize();
            _stafftuning = new List<Stafftuning>();
            _linedetail = new List<Linedetail>();
        }
        
        public Stafftype Stafftype
        {
            get
            {
                return _stafftype;
            }
            set
            {
                _stafftype = value;
            }
        }
        
        public string Stafflines
        {
            get
            {
                return _stafflines;
            }
            set
            {
                _stafflines = value;
            }
        }
        
        public List<Linedetail> Linedetail
        {
            get
            {
                return _linedetail;
            }
            set
            {
                _linedetail = value;
            }
        }
        
        public List<Stafftuning> Stafftuning
        {
            get
            {
                return _stafftuning;
            }
            set
            {
                _stafftuning = value;
            }
        }
        
        public string Capo
        {
            get
            {
                return _capo;
            }
            set
            {
                _capo = value;
            }
        }
        
        public Staffsize Staffsize
        {
            get
            {
                return _staffsize;
            }
            set
            {
                _staffsize = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Showfrets Showfrets
        {
            get
            {
                return _showfrets;
            }
            set
            {
                _showfrets = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public Yesno Printspacing
        {
            get
            {
                return _printspacing;
            }
            set
            {
                _printspacing = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Staffdetails));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Staffdetails object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Staffdetails object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Staffdetails object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Staffdetails obj, out Exception exception)
        {
            exception = null;
            obj = default(Staffdetails);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Staffdetails obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Staffdetails Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Staffdetails)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Staffdetails Deserialize(Stream s)
        {
            return ((Staffdetails)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Staffdetails object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Staffdetails object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Staffdetails object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Staffdetails obj, out Exception exception)
        {
            exception = null;
            obj = default(Staffdetails);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Staffdetails obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Staffdetails LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Stafftype
    {
        ossia,
        editorial,
        cue,
        alternate,
        regular,
    }
    
    public enum Showfrets
    {
        numbers,
        letters,
    }
    
    [DebuggerStepThrough]
    public partial class Clef
    {
        #region Private fields
        private Clefsign _sign;
        private string _line;
        private string _clefoctavechange;
        private string _number;
        private Yesno _additional;
        private Symbolsize _size;
        private Yesno _afterbarline;
        private Yesno _printobject;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Clefsign Sign
        {
            get
            {
                return _sign;
            }
            set
            {
                _sign = value;
            }
        }
        
        public string Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
        
        public string Clefoctavechange
        {
            get
            {
                return _clefoctavechange;
            }
            set
            {
                _clefoctavechange = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Yesno Additional
        {
            get
            {
                return _additional;
            }
            set
            {
                _additional = value;
            }
        }
        
        public Symbolsize Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
        
        public Yesno Afterbarline
        {
            get
            {
                return _afterbarline;
            }
            set
            {
                _afterbarline = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Clef));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Clef object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Clef object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Clef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Clef obj, out Exception exception)
        {
            exception = null;
            obj = default(Clef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Clef obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Clef Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Clef)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Clef Deserialize(Stream s)
        {
            return ((Clef)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Clef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Clef object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Clef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Clef obj, out Exception exception)
        {
            exception = null;
            obj = default(Clef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Clef obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Clef LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Partsymbol
    {
        #region Private fields
        private string _topstaff;
        private string _bottomstaff;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _color;
        private Groupsymbolvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Topstaff
        {
            get
            {
                return _topstaff;
            }
            set
            {
                _topstaff = value;
            }
        }
        
        public string Bottomstaff
        {
            get
            {
                return _bottomstaff;
            }
            set
            {
                _bottomstaff = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Groupsymbolvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Partsymbol));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Partsymbol object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Partsymbol object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Partsymbol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Partsymbol obj, out Exception exception)
        {
            exception = null;
            obj = default(Partsymbol);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Partsymbol obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Partsymbol Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Partsymbol)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Partsymbol Deserialize(Stream s)
        {
            return ((Partsymbol)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Partsymbol object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Partsymbol object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Partsymbol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Partsymbol obj, out Exception exception)
        {
            exception = null;
            obj = default(Partsymbol);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Partsymbol obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Partsymbol LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Groupsymbolvalue
    {
        none,
        brace,
        line,
        bracket,
        square,
    }
    
    [DebuggerStepThrough]
    public partial class Interchangeable
    {
        #region Private fields
        private Timerelation _timerelation;
        private List<string> _beats;
        private List<string> _beattype;
        private Timesymbol _symbol;
        private Timeseparator _separator;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Interchangeable()
        {
            _beattype = new List<string>();
            _beats = new List<string>();
        }
        
        public Timerelation Timerelation
        {
            get
            {
                return _timerelation;
            }
            set
            {
                _timerelation = value;
            }
        }
        
        public List<string> Beats
        {
            get
            {
                return _beats;
            }
            set
            {
                _beats = value;
            }
        }
        
        public List<string> Beattype
        {
            get
            {
                return _beattype;
            }
            set
            {
                _beattype = value;
            }
        }
        
        public Timesymbol Symbol
        {
            get
            {
                return _symbol;
            }
            set
            {
                _symbol = value;
            }
        }
        
        public Timeseparator Separator
        {
            get
            {
                return _separator;
            }
            set
            {
                _separator = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Interchangeable));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Interchangeable object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Interchangeable object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Interchangeable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Interchangeable obj, out Exception exception)
        {
            exception = null;
            obj = default(Interchangeable);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Interchangeable obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Interchangeable Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Interchangeable)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Interchangeable Deserialize(Stream s)
        {
            return ((Interchangeable)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Interchangeable object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Interchangeable object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Interchangeable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Interchangeable obj, out Exception exception)
        {
            exception = null;
            obj = default(Interchangeable);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Interchangeable obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Interchangeable LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Timerelation
    {
        parentheses,
        bracket,
        equals,
        slash,
        space,
        hyphen,
    }
    
    public enum Timesymbol
    {
        common,
        cut,
        [XmlEnumAttribute("single-number")]
        singlenumber,
        note,
        [XmlEnumAttribute("dotted-note")]
        dottednote,
        normal,
    }
    
    public enum Timeseparator
    {
        none,
        horizontal,
        diagonal,
        vertical,
        adjacent,
    }
    
    [DebuggerStepThrough]
    public partial class Time
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType11[] _itemsElementName;
        private string _number;
        private Timesymbol _symbol;
        private Timeseparator _separator;
        private Yesno _printobject;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType11[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Timesymbol Symbol
        {
            get
            {
                return _symbol;
            }
            set
            {
                _symbol = value;
            }
        }
        
        public Timeseparator Separator
        {
            get
            {
                return _separator;
            }
            set
            {
                _separator = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Time));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Time object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Time object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Time object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Time obj, out Exception exception)
        {
            exception = null;
            obj = default(Time);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Time obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Time Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Time)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Time Deserialize(Stream s)
        {
            return ((Time)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Time object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Time object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Time object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Time obj, out Exception exception)
        {
            exception = null;
            obj = default(Time);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Time obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Time LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType11
    {
        [XmlEnumAttribute("beat-type")]
        beattype,
        beats,
        interchangeable,
        [XmlEnumAttribute("senza-misura")]
        senzamisura,
    }
    
    [DebuggerStepThrough]
    public partial class Keyoctave
    {
        #region Private fields
        private string _number;
        private Yesno _cancel;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Yesno Cancel
        {
            get
            {
                return _cancel;
            }
            set
            {
                _cancel = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Keyoctave));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Keyoctave object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Keyoctave object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Keyoctave object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Keyoctave obj, out Exception exception)
        {
            exception = null;
            obj = default(Keyoctave);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Keyoctave obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Keyoctave Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Keyoctave)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Keyoctave Deserialize(Stream s)
        {
            return ((Keyoctave)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Keyoctave object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Keyoctave object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Keyoctave object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Keyoctave obj, out Exception exception)
        {
            exception = null;
            obj = default(Keyoctave);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Keyoctave obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Keyoctave LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Keyaccidental
    {
        #region Private fields
        private string _smufl;
        private Accidentalvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Accidentalvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Keyaccidental));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Keyaccidental object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Keyaccidental object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Keyaccidental object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Keyaccidental obj, out Exception exception)
        {
            exception = null;
            obj = default(Keyaccidental);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Keyaccidental obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Keyaccidental Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Keyaccidental)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Keyaccidental Deserialize(Stream s)
        {
            return ((Keyaccidental)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Keyaccidental object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Keyaccidental object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Keyaccidental object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Keyaccidental obj, out Exception exception)
        {
            exception = null;
            obj = default(Keyaccidental);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Keyaccidental obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Keyaccidental LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Cancel
    {
        #region Private fields
        private Cancellocation _location;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Cancellocation Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Cancel));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Cancel object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Cancel object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Cancel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Cancel obj, out Exception exception)
        {
            exception = null;
            obj = default(Cancel);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Cancel obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Cancel Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Cancel)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Cancel Deserialize(Stream s)
        {
            return ((Cancel)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Cancel object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Cancel object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Cancel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Cancel obj, out Exception exception)
        {
            exception = null;
            obj = default(Cancel);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Cancel obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Cancel LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Cancellocation
    {
        left,
        right,
        [XmlEnumAttribute("before-barline")]
        beforebarline,
    }
    
    [DebuggerStepThrough]
    public partial class Key
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType10[] _itemsElementName;
        private List<Keyoctave> _keyoctave;
        private string _number;
        private Yesno _printobject;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Key()
        {
            _keyoctave = new List<Keyoctave>();
        }
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType10[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public List<Keyoctave> Keyoctave
        {
            get
            {
                return _keyoctave;
            }
            set
            {
                _keyoctave = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Key));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Key object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Key object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Key object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Key obj, out Exception exception)
        {
            exception = null;
            obj = default(Key);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Key obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Key Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Key)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Key Deserialize(Stream s)
        {
            return ((Key)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Key object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Key object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Key object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Key obj, out Exception exception)
        {
            exception = null;
            obj = default(Key);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Key obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Key LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType10
    {
        cancel,
        fifths,
        [XmlEnumAttribute("key-accidental")]
        keyaccidental,
        [XmlEnumAttribute("key-alter")]
        keyalter,
        [XmlEnumAttribute("key-step")]
        keystep,
        mode,
    }
    
    [DebuggerStepThrough]
    public partial class Attributes
    {
        #region Private fields
        private Formattedtext _footnote;
        private Level _level;
        private decimal _divisions;
        private List<Key> _key;
        private List<Time> _time;
        private string _staves;
        private Partsymbol _partsymbol;
        private string _instruments;
        private List<Clef> _clef;
        private List<Staffdetails> _staffdetails;
        private List<object> _items;
        private List<AttributesDirective> _directive;
        private List<Measurestyle> _measurestyle;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Attributes()
        {
            _measurestyle = new List<Measurestyle>();
            _directive = new List<AttributesDirective>();
            _items = new List<object>();
            _staffdetails = new List<Staffdetails>();
            _clef = new List<Clef>();
            _partsymbol = new Partsymbol();
            _time = new List<Time>();
            _key = new List<Key>();
            _level = new Level();
            _footnote = new Formattedtext();
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public decimal Divisions
        {
            get
            {
                return _divisions;
            }
            set
            {
                _divisions = value;
            }
        }
        
        public List<Key> Key
        {
            get
            {
                return _key;
            }
            set
            {
                _key = value;
            }
        }
        
        public List<Time> Time
        {
            get
            {
                return _time;
            }
            set
            {
                _time = value;
            }
        }
        
        public string Staves
        {
            get
            {
                return _staves;
            }
            set
            {
                _staves = value;
            }
        }
        
        public Partsymbol Partsymbol
        {
            get
            {
                return _partsymbol;
            }
            set
            {
                _partsymbol = value;
            }
        }
        
        public string Instruments
        {
            get
            {
                return _instruments;
            }
            set
            {
                _instruments = value;
            }
        }
        
        public List<Clef> Clef
        {
            get
            {
                return _clef;
            }
            set
            {
                _clef = value;
            }
        }
        
        public List<Staffdetails> Staffdetails
        {
            get
            {
                return _staffdetails;
            }
            set
            {
                _staffdetails = value;
            }
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public List<AttributesDirective> Directive
        {
            get
            {
                return _directive;
            }
            set
            {
                _directive = value;
            }
        }
        
        public List<Measurestyle> Measurestyle
        {
            get
            {
                return _measurestyle;
            }
            set
            {
                _measurestyle = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Attributes));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Attributes object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Attributes object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Attributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Attributes obj, out Exception exception)
        {
            exception = null;
            obj = default(Attributes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Attributes obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Attributes Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Attributes)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Attributes Deserialize(Stream s)
        {
            return ((Attributes)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Attributes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Attributes object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Attributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Attributes obj, out Exception exception)
        {
            exception = null;
            obj = default(Attributes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Attributes obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Attributes LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class AttributesDirective
    {
        #region Private fields
        private string _lang;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Lang
        {
            get
            {
                return _lang;
            }
            set
            {
                _lang = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(AttributesDirective));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize AttributesDirective object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes AttributesDirective object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output AttributesDirective object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AttributesDirective obj, out Exception exception)
        {
            exception = null;
            obj = default(AttributesDirective);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out AttributesDirective obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static AttributesDirective Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((AttributesDirective)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static AttributesDirective Deserialize(Stream s)
        {
            return ((AttributesDirective)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current AttributesDirective object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AttributesDirective object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output AttributesDirective object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AttributesDirective obj, out Exception exception)
        {
            exception = null;
            obj = default(AttributesDirective);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AttributesDirective obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AttributesDirective LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Sync
    {
        #region Private fields
        private Synctype _type;
        private string _latency;
        private string _player;
        private string _timeonly;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Synctype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Latency
        {
            get
            {
                return _latency;
            }
            set
            {
                _latency = value;
            }
        }
        
        public string Player
        {
            get
            {
                return _player;
            }
            set
            {
                _player = value;
            }
        }
        
        public string Timeonly
        {
            get
            {
                return _timeonly;
            }
            set
            {
                _timeonly = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Sync));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Sync object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Sync object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Sync object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Sync obj, out Exception exception)
        {
            exception = null;
            obj = default(Sync);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Sync obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Sync Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Sync)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Sync Deserialize(Stream s)
        {
            return ((Sync)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Sync object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Sync object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Sync object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Sync obj, out Exception exception)
        {
            exception = null;
            obj = default(Sync);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Sync obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Sync LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Synctype
    {
        none,
        tempo,
        [XmlEnumAttribute("mostly-tempo")]
        mostlytempo,
        [XmlEnumAttribute("mostly-event")]
        mostlyevent,
        @event,
        [XmlEnumAttribute("always-event")]
        alwaysevent,
    }
    
    [DebuggerStepThrough]
    public partial class Listening
    {
        #region Private fields
        private List<object> _items;
        private Offset _offset;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Listening()
        {
            _offset = new Offset();
            _items = new List<object>();
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public Offset Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Listening));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Listening object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Listening object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Listening object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Listening obj, out Exception exception)
        {
            exception = null;
            obj = default(Listening);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Listening obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Listening Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Listening)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Listening Deserialize(Stream s)
        {
            return ((Listening)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Listening object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Listening object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Listening object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Listening obj, out Exception exception)
        {
            exception = null;
            obj = default(Listening);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Listening obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Listening LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Otherlistening
    {
        #region Private fields
        private string _type;
        private string _player;
        private string _timeonly;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Player
        {
            get
            {
                return _player;
            }
            set
            {
                _player = value;
            }
        }
        
        public string Timeonly
        {
            get
            {
                return _timeonly;
            }
            set
            {
                _timeonly = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Otherlistening));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Otherlistening object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Otherlistening object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Otherlistening object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Otherlistening obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherlistening);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Otherlistening obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Otherlistening Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Otherlistening)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Otherlistening Deserialize(Stream s)
        {
            return ((Otherlistening)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Otherlistening object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Otherlistening object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Otherlistening object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Otherlistening obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherlistening);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Otherlistening obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Otherlistening LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Swing
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType9[] _itemsElementName;
        private string _swingstyle;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType9[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public string Swingstyle
        {
            get
            {
                return _swingstyle;
            }
            set
            {
                _swingstyle = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Swing));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Swing object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Swing object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Swing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Swing obj, out Exception exception)
        {
            exception = null;
            obj = default(Swing);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Swing obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Swing Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Swing)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Swing Deserialize(Stream s)
        {
            return ((Swing)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Swing object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Swing object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Swing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Swing obj, out Exception exception)
        {
            exception = null;
            obj = default(Swing);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Swing obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Swing LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Swingtypevalue
    {
        [XmlEnumAttribute("16th")]
        Item16th,
        eighth,
    }
    
    public enum ItemsChoiceType9
    {
        first,
        second,
        straight,
        [XmlEnumAttribute("swing-type")]
        swingtype,
    }
    
    [DebuggerStepThrough]
    public partial class Instrumentchange
    {
        #region Private fields
        private string _instrumentsound;
        private object _item;
        private Virtualinstrument _virtualinstrument;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Instrumentchange()
        {
            _virtualinstrument = new Virtualinstrument();
        }
        
        public string Instrumentsound
        {
            get
            {
                return _instrumentsound;
            }
            set
            {
                _instrumentsound = value;
            }
        }
        
        public object Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }
        
        public Virtualinstrument Virtualinstrument
        {
            get
            {
                return _virtualinstrument;
            }
            set
            {
                _virtualinstrument = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Instrumentchange));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Instrumentchange object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Instrumentchange object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Instrumentchange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Instrumentchange obj, out Exception exception)
        {
            exception = null;
            obj = default(Instrumentchange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Instrumentchange obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Instrumentchange Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Instrumentchange)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Instrumentchange Deserialize(Stream s)
        {
            return ((Instrumentchange)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Instrumentchange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Instrumentchange object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Instrumentchange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Instrumentchange obj, out Exception exception)
        {
            exception = null;
            obj = default(Instrumentchange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Instrumentchange obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Instrumentchange LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Virtualinstrument
    {
        #region Private fields
        private string _virtuallibrary;
        private string _virtualname;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Virtuallibrary
        {
            get
            {
                return _virtuallibrary;
            }
            set
            {
                _virtuallibrary = value;
            }
        }
        
        public string Virtualname
        {
            get
            {
                return _virtualname;
            }
            set
            {
                _virtualname = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Virtualinstrument));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Virtualinstrument object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Virtualinstrument object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Virtualinstrument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Virtualinstrument obj, out Exception exception)
        {
            exception = null;
            obj = default(Virtualinstrument);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Virtualinstrument obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Virtualinstrument Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Virtualinstrument)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Virtualinstrument Deserialize(Stream s)
        {
            return ((Virtualinstrument)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Virtualinstrument object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Virtualinstrument object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Virtualinstrument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Virtualinstrument obj, out Exception exception)
        {
            exception = null;
            obj = default(Virtualinstrument);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Virtualinstrument obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Virtualinstrument LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Sound
    {
        #region Private fields
        private List<Instrumentchange> _instrumentchange;
        private List<Mididevice> _mididevice;
        private List<Midiinstrument> _midiinstrument;
        private List<Play> _play;
        private Swing _swing;
        private Offset _offset;
        private decimal _tempo;
        private decimal _dynamics;
        private Yesno _dacapo;
        private string _segno;
        private string _dalsegno;
        private string _coda;
        private string _tocoda;
        private decimal _divisions;
        private Yesno _forwardrepeat;
        private string _fine;
        private string _timeonly;
        private Yesno _pizzicato;
        private decimal _pan;
        private decimal _elevation;
        private string _damperpedal;
        private string _softpedal;
        private string _sostenutopedal;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Sound()
        {
            _offset = new Offset();
            _swing = new Swing();
            _play = new List<Play>();
            _midiinstrument = new List<Midiinstrument>();
            _mididevice = new List<Mididevice>();
            _instrumentchange = new List<Instrumentchange>();
        }
        
        public List<Instrumentchange> Instrumentchange
        {
            get
            {
                return _instrumentchange;
            }
            set
            {
                _instrumentchange = value;
            }
        }
        
        public List<Mididevice> Mididevice
        {
            get
            {
                return _mididevice;
            }
            set
            {
                _mididevice = value;
            }
        }
        
        public List<Midiinstrument> Midiinstrument
        {
            get
            {
                return _midiinstrument;
            }
            set
            {
                _midiinstrument = value;
            }
        }
        
        public List<Play> Play
        {
            get
            {
                return _play;
            }
            set
            {
                _play = value;
            }
        }
        
        public Swing Swing
        {
            get
            {
                return _swing;
            }
            set
            {
                _swing = value;
            }
        }
        
        public Offset Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
        
        public decimal Tempo
        {
            get
            {
                return _tempo;
            }
            set
            {
                _tempo = value;
            }
        }
        
        public decimal Dynamics
        {
            get
            {
                return _dynamics;
            }
            set
            {
                _dynamics = value;
            }
        }
        
        public Yesno Dacapo
        {
            get
            {
                return _dacapo;
            }
            set
            {
                _dacapo = value;
            }
        }
        
        public string Segno
        {
            get
            {
                return _segno;
            }
            set
            {
                _segno = value;
            }
        }
        
        public string Dalsegno
        {
            get
            {
                return _dalsegno;
            }
            set
            {
                _dalsegno = value;
            }
        }
        
        public string Coda
        {
            get
            {
                return _coda;
            }
            set
            {
                _coda = value;
            }
        }
        
        public string Tocoda
        {
            get
            {
                return _tocoda;
            }
            set
            {
                _tocoda = value;
            }
        }
        
        public decimal Divisions
        {
            get
            {
                return _divisions;
            }
            set
            {
                _divisions = value;
            }
        }
        
        public Yesno Forwardrepeat
        {
            get
            {
                return _forwardrepeat;
            }
            set
            {
                _forwardrepeat = value;
            }
        }
        
        public string Fine
        {
            get
            {
                return _fine;
            }
            set
            {
                _fine = value;
            }
        }
        
        public string Timeonly
        {
            get
            {
                return _timeonly;
            }
            set
            {
                _timeonly = value;
            }
        }
        
        public Yesno Pizzicato
        {
            get
            {
                return _pizzicato;
            }
            set
            {
                _pizzicato = value;
            }
        }
        
        public decimal Pan
        {
            get
            {
                return _pan;
            }
            set
            {
                _pan = value;
            }
        }
        
        public decimal Elevation
        {
            get
            {
                return _elevation;
            }
            set
            {
                _elevation = value;
            }
        }
        
        public string Damperpedal
        {
            get
            {
                return _damperpedal;
            }
            set
            {
                _damperpedal = value;
            }
        }
        
        public string Softpedal
        {
            get
            {
                return _softpedal;
            }
            set
            {
                _softpedal = value;
            }
        }
        
        public string Sostenutopedal
        {
            get
            {
                return _sostenutopedal;
            }
            set
            {
                _sostenutopedal = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Sound));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Sound object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Sound object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Sound object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Sound obj, out Exception exception)
        {
            exception = null;
            obj = default(Sound);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Sound obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Sound Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Sound)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Sound Deserialize(Stream s)
        {
            return ((Sound)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Sound object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Sound object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Sound object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Sound obj, out Exception exception)
        {
            exception = null;
            obj = default(Sound);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Sound obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Sound LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Mididevice
    {
        #region Private fields
        private string _port;
        private string _id;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Port
        {
            get
            {
                return _port;
            }
            set
            {
                _port = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Mididevice));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Mididevice object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Mididevice object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Mididevice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Mididevice obj, out Exception exception)
        {
            exception = null;
            obj = default(Mididevice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Mididevice obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Mididevice Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Mididevice)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Mididevice Deserialize(Stream s)
        {
            return ((Mididevice)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Mididevice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Mididevice object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Mididevice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Mididevice obj, out Exception exception)
        {
            exception = null;
            obj = default(Mididevice);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Mididevice obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Mididevice LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Midiinstrument
    {
        #region Private fields
        private string _midichannel;
        private string _midiname;
        private string _midibank;
        private string _midiprogram;
        private string _midiunpitched;
        private decimal _volume;
        private decimal _pan;
        private decimal _elevation;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Midichannel
        {
            get
            {
                return _midichannel;
            }
            set
            {
                _midichannel = value;
            }
        }
        
        public string Midiname
        {
            get
            {
                return _midiname;
            }
            set
            {
                _midiname = value;
            }
        }
        
        public string Midibank
        {
            get
            {
                return _midibank;
            }
            set
            {
                _midibank = value;
            }
        }
        
        public string Midiprogram
        {
            get
            {
                return _midiprogram;
            }
            set
            {
                _midiprogram = value;
            }
        }
        
        public string Midiunpitched
        {
            get
            {
                return _midiunpitched;
            }
            set
            {
                _midiunpitched = value;
            }
        }
        
        public decimal Volume
        {
            get
            {
                return _volume;
            }
            set
            {
                _volume = value;
            }
        }
        
        public decimal Pan
        {
            get
            {
                return _pan;
            }
            set
            {
                _pan = value;
            }
        }
        
        public decimal Elevation
        {
            get
            {
                return _elevation;
            }
            set
            {
                _elevation = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Midiinstrument));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Midiinstrument object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Midiinstrument object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Midiinstrument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Midiinstrument obj, out Exception exception)
        {
            exception = null;
            obj = default(Midiinstrument);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Midiinstrument obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Midiinstrument Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Midiinstrument)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Midiinstrument Deserialize(Stream s)
        {
            return ((Midiinstrument)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Midiinstrument object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Midiinstrument object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Midiinstrument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Midiinstrument obj, out Exception exception)
        {
            exception = null;
            obj = default(Midiinstrument);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Midiinstrument obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Midiinstrument LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Play
    {
        #region Private fields
        private List<object> _items;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Play()
        {
            _items = new List<object>();
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Play));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Play object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Play object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Play object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Play obj, out Exception exception)
        {
            exception = null;
            obj = default(Play);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Play obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Play Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Play)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Play Deserialize(Stream s)
        {
            return ((Play)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Play object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Play object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Play object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Play obj, out Exception exception)
        {
            exception = null;
            obj = default(Play);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Play obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Play LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Mute
    {
        on,
        off,
        straight,
        cup,
        [XmlEnumAttribute("harmon-no-stem")]
        harmonnostem,
        [XmlEnumAttribute("harmon-stem")]
        harmonstem,
        bucket,
        plunger,
        hat,
        solotone,
        practice,
        [XmlEnumAttribute("stop-mute")]
        stopmute,
        [XmlEnumAttribute("stop-hand")]
        stophand,
        echo,
        palm,
    }
    
    [DebuggerStepThrough]
    public partial class Otherplay
    {
        #region Private fields
        private string _type;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Otherplay));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Otherplay object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Otherplay object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Otherplay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Otherplay obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherplay);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Otherplay obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Otherplay Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Otherplay)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Otherplay Deserialize(Stream s)
        {
            return ((Otherplay)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Otherplay object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Otherplay object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Otherplay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Otherplay obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherplay);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Otherplay obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Otherplay LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Semipitched
    {
        high,
        [XmlEnumAttribute("medium-high")]
        mediumhigh,
        medium,
        [XmlEnumAttribute("medium-low")]
        mediumlow,
        low,
        [XmlEnumAttribute("very-low")]
        verylow,
    }
    
    [DebuggerStepThrough]
    public partial class Otherdirection
    {
        #region Private fields
        private Yesno _printobject;
        private string _smufl;
        private string _id;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Otherdirection));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Otherdirection object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Otherdirection object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Otherdirection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Otherdirection obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherdirection);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Otherdirection obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Otherdirection Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Otherdirection)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Otherdirection Deserialize(Stream s)
        {
            return ((Otherdirection)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Otherdirection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Otherdirection object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Otherdirection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Otherdirection obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherdirection);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Otherdirection obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Otherdirection LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Staffdivide
    {
        #region Private fields
        private Staffdividesymbol _type;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Staffdividesymbol Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Staffdivide));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Staffdivide object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Staffdivide object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Staffdivide object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Staffdivide obj, out Exception exception)
        {
            exception = null;
            obj = default(Staffdivide);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Staffdivide obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Staffdivide Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Staffdivide)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Staffdivide Deserialize(Stream s)
        {
            return ((Staffdivide)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Staffdivide object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Staffdivide object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Staffdivide object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Staffdivide obj, out Exception exception)
        {
            exception = null;
            obj = default(Staffdivide);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Staffdivide obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Staffdivide LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Staffdividesymbol
    {
        down,
        up,
        [XmlEnumAttribute("up-down")]
        updown,
    }
    
    [DebuggerStepThrough]
    public partial class Accordionregistration
    {
        #region Private fields
        private Empty _accordionhigh;
        private string _accordionmiddle;
        private Empty _accordionlow;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Accordionregistration()
        {
            _accordionlow = new Empty();
            _accordionhigh = new Empty();
        }
        
        public Empty Accordionhigh
        {
            get
            {
                return _accordionhigh;
            }
            set
            {
                _accordionhigh = value;
            }
        }
        
        public string Accordionmiddle
        {
            get
            {
                return _accordionmiddle;
            }
            set
            {
                _accordionmiddle = value;
            }
        }
        
        public Empty Accordionlow
        {
            get
            {
                return _accordionlow;
            }
            set
            {
                _accordionlow = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Accordionregistration));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Accordionregistration object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Accordionregistration object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Accordionregistration object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Accordionregistration obj, out Exception exception)
        {
            exception = null;
            obj = default(Accordionregistration);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Accordionregistration obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Accordionregistration Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Accordionregistration)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Accordionregistration Deserialize(Stream s)
        {
            return ((Accordionregistration)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Accordionregistration object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Accordionregistration object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Accordionregistration object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Accordionregistration obj, out Exception exception)
        {
            exception = null;
            obj = default(Accordionregistration);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Accordionregistration obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Accordionregistration LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Stick
    {
        #region Private fields
        private Sticktype _sticktype;
        private Stickmaterial _stickmaterial;
        private Tipdirection _tip;
        private Yesno _parentheses;
        private Yesno _dashedcircle;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Sticktype Sticktype
        {
            get
            {
                return _sticktype;
            }
            set
            {
                _sticktype = value;
            }
        }
        
        public Stickmaterial Stickmaterial
        {
            get
            {
                return _stickmaterial;
            }
            set
            {
                _stickmaterial = value;
            }
        }
        
        public Tipdirection Tip
        {
            get
            {
                return _tip;
            }
            set
            {
                _tip = value;
            }
        }
        
        public Yesno Parentheses
        {
            get
            {
                return _parentheses;
            }
            set
            {
                _parentheses = value;
            }
        }
        
        public Yesno Dashedcircle
        {
            get
            {
                return _dashedcircle;
            }
            set
            {
                _dashedcircle = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Stick));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Stick object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Stick object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Stick object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Stick obj, out Exception exception)
        {
            exception = null;
            obj = default(Stick);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Stick obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Stick Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Stick)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Stick Deserialize(Stream s)
        {
            return ((Stick)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Stick object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Stick object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Stick object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Stick obj, out Exception exception)
        {
            exception = null;
            obj = default(Stick);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Stick obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Stick LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Sticktype
    {
        [XmlEnumAttribute("bass drum")]
        bassdrum,
        [XmlEnumAttribute("double bass drum")]
        doublebassdrum,
        glockenspiel,
        gum,
        hammer,
        superball,
        timpani,
        wound,
        xylophone,
        yarn,
    }
    
    public enum Stickmaterial
    {
        soft,
        medium,
        hard,
        shaded,
        x,
    }
    
    public enum Tipdirection
    {
        up,
        down,
        left,
        right,
        northwest,
        northeast,
        southeast,
        southwest,
    }
    
    [DebuggerStepThrough]
    public partial class Beater
    {
        #region Private fields
        private Tipdirection _tip;
        private Beatervalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Tipdirection Tip
        {
            get
            {
                return _tip;
            }
            set
            {
                _tip = value;
            }
        }
        
        public Beatervalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Beater));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Beater object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Beater object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Beater object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Beater obj, out Exception exception)
        {
            exception = null;
            obj = default(Beater);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Beater obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Beater Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Beater)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Beater Deserialize(Stream s)
        {
            return ((Beater)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Beater object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Beater object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Beater object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Beater obj, out Exception exception)
        {
            exception = null;
            obj = default(Beater);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Beater obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Beater LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Beatervalue
    {
        bow,
        [XmlEnumAttribute("chime hammer")]
        chimehammer,
        coin,
        [XmlEnumAttribute("drum stick")]
        drumstick,
        finger,
        fingernail,
        fist,
        [XmlEnumAttribute("guiro scraper")]
        guiroscraper,
        hammer,
        hand,
        [XmlEnumAttribute("jazz stick")]
        jazzstick,
        [XmlEnumAttribute("knitting needle")]
        knittingneedle,
        [XmlEnumAttribute("metal hammer")]
        metalhammer,
        [XmlEnumAttribute("slide brush on gong")]
        slidebrushongong,
        [XmlEnumAttribute("snare stick")]
        snarestick,
        [XmlEnumAttribute("spoon mallet")]
        spoonmallet,
        superball,
        [XmlEnumAttribute("triangle beater")]
        trianglebeater,
        [XmlEnumAttribute("triangle beater plain")]
        trianglebeaterplain,
        [XmlEnumAttribute("wire brush")]
        wirebrush,
    }
    
    [DebuggerStepThrough]
    public partial class Timpani
    {
        #region Private fields
        private string _smufl;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Timpani));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Timpani object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Timpani object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Timpani object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Timpani obj, out Exception exception)
        {
            exception = null;
            obj = default(Timpani);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Timpani obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Timpani Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Timpani)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Timpani Deserialize(Stream s)
        {
            return ((Timpani)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Timpani object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Timpani object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Timpani object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Timpani obj, out Exception exception)
        {
            exception = null;
            obj = default(Timpani);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Timpani obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Timpani LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Effect
    {
        #region Private fields
        private string _smufl;
        private Effectvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Effectvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Effect));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Effect object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Effect object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Effect object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Effect obj, out Exception exception)
        {
            exception = null;
            obj = default(Effect);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Effect obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Effect Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Effect)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Effect Deserialize(Stream s)
        {
            return ((Effect)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Effect object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Effect object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Effect object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Effect obj, out Exception exception)
        {
            exception = null;
            obj = default(Effect);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Effect obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Effect LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Effectvalue
    {
        anvil,
        [XmlEnumAttribute("auto horn")]
        autohorn,
        [XmlEnumAttribute("bird whistle")]
        birdwhistle,
        cannon,
        [XmlEnumAttribute("duck call")]
        duckcall,
        [XmlEnumAttribute("gun shot")]
        gunshot,
        [XmlEnumAttribute("klaxon horn")]
        klaxonhorn,
        [XmlEnumAttribute("lions roar")]
        lionsroar,
        [XmlEnumAttribute("lotus flute")]
        lotusflute,
        megaphone,
        [XmlEnumAttribute("police whistle")]
        policewhistle,
        siren,
        [XmlEnumAttribute("slide whistle")]
        slidewhistle,
        [XmlEnumAttribute("thunder sheet")]
        thundersheet,
        [XmlEnumAttribute("wind machine")]
        windmachine,
        [XmlEnumAttribute("wind whistle")]
        windwhistle,
    }
    
    [DebuggerStepThrough]
    public partial class Membrane
    {
        #region Private fields
        private string _smufl;
        private Membranevalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Membranevalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Membrane));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Membrane object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Membrane object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Membrane object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Membrane obj, out Exception exception)
        {
            exception = null;
            obj = default(Membrane);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Membrane obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Membrane Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Membrane)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Membrane Deserialize(Stream s)
        {
            return ((Membrane)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Membrane object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Membrane object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Membrane object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Membrane obj, out Exception exception)
        {
            exception = null;
            obj = default(Membrane);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Membrane obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Membrane LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Membranevalue
    {
        [XmlEnumAttribute("bass drum")]
        bassdrum,
        [XmlEnumAttribute("bass drum on side")]
        bassdrumonside,
        bongos,
        [XmlEnumAttribute("Chinese tomtom")]
        Chinesetomtom,
        [XmlEnumAttribute("conga drum")]
        congadrum,
        cuica,
        [XmlEnumAttribute("goblet drum")]
        gobletdrum,
        [XmlEnumAttribute("Indo-American tomtom")]
        IndoAmericantomtom,
        [XmlEnumAttribute("Japanese tomtom")]
        Japanesetomtom,
        [XmlEnumAttribute("military drum")]
        militarydrum,
        [XmlEnumAttribute("snare drum")]
        snaredrum,
        [XmlEnumAttribute("snare drum snares off")]
        snaredrumsnaresoff,
        tabla,
        tambourine,
        [XmlEnumAttribute("tenor drum")]
        tenordrum,
        timbales,
        tomtom,
    }
    
    [DebuggerStepThrough]
    public partial class Pitched
    {
        #region Private fields
        private string _smufl;
        private Pitchedvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Pitchedvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Pitched));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Pitched object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Pitched object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Pitched object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Pitched obj, out Exception exception)
        {
            exception = null;
            obj = default(Pitched);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Pitched obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Pitched Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Pitched)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Pitched Deserialize(Stream s)
        {
            return ((Pitched)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Pitched object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Pitched object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Pitched object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Pitched obj, out Exception exception)
        {
            exception = null;
            obj = default(Pitched);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Pitched obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Pitched LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Pitchedvalue
    {
        celesta,
        chimes,
        glockenspiel,
        lithophone,
        mallet,
        marimba,
        [XmlEnumAttribute("steel drums")]
        steeldrums,
        tubaphone,
        [XmlEnumAttribute("tubular chimes")]
        tubularchimes,
        vibraphone,
        xylophone,
    }
    
    [DebuggerStepThrough]
    public partial class Wood
    {
        #region Private fields
        private string _smufl;
        private Woodvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Woodvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Wood));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Wood object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Wood object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Wood object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Wood obj, out Exception exception)
        {
            exception = null;
            obj = default(Wood);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Wood obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Wood Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Wood)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Wood Deserialize(Stream s)
        {
            return ((Wood)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Wood object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Wood object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Wood object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Wood obj, out Exception exception)
        {
            exception = null;
            obj = default(Wood);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Wood obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Wood LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Woodvalue
    {
        [XmlEnumAttribute("bamboo scraper")]
        bambooscraper,
        [XmlEnumAttribute("board clapper")]
        boardclapper,
        cabasa,
        castanets,
        [XmlEnumAttribute("castanets with handle")]
        castanetswithhandle,
        claves,
        [XmlEnumAttribute("football rattle")]
        footballrattle,
        guiro,
        [XmlEnumAttribute("log drum")]
        logdrum,
        maraca,
        maracas,
        quijada,
        rainstick,
        ratchet,
        [XmlEnumAttribute("reco-reco")]
        recoreco,
        [XmlEnumAttribute("sandpaper blocks")]
        sandpaperblocks,
        [XmlEnumAttribute("slit drum")]
        slitdrum,
        [XmlEnumAttribute("temple block")]
        templeblock,
        vibraslap,
        whip,
        [XmlEnumAttribute("wood block")]
        woodblock,
    }
    
    [DebuggerStepThrough]
    public partial class Metal
    {
        #region Private fields
        private string _smufl;
        private Metalvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Metalvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Metal));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Metal object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Metal object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Metal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Metal obj, out Exception exception)
        {
            exception = null;
            obj = default(Metal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Metal obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Metal Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Metal)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Metal Deserialize(Stream s)
        {
            return ((Metal)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Metal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Metal object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Metal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Metal obj, out Exception exception)
        {
            exception = null;
            obj = default(Metal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Metal obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Metal LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Metalvalue
    {
        agogo,
        almglocken,
        bell,
        [XmlEnumAttribute("bell plate")]
        bellplate,
        [XmlEnumAttribute("bell tree")]
        belltree,
        [XmlEnumAttribute("brake drum")]
        brakedrum,
        cencerro,
        [XmlEnumAttribute("chain rattle")]
        chainrattle,
        [XmlEnumAttribute("Chinese cymbal")]
        Chinesecymbal,
        cowbell,
        [XmlEnumAttribute("crash cymbals")]
        crashcymbals,
        crotale,
        [XmlEnumAttribute("cymbal tongs")]
        cymbaltongs,
        [XmlEnumAttribute("domed gong")]
        domedgong,
        [XmlEnumAttribute("finger cymbals")]
        fingercymbals,
        flexatone,
        gong,
        [XmlEnumAttribute("hi-hat")]
        hihat,
        [XmlEnumAttribute("high-hat cymbals")]
        highhatcymbals,
        handbell,
        [XmlEnumAttribute("jaw harp")]
        jawharp,
        [XmlEnumAttribute("jingle bells")]
        jinglebells,
        [XmlEnumAttribute("musical saw")]
        musicalsaw,
        [XmlEnumAttribute("shell bells")]
        shellbells,
        sistrum,
        [XmlEnumAttribute("sizzle cymbal")]
        sizzlecymbal,
        [XmlEnumAttribute("sleigh bells")]
        sleighbells,
        [XmlEnumAttribute("suspended cymbal")]
        suspendedcymbal,
        [XmlEnumAttribute("tam tam")]
        tamtam,
        [XmlEnumAttribute("tam tam with beater")]
        tamtamwithbeater,
        triangle,
        [XmlEnumAttribute("Vietnamese hat")]
        Vietnamesehat,
    }
    
    [DebuggerStepThrough]
    public partial class Glass
    {
        #region Private fields
        private string _smufl;
        private Glassvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Glassvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Glass));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Glass object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Glass object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Glass object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Glass obj, out Exception exception)
        {
            exception = null;
            obj = default(Glass);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Glass obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Glass Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Glass)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Glass Deserialize(Stream s)
        {
            return ((Glass)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Glass object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Glass object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Glass object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Glass obj, out Exception exception)
        {
            exception = null;
            obj = default(Glass);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Glass obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Glass LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Glassvalue
    {
        [XmlEnumAttribute("glass harmonica")]
        glassharmonica,
        [XmlEnumAttribute("glass harp")]
        glassharp,
        [XmlEnumAttribute("wind chimes")]
        windchimes,
    }
    
    [DebuggerStepThrough]
    public partial class Percussion
    {
        #region Private fields
        private object _item;
        private Enclosureshape _enclosure;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }
        
        public Enclosureshape Enclosure
        {
            get
            {
                return _enclosure;
            }
            set
            {
                _enclosure = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Percussion));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Percussion object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Percussion object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Percussion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Percussion obj, out Exception exception)
        {
            exception = null;
            obj = default(Percussion);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Percussion obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Percussion Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Percussion)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Percussion Deserialize(Stream s)
        {
            return ((Percussion)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Percussion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Percussion object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Percussion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Percussion obj, out Exception exception)
        {
            exception = null;
            obj = default(Percussion);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Percussion obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Percussion LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Othertext
    {
        #region Private fields
        private string _smufl;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Othertext));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Othertext object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Othertext object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Othertext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Othertext obj, out Exception exception)
        {
            exception = null;
            obj = default(Othertext);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Othertext obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Othertext Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Othertext)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Othertext Deserialize(Stream s)
        {
            return ((Othertext)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Othertext object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Othertext object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Othertext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Othertext obj, out Exception exception)
        {
            exception = null;
            obj = default(Othertext);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Othertext obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Othertext LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Sticklocation
    {
        center,
        rim,
        [XmlEnumAttribute("cymbal bell")]
        cymbalbell,
        [XmlEnumAttribute("cymbal edge")]
        cymbaledge,
    }
    
    public enum Enclosureshape
    {
        rectangle,
        square,
        oval,
        circle,
        bracket,
        [XmlEnumAttribute("inverted-bracket")]
        invertedbracket,
        triangle,
        diamond,
        pentagon,
        hexagon,
        heptagon,
        octagon,
        nonagon,
        decagon,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Principalvoice
    {
        #region Private fields
        private Startstop _type;
        private Principalvoicesymbol _symbol;
        private string _id;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public Principalvoicesymbol Symbol
        {
            get
            {
                return _symbol;
            }
            set
            {
                _symbol = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Principalvoice));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Principalvoice object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Principalvoice object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Principalvoice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Principalvoice obj, out Exception exception)
        {
            exception = null;
            obj = default(Principalvoice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Principalvoice obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Principalvoice Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Principalvoice)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Principalvoice Deserialize(Stream s)
        {
            return ((Principalvoice)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Principalvoice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Principalvoice object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Principalvoice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Principalvoice obj, out Exception exception)
        {
            exception = null;
            obj = default(Principalvoice);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Principalvoice obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Principalvoice LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Principalvoicesymbol
    {
        Hauptstimme,
        Nebenstimme,
        plain,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Accord
    {
        #region Private fields
        private Step _tuningstep;
        private decimal _tuningalter;
        private string _tuningoctave;
        private string _string;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Step Tuningstep
        {
            get
            {
                return _tuningstep;
            }
            set
            {
                _tuningstep = value;
            }
        }
        
        public decimal Tuningalter
        {
            get
            {
                return _tuningalter;
            }
            set
            {
                _tuningalter = value;
            }
        }
        
        public string Tuningoctave
        {
            get
            {
                return _tuningoctave;
            }
            set
            {
                _tuningoctave = value;
            }
        }
        
        public string String
        {
            get
            {
                return _string;
            }
            set
            {
                _string = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Accord));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Accord object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Accord object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Accord object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Accord obj, out Exception exception)
        {
            exception = null;
            obj = default(Accord);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Accord obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Accord Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Accord)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Accord Deserialize(Stream s)
        {
            return ((Accord)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Accord object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Accord object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Accord object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Accord obj, out Exception exception)
        {
            exception = null;
            obj = default(Accord);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Accord obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Accord LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Scordatura
    {
        #region Private fields
        private List<Accord> _accord;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Scordatura()
        {
            _accord = new List<Accord>();
        }
        
        public List<Accord> Accord
        {
            get
            {
                return _accord;
            }
            set
            {
                _accord = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Scordatura));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Scordatura object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Scordatura object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Scordatura object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Scordatura obj, out Exception exception)
        {
            exception = null;
            obj = default(Scordatura);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Scordatura obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Scordatura Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Scordatura)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Scordatura Deserialize(Stream s)
        {
            return ((Scordatura)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Scordatura object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Scordatura object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Scordatura object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Scordatura obj, out Exception exception)
        {
            exception = null;
            obj = default(Scordatura);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Scordatura obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Scordatura LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Stringmute
    {
        #region Private fields
        private Onoff _type;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Onoff Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Stringmute));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Stringmute object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Stringmute object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Stringmute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Stringmute obj, out Exception exception)
        {
            exception = null;
            obj = default(Stringmute);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Stringmute obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Stringmute Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Stringmute)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Stringmute Deserialize(Stream s)
        {
            return ((Stringmute)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Stringmute object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Stringmute object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Stringmute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Stringmute obj, out Exception exception)
        {
            exception = null;
            obj = default(Stringmute);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Stringmute obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Stringmute LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Onoff
    {
        on,
        off,
    }
    
    [DebuggerStepThrough]
    public partial class Emptyprintstylealignid
    {
        #region Private fields
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Emptyprintstylealignid));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Emptyprintstylealignid object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Emptyprintstylealignid object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Emptyprintstylealignid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Emptyprintstylealignid obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyprintstylealignid);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Emptyprintstylealignid obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Emptyprintstylealignid Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Emptyprintstylealignid)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Emptyprintstylealignid Deserialize(Stream s)
        {
            return ((Emptyprintstylealignid)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Emptyprintstylealignid object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Emptyprintstylealignid object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Emptyprintstylealignid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Emptyprintstylealignid obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyprintstylealignid);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Emptyprintstylealignid obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Emptyprintstylealignid LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Pedaltuning
    {
        #region Private fields
        private Step _pedalstep;
        private decimal _pedalalter;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Step Pedalstep
        {
            get
            {
                return _pedalstep;
            }
            set
            {
                _pedalstep = value;
            }
        }
        
        public decimal Pedalalter
        {
            get
            {
                return _pedalalter;
            }
            set
            {
                _pedalalter = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Pedaltuning));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Pedaltuning object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Pedaltuning object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Pedaltuning object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Pedaltuning obj, out Exception exception)
        {
            exception = null;
            obj = default(Pedaltuning);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Pedaltuning obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Pedaltuning Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Pedaltuning)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Pedaltuning Deserialize(Stream s)
        {
            return ((Pedaltuning)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Pedaltuning object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Pedaltuning object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Pedaltuning object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Pedaltuning obj, out Exception exception)
        {
            exception = null;
            obj = default(Pedaltuning);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Pedaltuning obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Pedaltuning LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Harppedals
    {
        #region Private fields
        private List<Pedaltuning> _pedaltuning;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Harppedals()
        {
            _pedaltuning = new List<Pedaltuning>();
        }
        
        public List<Pedaltuning> Pedaltuning
        {
            get
            {
                return _pedaltuning;
            }
            set
            {
                _pedaltuning = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Harppedals));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Harppedals object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Harppedals object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Harppedals object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Harppedals obj, out Exception exception)
        {
            exception = null;
            obj = default(Harppedals);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Harppedals obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Harppedals Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Harppedals)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Harppedals Deserialize(Stream s)
        {
            return ((Harppedals)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Harppedals object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Harppedals object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Harppedals object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Harppedals obj, out Exception exception)
        {
            exception = null;
            obj = default(Harppedals);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Harppedals obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Harppedals LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Octaveshift
    {
        #region Private fields
        private Updownstopcontinue _type;
        private string _number;
        private string _size;
        private decimal _dashlength;
        private decimal _spacelength;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Octaveshift()
        {
            _size = "8";
        }
        
        public Updownstopcontinue Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        [DefaultValue("8")]
        public string Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Octaveshift));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Octaveshift object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Octaveshift object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Octaveshift object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Octaveshift obj, out Exception exception)
        {
            exception = null;
            obj = default(Octaveshift);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Octaveshift obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Octaveshift Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Octaveshift)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Octaveshift Deserialize(Stream s)
        {
            return ((Octaveshift)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Octaveshift object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Octaveshift object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Octaveshift object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Octaveshift obj, out Exception exception)
        {
            exception = null;
            obj = default(Octaveshift);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Octaveshift obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Octaveshift LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Updownstopcontinue
    {
        up,
        down,
        stop,
        @continue,
    }
    
    [DebuggerStepThrough]
    public partial class Metronometied
    {
        #region Private fields
        private Startstop _type;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Metronometied));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Metronometied object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Metronometied object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Metronometied object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Metronometied obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronometied);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Metronometied obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Metronometied Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Metronometied)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Metronometied Deserialize(Stream s)
        {
            return ((Metronometied)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Metronometied object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Metronometied object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Metronometied object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Metronometied obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronometied);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Metronometied obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Metronometied LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Metronomebeam
    {
        #region Private fields
        private string _number;
        private Beamvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Metronomebeam()
        {
            _number = "1";
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Beamvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Metronomebeam));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Metronomebeam object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Metronomebeam object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Metronomebeam object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Metronomebeam obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronomebeam);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Metronomebeam obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Metronomebeam Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Metronomebeam)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Metronomebeam Deserialize(Stream s)
        {
            return ((Metronomebeam)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Metronomebeam object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Metronomebeam object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Metronomebeam object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Metronomebeam obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronomebeam);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Metronomebeam obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Metronomebeam LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Beamvalue
    {
        begin,
        @continue,
        end,
        [XmlEnumAttribute("forward hook")]
        forwardhook,
        [XmlEnumAttribute("backward hook")]
        backwardhook,
    }
    
    [DebuggerStepThrough]
    public partial class Metronomenote
    {
        #region Private fields
        private Notetypevalue _metronometype;
        private List<Empty> _metronomedot;
        private List<Metronomebeam> _metronomebeam;
        private Metronometied _metronometied;
        private Metronometuplet _metronometuplet;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Metronomenote()
        {
            _metronometuplet = new Metronometuplet();
            _metronometied = new Metronometied();
            _metronomebeam = new List<Metronomebeam>();
            _metronomedot = new List<Empty>();
        }
        
        public Notetypevalue Metronometype
        {
            get
            {
                return _metronometype;
            }
            set
            {
                _metronometype = value;
            }
        }
        
        public List<Empty> Metronomedot
        {
            get
            {
                return _metronomedot;
            }
            set
            {
                _metronomedot = value;
            }
        }
        
        public List<Metronomebeam> Metronomebeam
        {
            get
            {
                return _metronomebeam;
            }
            set
            {
                _metronomebeam = value;
            }
        }
        
        public Metronometied Metronometied
        {
            get
            {
                return _metronometied;
            }
            set
            {
                _metronometied = value;
            }
        }
        
        public Metronometuplet Metronometuplet
        {
            get
            {
                return _metronometuplet;
            }
            set
            {
                _metronometuplet = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Metronomenote));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Metronomenote object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Metronomenote object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Metronomenote object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Metronomenote obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronomenote);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Metronomenote obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Metronomenote Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Metronomenote)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Metronomenote Deserialize(Stream s)
        {
            return ((Metronomenote)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Metronomenote object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Metronomenote object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Metronomenote object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Metronomenote obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronomenote);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Metronomenote obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Metronomenote LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Metronometuplet : Timemodification
    {
        #region Private fields
        private Startstop _type;
        private Yesno _bracket;
        private Showtuplet _shownumber;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public Yesno Bracket
        {
            get
            {
                return _bracket;
            }
            set
            {
                _bracket = value;
            }
        }
        
        public Showtuplet Shownumber
        {
            get
            {
                return _shownumber;
            }
            set
            {
                _shownumber = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Metronometuplet));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Metronometuplet object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Metronometuplet object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Metronometuplet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Metronometuplet obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronometuplet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Metronometuplet obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public new static Metronometuplet Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Metronometuplet)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Metronometuplet Deserialize(Stream s)
        {
            return ((Metronometuplet)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Metronometuplet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Metronometuplet object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Metronometuplet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Metronometuplet obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronometuplet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Metronometuplet obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public new static Metronometuplet LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Showtuplet
    {
        actual,
        both,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Timemodification
    {
        #region Private fields
        private string _actualnotes;
        private string _normalnotes;
        private Notetypevalue _normaltype;
        private List<Empty> _normaldot;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Timemodification()
        {
            _normaldot = new List<Empty>();
        }
        
        public string Actualnotes
        {
            get
            {
                return _actualnotes;
            }
            set
            {
                _actualnotes = value;
            }
        }
        
        public string Normalnotes
        {
            get
            {
                return _normalnotes;
            }
            set
            {
                _normalnotes = value;
            }
        }
        
        public Notetypevalue Normaltype
        {
            get
            {
                return _normaltype;
            }
            set
            {
                _normaltype = value;
            }
        }
        
        public List<Empty> Normaldot
        {
            get
            {
                return _normaldot;
            }
            set
            {
                _normaldot = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Timemodification));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Timemodification object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Timemodification object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Timemodification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Timemodification obj, out Exception exception)
        {
            exception = null;
            obj = default(Timemodification);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Timemodification obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Timemodification Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Timemodification)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Timemodification Deserialize(Stream s)
        {
            return ((Timemodification)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Timemodification object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Timemodification object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Timemodification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Timemodification obj, out Exception exception)
        {
            exception = null;
            obj = default(Timemodification);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Timemodification obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Timemodification LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Perminute
    {
        #region Private fields
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Perminute));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Perminute object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Perminute object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Perminute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Perminute obj, out Exception exception)
        {
            exception = null;
            obj = default(Perminute);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Perminute obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Perminute Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Perminute)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Perminute Deserialize(Stream s)
        {
            return ((Perminute)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Perminute object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Perminute object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Perminute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Perminute obj, out Exception exception)
        {
            exception = null;
            obj = default(Perminute);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Perminute obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Perminute LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Beatunittied
    {
        #region Private fields
        private Notetypevalue _beatunit;
        private List<Empty> _beatunitdot;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Beatunittied()
        {
            _beatunitdot = new List<Empty>();
        }
        
        public Notetypevalue Beatunit
        {
            get
            {
                return _beatunit;
            }
            set
            {
                _beatunit = value;
            }
        }
        
        public List<Empty> Beatunitdot
        {
            get
            {
                return _beatunitdot;
            }
            set
            {
                _beatunitdot = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Beatunittied));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Beatunittied object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Beatunittied object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Beatunittied object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Beatunittied obj, out Exception exception)
        {
            exception = null;
            obj = default(Beatunittied);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Beatunittied obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Beatunittied Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Beatunittied)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Beatunittied Deserialize(Stream s)
        {
            return ((Beatunittied)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Beatunittied object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Beatunittied object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Beatunittied object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Beatunittied obj, out Exception exception)
        {
            exception = null;
            obj = default(Beatunittied);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Beatunittied obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Beatunittied LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Metronome
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType7[] _itemsElementName;
        private Yesno _printobject;
        private Leftcenterright _justify;
        private Yesno _parentheses;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType7[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public Leftcenterright Justify
        {
            get
            {
                return _justify;
            }
            set
            {
                _justify = value;
            }
        }
        
        public Yesno Parentheses
        {
            get
            {
                return _parentheses;
            }
            set
            {
                _parentheses = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Metronome));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Metronome object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Metronome object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Metronome object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Metronome obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronome);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Metronome obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Metronome Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Metronome)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Metronome Deserialize(Stream s)
        {
            return ((Metronome)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Metronome object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Metronome object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Metronome object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Metronome obj, out Exception exception)
        {
            exception = null;
            obj = default(Metronome);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Metronome obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Metronome LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType7
    {
        [XmlEnumAttribute("beat-unit")]
        beatunit,
        [XmlEnumAttribute("beat-unit-dot")]
        beatunitdot,
        [XmlEnumAttribute("beat-unit-tied")]
        beatunittied,
        [XmlEnumAttribute("metronome-arrows")]
        metronomearrows,
        [XmlEnumAttribute("metronome-note")]
        metronomenote,
        [XmlEnumAttribute("metronome-relation")]
        metronomerelation,
        [XmlEnumAttribute("per-minute")]
        perminute,
    }
    
    [DebuggerStepThrough]
    public partial class Pedal
    {
        #region Private fields
        private Pedaltype _type;
        private string _number;
        private Yesno _line;
        private Yesno _sign;
        private Yesno _abbreviated;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Pedaltype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Yesno Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
        
        public Yesno Sign
        {
            get
            {
                return _sign;
            }
            set
            {
                _sign = value;
            }
        }
        
        public Yesno Abbreviated
        {
            get
            {
                return _abbreviated;
            }
            set
            {
                _abbreviated = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Pedal));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Pedal object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Pedal object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Pedal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Pedal obj, out Exception exception)
        {
            exception = null;
            obj = default(Pedal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Pedal obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Pedal Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Pedal)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Pedal Deserialize(Stream s)
        {
            return ((Pedal)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Pedal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Pedal object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Pedal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Pedal obj, out Exception exception)
        {
            exception = null;
            obj = default(Pedal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Pedal obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Pedal LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Pedaltype
    {
        start,
        stop,
        sostenuto,
        change,
        @continue,
        discontinue,
        resume,
    }
    
    [DebuggerStepThrough]
    public partial class Bracket
    {
        #region Private fields
        private Startstopcontinue _type;
        private string _number;
        private Lineend _lineend;
        private decimal _endlength;
        private Linetype _linetype;
        private decimal _dashlength;
        private decimal _spacelength;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _color;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstopcontinue Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Lineend Lineend
        {
            get
            {
                return _lineend;
            }
            set
            {
                _lineend = value;
            }
        }
        
        public decimal Endlength
        {
            get
            {
                return _endlength;
            }
            set
            {
                _endlength = value;
            }
        }
        
        public Linetype Linetype
        {
            get
            {
                return _linetype;
            }
            set
            {
                _linetype = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Bracket));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Bracket object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Bracket object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Bracket object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Bracket obj, out Exception exception)
        {
            exception = null;
            obj = default(Bracket);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Bracket obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Bracket Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Bracket)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Bracket Deserialize(Stream s)
        {
            return ((Bracket)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Bracket object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Bracket object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Bracket object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Bracket obj, out Exception exception)
        {
            exception = null;
            obj = default(Bracket);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Bracket obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Bracket LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Lineend
    {
        up,
        down,
        both,
        arrow,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Dashes
    {
        #region Private fields
        private Startstopcontinue _type;
        private string _number;
        private decimal _dashlength;
        private decimal _spacelength;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _color;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstopcontinue Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Dashes));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Dashes object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Dashes object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Dashes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Dashes obj, out Exception exception)
        {
            exception = null;
            obj = default(Dashes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Dashes obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Dashes Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Dashes)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Dashes Deserialize(Stream s)
        {
            return ((Dashes)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Dashes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Dashes object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Dashes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Dashes obj, out Exception exception)
        {
            exception = null;
            obj = default(Dashes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Dashes obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Dashes LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Wedge
    {
        #region Private fields
        private Wedgetype _type;
        private string _number;
        private decimal _spread;
        private Yesno _niente;
        private Linetype _linetype;
        private decimal _dashlength;
        private decimal _spacelength;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _color;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Wedgetype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public decimal Spread
        {
            get
            {
                return _spread;
            }
            set
            {
                _spread = value;
            }
        }
        
        public Yesno Niente
        {
            get
            {
                return _niente;
            }
            set
            {
                _niente = value;
            }
        }
        
        public Linetype Linetype
        {
            get
            {
                return _linetype;
            }
            set
            {
                _linetype = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Wedge));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Wedge object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Wedge object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Wedge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Wedge obj, out Exception exception)
        {
            exception = null;
            obj = default(Wedge);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Wedge obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Wedge Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Wedge)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Wedge Deserialize(Stream s)
        {
            return ((Wedge)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Wedge object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Wedge object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Wedge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Wedge obj, out Exception exception)
        {
            exception = null;
            obj = default(Wedge);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Wedge obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Wedge LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Wedgetype
    {
        crescendo,
        diminuendo,
        stop,
        @continue,
    }
    
    [DebuggerStepThrough]
    public partial class Directiontype
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType8[] _itemsElementName;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType8[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Directiontype));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Directiontype object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Directiontype object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Directiontype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Directiontype obj, out Exception exception)
        {
            exception = null;
            obj = default(Directiontype);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Directiontype obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Directiontype Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Directiontype)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Directiontype Deserialize(Stream s)
        {
            return ((Directiontype)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Directiontype object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Directiontype object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Directiontype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Directiontype obj, out Exception exception)
        {
            exception = null;
            obj = default(Directiontype);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Directiontype obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Directiontype LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Dynamics
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType5[] _itemsElementName;
        private Abovebelow _placement;
        private string _underline;
        private string _overline;
        private string _linethrough;
        private Enclosureshape _enclosure;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType5[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Underline
        {
            get
            {
                return _underline;
            }
            set
            {
                _underline = value;
            }
        }
        
        public string Overline
        {
            get
            {
                return _overline;
            }
            set
            {
                _overline = value;
            }
        }
        
        public string Linethrough
        {
            get
            {
                return _linethrough;
            }
            set
            {
                _linethrough = value;
            }
        }
        
        public Enclosureshape Enclosure
        {
            get
            {
                return _enclosure;
            }
            set
            {
                _enclosure = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Dynamics));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Dynamics object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Dynamics object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Dynamics object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Dynamics obj, out Exception exception)
        {
            exception = null;
            obj = default(Dynamics);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Dynamics obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Dynamics Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Dynamics)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Dynamics Deserialize(Stream s)
        {
            return ((Dynamics)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Dynamics object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Dynamics object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Dynamics object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Dynamics obj, out Exception exception)
        {
            exception = null;
            obj = default(Dynamics);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Dynamics obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Dynamics LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType5
    {
        f,
        ff,
        fff,
        ffff,
        fffff,
        ffffff,
        fp,
        fz,
        mf,
        mp,
        n,
        [XmlEnumAttribute("other-dynamics")]
        otherdynamics,
        p,
        pf,
        pp,
        ppp,
        pppp,
        ppppp,
        pppppp,
        rf,
        rfz,
        sf,
        sffz,
        sfp,
        sfpp,
        sfz,
        sfzp,
    }
    
    [DebuggerStepThrough]
    public partial class Image
    {
        #region Private fields
        private string _source;
        private string _type;
        private decimal _height;
        private decimal _width;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Source
        {
            get
            {
                return _source;
            }
            set
            {
                _source = value;
            }
        }
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public decimal Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
        
        public decimal Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Image));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Image object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Image object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Image object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Image obj, out Exception exception)
        {
            exception = null;
            obj = default(Image);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Image obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Image Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Image)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Image Deserialize(Stream s)
        {
            return ((Image)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Image object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Image object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Image object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Image obj, out Exception exception)
        {
            exception = null;
            obj = default(Image);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Image obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Image LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Formattedtextid
    {
        #region Private fields
        private string _lang;
        private string _space;
        private string _id;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Lang
        {
            get
            {
                return _lang;
            }
            set
            {
                _lang = value;
            }
        }
        
        public string Space
        {
            get
            {
                return _space;
            }
            set
            {
                _space = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Formattedtextid));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Formattedtextid object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Formattedtextid object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Formattedtextid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Formattedtextid obj, out Exception exception)
        {
            exception = null;
            obj = default(Formattedtextid);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Formattedtextid obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Formattedtextid Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Formattedtextid)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Formattedtextid Deserialize(Stream s)
        {
            return ((Formattedtextid)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Formattedtextid object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Formattedtextid object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Formattedtextid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Formattedtextid obj, out Exception exception)
        {
            exception = null;
            obj = default(Formattedtextid);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Formattedtextid obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Formattedtextid LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Formattedsymbolid
    {
        #region Private fields
        private string _id;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Formattedsymbolid));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Formattedsymbolid object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Formattedsymbolid object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Formattedsymbolid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Formattedsymbolid obj, out Exception exception)
        {
            exception = null;
            obj = default(Formattedsymbolid);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Formattedsymbolid obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Formattedsymbolid Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Formattedsymbolid)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Formattedsymbolid Deserialize(Stream s)
        {
            return ((Formattedsymbolid)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Formattedsymbolid object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Formattedsymbolid object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Formattedsymbolid object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Formattedsymbolid obj, out Exception exception)
        {
            exception = null;
            obj = default(Formattedsymbolid);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Formattedsymbolid obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Formattedsymbolid LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType8
    {
        [XmlEnumAttribute("accordion-registration")]
        accordionregistration,
        bracket,
        coda,
        damp,
        [XmlEnumAttribute("damp-all")]
        dampall,
        dashes,
        dynamics,
        eyeglasses,
        [XmlEnumAttribute("harp-pedals")]
        harppedals,
        image,
        metronome,
        [XmlEnumAttribute("octave-shift")]
        octaveshift,
        [XmlEnumAttribute("other-direction")]
        otherdirection,
        pedal,
        percussion,
        [XmlEnumAttribute("principal-voice")]
        principalvoice,
        rehearsal,
        scordatura,
        segno,
        [XmlEnumAttribute("staff-divide")]
        staffdivide,
        [XmlEnumAttribute("string-mute")]
        stringmute,
        symbol,
        wedge,
        words,
    }
    
    [DebuggerStepThrough]
    public partial class Direction
    {
        #region Private fields
        private List<Directiontype> _directiontype;
        private Offset _offset;
        private Formattedtext _footnote;
        private Level _level;
        private string _voice;
        private string _staff;
        private Sound _sound;
        private Listening _listening;
        private Abovebelow _placement;
        private Yesno _directive;
        private Systemrelation _system;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Direction()
        {
            _listening = new Listening();
            _sound = new Sound();
            _level = new Level();
            _footnote = new Formattedtext();
            _offset = new Offset();
            _directiontype = new List<Directiontype>();
        }
        
        public List<Directiontype> Directiontype
        {
            get
            {
                return _directiontype;
            }
            set
            {
                _directiontype = value;
            }
        }
        
        public Offset Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public string Voice
        {
            get
            {
                return _voice;
            }
            set
            {
                _voice = value;
            }
        }
        
        public string Staff
        {
            get
            {
                return _staff;
            }
            set
            {
                _staff = value;
            }
        }
        
        public Sound Sound
        {
            get
            {
                return _sound;
            }
            set
            {
                _sound = value;
            }
        }
        
        public Listening Listening
        {
            get
            {
                return _listening;
            }
            set
            {
                _listening = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Yesno Directive
        {
            get
            {
                return _directive;
            }
            set
            {
                _directive = value;
            }
        }
        
        public Systemrelation System
        {
            get
            {
                return _system;
            }
            set
            {
                _system = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Direction));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Direction object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Direction object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Direction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Direction obj, out Exception exception)
        {
            exception = null;
            obj = default(Direction);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Direction obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Direction Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Direction)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Direction Deserialize(Stream s)
        {
            return ((Direction)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Direction object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Direction object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Direction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Direction obj, out Exception exception)
        {
            exception = null;
            obj = default(Direction);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Direction obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Direction LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Forward
    {
        #region Private fields
        private decimal _duration;
        private Formattedtext _footnote;
        private Level _level;
        private string _voice;
        private string _staff;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Forward()
        {
            _level = new Level();
            _footnote = new Formattedtext();
        }
        
        public decimal Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public string Voice
        {
            get
            {
                return _voice;
            }
            set
            {
                _voice = value;
            }
        }
        
        public string Staff
        {
            get
            {
                return _staff;
            }
            set
            {
                _staff = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Forward));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Forward object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Forward object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Forward object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Forward obj, out Exception exception)
        {
            exception = null;
            obj = default(Forward);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Forward obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Forward Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Forward)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Forward Deserialize(Stream s)
        {
            return ((Forward)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Forward object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Forward object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Forward object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Forward obj, out Exception exception)
        {
            exception = null;
            obj = default(Forward);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Forward obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Forward LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Backup
    {
        #region Private fields
        private decimal _duration;
        private Formattedtext _footnote;
        private Level _level;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Backup()
        {
            _level = new Level();
            _footnote = new Formattedtext();
        }
        
        public decimal Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Backup));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Backup object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Backup object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Backup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Backup obj, out Exception exception)
        {
            exception = null;
            obj = default(Backup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Backup obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Backup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Backup)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Backup Deserialize(Stream s)
        {
            return ((Backup)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Backup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Backup object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Backup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Backup obj, out Exception exception)
        {
            exception = null;
            obj = default(Backup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Backup obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Backup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Wait
    {
        #region Private fields
        private string _player;
        private string _timeonly;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Player
        {
            get
            {
                return _player;
            }
            set
            {
                _player = value;
            }
        }
        
        public string Timeonly
        {
            get
            {
                return _timeonly;
            }
            set
            {
                _timeonly = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Wait));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Wait object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Wait object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Wait object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Wait obj, out Exception exception)
        {
            exception = null;
            obj = default(Wait);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Wait obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Wait Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Wait)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Wait Deserialize(Stream s)
        {
            return ((Wait)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Wait object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Wait object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Wait object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Wait obj, out Exception exception)
        {
            exception = null;
            obj = default(Wait);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Wait obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Wait LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Assess
    {
        #region Private fields
        private Yesno _type;
        private string _player;
        private string _timeonly;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Player
        {
            get
            {
                return _player;
            }
            set
            {
                _player = value;
            }
        }
        
        public string Timeonly
        {
            get
            {
                return _timeonly;
            }
            set
            {
                _timeonly = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Assess));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Assess object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Assess object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Assess object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Assess obj, out Exception exception)
        {
            exception = null;
            obj = default(Assess);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Assess obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Assess Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Assess)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Assess Deserialize(Stream s)
        {
            return ((Assess)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Assess object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Assess object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Assess object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Assess obj, out Exception exception)
        {
            exception = null;
            obj = default(Assess);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Assess obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Assess LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Elision
    {
        #region Private fields
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private string _smufl;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Elision));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Elision object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Elision object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Elision object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Elision obj, out Exception exception)
        {
            exception = null;
            obj = default(Elision);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Elision obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Elision Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Elision)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Elision Deserialize(Stream s)
        {
            return ((Elision)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Elision object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Elision object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Elision object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Elision obj, out Exception exception)
        {
            exception = null;
            obj = default(Elision);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Elision obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Elision LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Textelementdata
    {
        #region Private fields
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private string _underline;
        private string _overline;
        private string _linethrough;
        private decimal _rotation;
        private string _letterspacing;
        private string _lang;
        private Textdirection _dir;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Underline
        {
            get
            {
                return _underline;
            }
            set
            {
                _underline = value;
            }
        }
        
        public string Overline
        {
            get
            {
                return _overline;
            }
            set
            {
                _overline = value;
            }
        }
        
        public string Linethrough
        {
            get
            {
                return _linethrough;
            }
            set
            {
                _linethrough = value;
            }
        }
        
        public decimal Rotation
        {
            get
            {
                return _rotation;
            }
            set
            {
                _rotation = value;
            }
        }
        
        public string Letterspacing
        {
            get
            {
                return _letterspacing;
            }
            set
            {
                _letterspacing = value;
            }
        }
        
        public string Lang
        {
            get
            {
                return _lang;
            }
            set
            {
                _lang = value;
            }
        }
        
        public Textdirection Dir
        {
            get
            {
                return _dir;
            }
            set
            {
                _dir = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Textelementdata));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Textelementdata object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Textelementdata object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Textelementdata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Textelementdata obj, out Exception exception)
        {
            exception = null;
            obj = default(Textelementdata);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Textelementdata obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Textelementdata Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Textelementdata)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Textelementdata Deserialize(Stream s)
        {
            return ((Textelementdata)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Textelementdata object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Textelementdata object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Textelementdata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Textelementdata obj, out Exception exception)
        {
            exception = null;
            obj = default(Textelementdata);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Textelementdata obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Textelementdata LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Textdirection
    {
        ltr,
        rtl,
        lro,
        rlo,
    }
    
    [DebuggerStepThrough]
    public partial class Lyric
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType6[] _itemsElementName;
        private Empty _endline;
        private Empty _endparagraph;
        private Formattedtext _footnote;
        private Level _level;
        private string _number;
        private string _name;
        private Leftcenterright _justify;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private Abovebelow _placement;
        private string _color;
        private Yesno _printobject;
        private string _timeonly;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Lyric()
        {
            _level = new Level();
            _footnote = new Formattedtext();
            _endparagraph = new Empty();
            _endline = new Empty();
        }
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType6[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public Empty Endline
        {
            get
            {
                return _endline;
            }
            set
            {
                _endline = value;
            }
        }
        
        public Empty Endparagraph
        {
            get
            {
                return _endparagraph;
            }
            set
            {
                _endparagraph = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        public Leftcenterright Justify
        {
            get
            {
                return _justify;
            }
            set
            {
                _justify = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public string Timeonly
        {
            get
            {
                return _timeonly;
            }
            set
            {
                _timeonly = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Lyric));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Lyric object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Lyric object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Lyric object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Lyric obj, out Exception exception)
        {
            exception = null;
            obj = default(Lyric);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Lyric obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Lyric Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Lyric)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Lyric Deserialize(Stream s)
        {
            return ((Lyric)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Lyric object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Lyric object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Lyric object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Lyric obj, out Exception exception)
        {
            exception = null;
            obj = default(Lyric);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Lyric obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Lyric LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Syllabic
    {
        single,
        begin,
        end,
        middle,
    }
    
    public enum ItemsChoiceType6
    {
        elision,
        extend,
        humming,
        laughing,
        syllabic,
        text,
    }
    
    [DebuggerStepThrough]
    public partial class Othernotation
    {
        #region Private fields
        private Startstopsingle _type;
        private string _number;
        private Yesno _printobject;
        private Abovebelow _placement;
        private string _smufl;
        private string _id;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Othernotation()
        {
            _number = "1";
        }
        
        public Startstopsingle Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Othernotation));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Othernotation object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Othernotation object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Othernotation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Othernotation obj, out Exception exception)
        {
            exception = null;
            obj = default(Othernotation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Othernotation obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Othernotation Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Othernotation)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Othernotation Deserialize(Stream s)
        {
            return ((Othernotation)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Othernotation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Othernotation object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Othernotation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Othernotation obj, out Exception exception)
        {
            exception = null;
            obj = default(Othernotation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Othernotation obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Othernotation LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Nonarpeggiate
    {
        #region Private fields
        private Topbottom _type;
        private string _number;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private Abovebelow _placement;
        private string _color;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Topbottom Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Nonarpeggiate));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Nonarpeggiate object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Nonarpeggiate object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Nonarpeggiate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Nonarpeggiate obj, out Exception exception)
        {
            exception = null;
            obj = default(Nonarpeggiate);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Nonarpeggiate obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Nonarpeggiate Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Nonarpeggiate)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Nonarpeggiate Deserialize(Stream s)
        {
            return ((Nonarpeggiate)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Nonarpeggiate object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Nonarpeggiate object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Nonarpeggiate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Nonarpeggiate obj, out Exception exception)
        {
            exception = null;
            obj = default(Nonarpeggiate);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Nonarpeggiate obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Nonarpeggiate LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Topbottom
    {
        top,
        bottom,
    }
    
    [DebuggerStepThrough]
    public partial class Arpeggiate
    {
        #region Private fields
        private string _number;
        private Updown _direction;
        private Yesno _unbroken;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private Abovebelow _placement;
        private string _color;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Updown Direction
        {
            get
            {
                return _direction;
            }
            set
            {
                _direction = value;
            }
        }
        
        public Yesno Unbroken
        {
            get
            {
                return _unbroken;
            }
            set
            {
                _unbroken = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Arpeggiate));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Arpeggiate object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Arpeggiate object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Arpeggiate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Arpeggiate obj, out Exception exception)
        {
            exception = null;
            obj = default(Arpeggiate);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Arpeggiate obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Arpeggiate Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Arpeggiate)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Arpeggiate Deserialize(Stream s)
        {
            return ((Arpeggiate)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Arpeggiate object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Arpeggiate object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Arpeggiate object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Arpeggiate obj, out Exception exception)
        {
            exception = null;
            obj = default(Arpeggiate);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Arpeggiate obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Arpeggiate LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Updown
    {
        up,
        down,
    }
    
    [DebuggerStepThrough]
    public partial class Caesura
    {
        #region Private fields
        private Abovebelow _placement;
        private Caesuravalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Caesuravalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Caesura));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Caesura object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Caesura object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Caesura object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Caesura obj, out Exception exception)
        {
            exception = null;
            obj = default(Caesura);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Caesura obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Caesura Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Caesura)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Caesura Deserialize(Stream s)
        {
            return ((Caesura)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Caesura object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Caesura object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Caesura object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Caesura obj, out Exception exception)
        {
            exception = null;
            obj = default(Caesura);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Caesura obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Caesura LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Caesuravalue
    {
        normal,
        thick,
        @short,
        curved,
        single,
        [XmlEnumAttribute("")]
        Item,
    }
    
    [DebuggerStepThrough]
    public partial class Breathmark
    {
        #region Private fields
        private Abovebelow _placement;
        private Breathmarkvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Breathmarkvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Breathmark));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Breathmark object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Breathmark object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Breathmark object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Breathmark obj, out Exception exception)
        {
            exception = null;
            obj = default(Breathmark);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Breathmark obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Breathmark Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Breathmark)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Breathmark Deserialize(Stream s)
        {
            return ((Breathmark)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Breathmark object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Breathmark object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Breathmark object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Breathmark obj, out Exception exception)
        {
            exception = null;
            obj = default(Breathmark);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Breathmark obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Breathmark LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Breathmarkvalue
    {
        [XmlEnumAttribute("")]
        Item,
        comma,
        tick,
        upbow,
        salzedo,
    }
    
    [DebuggerStepThrough]
    public partial class Emptyline
    {
        #region Private fields
        private Lineshape _lineshape;
        private Linetype _linetype;
        private Linelength _linelength;
        private decimal _dashlength;
        private decimal _spacelength;
        private Abovebelow _placement;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Lineshape Lineshape
        {
            get
            {
                return _lineshape;
            }
            set
            {
                _lineshape = value;
            }
        }
        
        public Linetype Linetype
        {
            get
            {
                return _linetype;
            }
            set
            {
                _linetype = value;
            }
        }
        
        public Linelength Linelength
        {
            get
            {
                return _linelength;
            }
            set
            {
                _linelength = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Emptyline));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Emptyline object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Emptyline object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Emptyline object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Emptyline obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyline);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Emptyline obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Emptyline Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Emptyline)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Emptyline Deserialize(Stream s)
        {
            return ((Emptyline)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Emptyline object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Emptyline object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Emptyline object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Emptyline obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyline);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Emptyline obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Emptyline LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Lineshape
    {
        straight,
        curved,
    }
    
    public enum Linelength
    {
        @short,
        medium,
        @long,
    }
    
    [DebuggerStepThrough]
    public partial class Articulations
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType4[] _itemsElementName;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType4[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Articulations));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Articulations object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Articulations object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Articulations object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Articulations obj, out Exception exception)
        {
            exception = null;
            obj = default(Articulations);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Articulations obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Articulations Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Articulations)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Articulations Deserialize(Stream s)
        {
            return ((Articulations)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Articulations object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Articulations object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Articulations object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Articulations obj, out Exception exception)
        {
            exception = null;
            obj = default(Articulations);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Articulations obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Articulations LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Emptyplacement
    {
        #region Private fields
        private Abovebelow _placement;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Emptyplacement));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Emptyplacement object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Emptyplacement object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Emptyplacement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Emptyplacement obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyplacement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Emptyplacement obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Emptyplacement Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Emptyplacement)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Emptyplacement Deserialize(Stream s)
        {
            return ((Emptyplacement)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Emptyplacement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Emptyplacement object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Emptyplacement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Emptyplacement obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyplacement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Emptyplacement obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Emptyplacement LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Strongaccent : Emptyplacement
    {
        #region Private fields
        private Updown _type;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Strongaccent()
        {
            _type = Updown.up;
        }
        
        [DefaultValue(Updown.up)]
        public Updown Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Strongaccent));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Strongaccent object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Strongaccent object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Strongaccent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Strongaccent obj, out Exception exception)
        {
            exception = null;
            obj = default(Strongaccent);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Strongaccent obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public new static Strongaccent Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Strongaccent)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Strongaccent Deserialize(Stream s)
        {
            return ((Strongaccent)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Strongaccent object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Strongaccent object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Strongaccent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Strongaccent obj, out Exception exception)
        {
            exception = null;
            obj = default(Strongaccent);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Strongaccent obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public new static Strongaccent LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Heeltoe : Emptyplacement
    {
        #region Private fields
        private Yesno _substitution;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Substitution
        {
            get
            {
                return _substitution;
            }
            set
            {
                _substitution = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Heeltoe));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Heeltoe object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Heeltoe object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Heeltoe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Heeltoe obj, out Exception exception)
        {
            exception = null;
            obj = default(Heeltoe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Heeltoe obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public new static Heeltoe Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Heeltoe)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Heeltoe Deserialize(Stream s)
        {
            return ((Heeltoe)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Heeltoe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Heeltoe object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Heeltoe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Heeltoe obj, out Exception exception)
        {
            exception = null;
            obj = default(Heeltoe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Heeltoe obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public new static Heeltoe LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Otherplacementtext
    {
        #region Private fields
        private Abovebelow _placement;
        private string _smufl;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Otherplacementtext));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Otherplacementtext object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Otherplacementtext object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Otherplacementtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Otherplacementtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherplacementtext);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Otherplacementtext obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Otherplacementtext Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Otherplacementtext)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Otherplacementtext Deserialize(Stream s)
        {
            return ((Otherplacementtext)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Otherplacementtext object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Otherplacementtext object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Otherplacementtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Otherplacementtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherplacementtext);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Otherplacementtext obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Otherplacementtext LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType4
    {
        accent,
        [XmlEnumAttribute("breath-mark")]
        breathmark,
        caesura,
        [XmlEnumAttribute("detached-legato")]
        detachedlegato,
        doit,
        falloff,
        [XmlEnumAttribute("other-articulation")]
        otherarticulation,
        plop,
        scoop,
        [XmlEnumAttribute("soft-accent")]
        softaccent,
        spiccato,
        staccatissimo,
        staccato,
        stress,
        [XmlEnumAttribute("strong-accent")]
        strongaccent,
        tenuto,
        unstress,
    }
    
    [DebuggerStepThrough]
    public partial class Harmonclosed
    {
        #region Private fields
        private Harmonclosedlocation _location;
        private Harmonclosedvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Harmonclosedlocation Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
        
        public Harmonclosedvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Harmonclosed));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Harmonclosed object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Harmonclosed object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Harmonclosed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Harmonclosed obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmonclosed);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Harmonclosed obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Harmonclosed Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Harmonclosed)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Harmonclosed Deserialize(Stream s)
        {
            return ((Harmonclosed)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Harmonclosed object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Harmonclosed object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Harmonclosed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Harmonclosed obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmonclosed);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Harmonclosed obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Harmonclosed LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Harmonclosedlocation
    {
        right,
        bottom,
        left,
        top,
    }
    
    public enum Harmonclosedvalue
    {
        yes,
        no,
        half,
    }
    
    [DebuggerStepThrough]
    public partial class Harmonmute
    {
        #region Private fields
        private Harmonclosed _harmonclosed;
        private Abovebelow _placement;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Harmonmute()
        {
            _harmonclosed = new Harmonclosed();
        }
        
        public Harmonclosed Harmonclosed
        {
            get
            {
                return _harmonclosed;
            }
            set
            {
                _harmonclosed = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Harmonmute));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Harmonmute object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Harmonmute object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Harmonmute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Harmonmute obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmonmute);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Harmonmute obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Harmonmute Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Harmonmute)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Harmonmute Deserialize(Stream s)
        {
            return ((Harmonmute)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Harmonmute object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Harmonmute object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Harmonmute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Harmonmute obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmonmute);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Harmonmute obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Harmonmute LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Handbell
    {
        #region Private fields
        private Abovebelow _placement;
        private Handbellvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Handbellvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Handbell));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Handbell object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Handbell object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Handbell object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Handbell obj, out Exception exception)
        {
            exception = null;
            obj = default(Handbell);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Handbell obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Handbell Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Handbell)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Handbell Deserialize(Stream s)
        {
            return ((Handbell)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Handbell object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Handbell object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Handbell object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Handbell obj, out Exception exception)
        {
            exception = null;
            obj = default(Handbell);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Handbell obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Handbell LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Handbellvalue
    {
        belltree,
        damp,
        echo,
        gyro,
        [XmlEnumAttribute("hand martellato")]
        handmartellato,
        [XmlEnumAttribute("mallet lift")]
        malletlift,
        [XmlEnumAttribute("mallet table")]
        mallettable,
        martellato,
        [XmlEnumAttribute("martellato lift")]
        martellatolift,
        [XmlEnumAttribute("muted martellato")]
        mutedmartellato,
        [XmlEnumAttribute("pluck lift")]
        plucklift,
        swing,
    }
    
    [DebuggerStepThrough]
    public partial class Arrow
    {
        #region Private fields
        private List<object> _items;
        private Abovebelow _placement;
        private string _smufl;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Arrow()
        {
            _items = new List<object>();
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Arrow));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Arrow object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Arrow object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Arrow object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Arrow obj, out Exception exception)
        {
            exception = null;
            obj = default(Arrow);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Arrow obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Arrow Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Arrow)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Arrow Deserialize(Stream s)
        {
            return ((Arrow)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Arrow object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Arrow object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Arrow object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Arrow obj, out Exception exception)
        {
            exception = null;
            obj = default(Arrow);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Arrow obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Arrow LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Arrowdirection
    {
        left,
        up,
        right,
        down,
        northwest,
        northeast,
        southeast,
        southwest,
        [XmlEnumAttribute("left right")]
        leftright,
        [XmlEnumAttribute("up down")]
        updown,
        [XmlEnumAttribute("northwest southeast")]
        northwestsoutheast,
        [XmlEnumAttribute("northeast southwest")]
        northeastsouthwest,
        other,
    }
    
    public enum Arrowstyle
    {
        single,
        @double,
        filled,
        hollow,
        paired,
        combined,
        other,
    }
    
    public enum Circulararrow
    {
        clockwise,
        anticlockwise,
    }
    
    [DebuggerStepThrough]
    public partial class Holeclosed
    {
        #region Private fields
        private Holeclosedlocation _location;
        private Holeclosedvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Holeclosedlocation Location
        {
            get
            {
                return _location;
            }
            set
            {
                _location = value;
            }
        }
        
        public Holeclosedvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Holeclosed));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Holeclosed object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Holeclosed object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Holeclosed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Holeclosed obj, out Exception exception)
        {
            exception = null;
            obj = default(Holeclosed);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Holeclosed obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Holeclosed Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Holeclosed)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Holeclosed Deserialize(Stream s)
        {
            return ((Holeclosed)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Holeclosed object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Holeclosed object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Holeclosed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Holeclosed obj, out Exception exception)
        {
            exception = null;
            obj = default(Holeclosed);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Holeclosed obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Holeclosed LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Holeclosedlocation
    {
        right,
        bottom,
        left,
        top,
    }
    
    public enum Holeclosedvalue
    {
        yes,
        no,
        half,
    }
    
    [DebuggerStepThrough]
    public partial class Hole
    {
        #region Private fields
        private string _holetype;
        private Holeclosed _holeclosed;
        private string _holeshape;
        private Abovebelow _placement;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Hole()
        {
            _holeclosed = new Holeclosed();
        }
        
        public string Holetype
        {
            get
            {
                return _holetype;
            }
            set
            {
                _holetype = value;
            }
        }
        
        public Holeclosed Holeclosed
        {
            get
            {
                return _holeclosed;
            }
            set
            {
                _holeclosed = value;
            }
        }
        
        public string Holeshape
        {
            get
            {
                return _holeshape;
            }
            set
            {
                _holeshape = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Hole));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Hole object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Hole object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Hole object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Hole obj, out Exception exception)
        {
            exception = null;
            obj = default(Hole);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Hole obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Hole Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Hole)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Hole Deserialize(Stream s)
        {
            return ((Hole)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Hole object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Hole object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Hole object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Hole obj, out Exception exception)
        {
            exception = null;
            obj = default(Hole);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Hole obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Hole LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Tap
    {
        #region Private fields
        private Taphand _hand;
        private Abovebelow _placement;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Taphand Hand
        {
            get
            {
                return _hand;
            }
            set
            {
                _hand = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tap));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tap object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tap object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tap obj, out Exception exception)
        {
            exception = null;
            obj = default(Tap);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tap obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tap Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tap)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tap Deserialize(Stream s)
        {
            return ((Tap)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tap object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tap object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tap object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tap obj, out Exception exception)
        {
            exception = null;
            obj = default(Tap);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tap obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tap LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Taphand
    {
        left,
        right,
    }
    
    [DebuggerStepThrough]
    public partial class Bend
    {
        #region Private fields
        private decimal _bendalter;
        private Empty _item;
        private Placementtext _withbar;
        private Bendshape _shape;
        private Yesno _accelerate;
        private decimal _beats;
        private decimal _firstbeat;
        private decimal _lastbeat;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Bend()
        {
            _withbar = new Placementtext();
            _item = new Empty();
        }
        
        public decimal Bendalter
        {
            get
            {
                return _bendalter;
            }
            set
            {
                _bendalter = value;
            }
        }
        
        public Empty Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }
        
        public Placementtext Withbar
        {
            get
            {
                return _withbar;
            }
            set
            {
                _withbar = value;
            }
        }
        
        public Bendshape Shape
        {
            get
            {
                return _shape;
            }
            set
            {
                _shape = value;
            }
        }
        
        public Yesno Accelerate
        {
            get
            {
                return _accelerate;
            }
            set
            {
                _accelerate = value;
            }
        }
        
        public decimal Beats
        {
            get
            {
                return _beats;
            }
            set
            {
                _beats = value;
            }
        }
        
        public decimal Firstbeat
        {
            get
            {
                return _firstbeat;
            }
            set
            {
                _firstbeat = value;
            }
        }
        
        public decimal Lastbeat
        {
            get
            {
                return _lastbeat;
            }
            set
            {
                _lastbeat = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Bend));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Bend object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Bend object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Bend object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Bend obj, out Exception exception)
        {
            exception = null;
            obj = default(Bend);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Bend obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Bend Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Bend)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Bend Deserialize(Stream s)
        {
            return ((Bend)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Bend object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Bend object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Bend object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Bend obj, out Exception exception)
        {
            exception = null;
            obj = default(Bend);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Bend obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Bend LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Placementtext
    {
        #region Private fields
        private Abovebelow _placement;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Placementtext));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Placementtext object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Placementtext object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Placementtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Placementtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Placementtext);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Placementtext obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Placementtext Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Placementtext)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Placementtext Deserialize(Stream s)
        {
            return ((Placementtext)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Placementtext object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Placementtext object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Placementtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Placementtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Placementtext);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Placementtext obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Placementtext LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Bendshape
    {
        angled,
        curved,
    }
    
    [DebuggerStepThrough]
    public partial class Hammeronpulloff
    {
        #region Private fields
        private Startstop _type;
        private string _number;
        private Abovebelow _placement;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Hammeronpulloff()
        {
            _number = "1";
        }
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Hammeronpulloff));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Hammeronpulloff object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Hammeronpulloff object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Hammeronpulloff object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Hammeronpulloff obj, out Exception exception)
        {
            exception = null;
            obj = default(Hammeronpulloff);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Hammeronpulloff obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Hammeronpulloff Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Hammeronpulloff)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Hammeronpulloff Deserialize(Stream s)
        {
            return ((Hammeronpulloff)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Hammeronpulloff object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Hammeronpulloff object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Hammeronpulloff object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Hammeronpulloff obj, out Exception exception)
        {
            exception = null;
            obj = default(Hammeronpulloff);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Hammeronpulloff obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Hammeronpulloff LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Emptyplacementsmufl
    {
        #region Private fields
        private Abovebelow _placement;
        private string _smufl;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Emptyplacementsmufl));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Emptyplacementsmufl object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Emptyplacementsmufl object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Emptyplacementsmufl object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Emptyplacementsmufl obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyplacementsmufl);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Emptyplacementsmufl obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Emptyplacementsmufl Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Emptyplacementsmufl)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Emptyplacementsmufl Deserialize(Stream s)
        {
            return ((Emptyplacementsmufl)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Emptyplacementsmufl object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Emptyplacementsmufl object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Emptyplacementsmufl object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Emptyplacementsmufl obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyplacementsmufl);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Emptyplacementsmufl obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Emptyplacementsmufl LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Harmonic
    {
        #region Private fields
        private Empty _item;
        private ItemChoiceType _itemElementName;
        private Empty _item1;
        private Item1ChoiceType _item1ElementName;
        private Yesno _printobject;
        private Abovebelow _placement;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Empty Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }
        
        public ItemChoiceType ItemElementName
        {
            get
            {
                return _itemElementName;
            }
            set
            {
                _itemElementName = value;
            }
        }
        
        public Empty Item1
        {
            get
            {
                return _item1;
            }
            set
            {
                _item1 = value;
            }
        }
        
        public Item1ChoiceType Item1ElementName
        {
            get
            {
                return _item1ElementName;
            }
            set
            {
                _item1ElementName = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Harmonic));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Harmonic object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Harmonic object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Harmonic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Harmonic obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmonic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Harmonic obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Harmonic Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Harmonic)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Harmonic Deserialize(Stream s)
        {
            return ((Harmonic)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Harmonic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Harmonic object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Harmonic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Harmonic obj, out Exception exception)
        {
            exception = null;
            obj = default(Harmonic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Harmonic obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Harmonic LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemChoiceType
    {
        artificial,
        natural,
    }
    
    public enum Item1ChoiceType
    {
        [XmlEnumAttribute("base-pitch")]
        basepitch,
        [XmlEnumAttribute("sounding-pitch")]
        soundingpitch,
        [XmlEnumAttribute("touching-pitch")]
        touchingpitch,
    }
    
    [DebuggerStepThrough]
    public partial class Technical
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType3[] _itemsElementName;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType3[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Technical));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Technical object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Technical object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Technical object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Technical obj, out Exception exception)
        {
            exception = null;
            obj = default(Technical);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Technical obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Technical Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Technical)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Technical Deserialize(Stream s)
        {
            return ((Technical)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Technical object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Technical object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Technical object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Technical obj, out Exception exception)
        {
            exception = null;
            obj = default(Technical);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Technical obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Technical LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType3
    {
        arrow,
        bend,
        [XmlEnumAttribute("brass-bend")]
        brassbend,
        [XmlEnumAttribute("double-tongue")]
        doubletongue,
        [XmlEnumAttribute("down-bow")]
        downbow,
        fingering,
        fingernails,
        flip,
        fret,
        golpe,
        [XmlEnumAttribute("half-muted")]
        halfmuted,
        [XmlEnumAttribute("hammer-on")]
        hammeron,
        handbell,
        [XmlEnumAttribute("harmon-mute")]
        harmonmute,
        harmonic,
        heel,
        hole,
        open,
        [XmlEnumAttribute("open-string")]
        openstring,
        [XmlEnumAttribute("other-technical")]
        othertechnical,
        pluck,
        [XmlEnumAttribute("pull-off")]
        pulloff,
        smear,
        [XmlEnumAttribute("snap-pizzicato")]
        snappizzicato,
        stopped,
        @string,
        tap,
        [XmlEnumAttribute("thumb-position")]
        thumbposition,
        toe,
        [XmlEnumAttribute("triple-tongue")]
        tripletongue,
        [XmlEnumAttribute("up-bow")]
        upbow,
    }
    
    [DebuggerStepThrough]
    public partial class Accidentalmark
    {
        #region Private fields
        private Yesno _parentheses;
        private Yesno _bracket;
        private Symbolsize _size;
        private Abovebelow _placement;
        private string _smufl;
        private string _id;
        private Accidentalvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Parentheses
        {
            get
            {
                return _parentheses;
            }
            set
            {
                _parentheses = value;
            }
        }
        
        public Yesno Bracket
        {
            get
            {
                return _bracket;
            }
            set
            {
                _bracket = value;
            }
        }
        
        public Symbolsize Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public Accidentalvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Accidentalmark));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Accidentalmark object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Accidentalmark object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Accidentalmark object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Accidentalmark obj, out Exception exception)
        {
            exception = null;
            obj = default(Accidentalmark);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Accidentalmark obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Accidentalmark Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Accidentalmark)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Accidentalmark Deserialize(Stream s)
        {
            return ((Accidentalmark)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Accidentalmark object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Accidentalmark object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Accidentalmark object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Accidentalmark obj, out Exception exception)
        {
            exception = null;
            obj = default(Accidentalmark);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Accidentalmark obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Accidentalmark LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Tremolo
    {
        #region Private fields
        private Tremolotype _type;
        private Abovebelow _placement;
        private string _smufl;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Tremolo()
        {
            _type = Tremolotype.single;
        }
        
        [DefaultValue(Tremolotype.single)]
        public Tremolotype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tremolo));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tremolo object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tremolo object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tremolo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tremolo obj, out Exception exception)
        {
            exception = null;
            obj = default(Tremolo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tremolo obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tremolo Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tremolo)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tremolo Deserialize(Stream s)
        {
            return ((Tremolo)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tremolo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tremolo object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tremolo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tremolo obj, out Exception exception)
        {
            exception = null;
            obj = default(Tremolo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tremolo obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tremolo LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Tremolotype
    {
        start,
        stop,
        single,
        unmeasured,
    }
    
    [DebuggerStepThrough]
    public partial class Horizontalturn
    {
        #region Private fields
        private Abovebelow _placement;
        private Startnote _startnote;
        private Trillstep _trillstep;
        private Twonoteturn _twonoteturn;
        private Yesno _accelerate;
        private decimal _beats;
        private decimal _secondbeat;
        private decimal _lastbeat;
        private Yesno _slash;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Startnote Startnote
        {
            get
            {
                return _startnote;
            }
            set
            {
                _startnote = value;
            }
        }
        
        public Trillstep Trillstep
        {
            get
            {
                return _trillstep;
            }
            set
            {
                _trillstep = value;
            }
        }
        
        public Twonoteturn Twonoteturn
        {
            get
            {
                return _twonoteturn;
            }
            set
            {
                _twonoteturn = value;
            }
        }
        
        public Yesno Accelerate
        {
            get
            {
                return _accelerate;
            }
            set
            {
                _accelerate = value;
            }
        }
        
        public decimal Beats
        {
            get
            {
                return _beats;
            }
            set
            {
                _beats = value;
            }
        }
        
        public decimal Secondbeat
        {
            get
            {
                return _secondbeat;
            }
            set
            {
                _secondbeat = value;
            }
        }
        
        public decimal Lastbeat
        {
            get
            {
                return _lastbeat;
            }
            set
            {
                _lastbeat = value;
            }
        }
        
        public Yesno Slash
        {
            get
            {
                return _slash;
            }
            set
            {
                _slash = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Horizontalturn));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Horizontalturn object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Horizontalturn object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Horizontalturn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Horizontalturn obj, out Exception exception)
        {
            exception = null;
            obj = default(Horizontalturn);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Horizontalturn obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Horizontalturn Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Horizontalturn)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Horizontalturn Deserialize(Stream s)
        {
            return ((Horizontalturn)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Horizontalturn object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Horizontalturn object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Horizontalturn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Horizontalturn obj, out Exception exception)
        {
            exception = null;
            obj = default(Horizontalturn);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Horizontalturn obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Horizontalturn LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Emptytrillsound
    {
        #region Private fields
        private Abovebelow _placement;
        private Startnote _startnote;
        private Trillstep _trillstep;
        private Twonoteturn _twonoteturn;
        private Yesno _accelerate;
        private decimal _beats;
        private decimal _secondbeat;
        private decimal _lastbeat;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Startnote Startnote
        {
            get
            {
                return _startnote;
            }
            set
            {
                _startnote = value;
            }
        }
        
        public Trillstep Trillstep
        {
            get
            {
                return _trillstep;
            }
            set
            {
                _trillstep = value;
            }
        }
        
        public Twonoteturn Twonoteturn
        {
            get
            {
                return _twonoteturn;
            }
            set
            {
                _twonoteturn = value;
            }
        }
        
        public Yesno Accelerate
        {
            get
            {
                return _accelerate;
            }
            set
            {
                _accelerate = value;
            }
        }
        
        public decimal Beats
        {
            get
            {
                return _beats;
            }
            set
            {
                _beats = value;
            }
        }
        
        public decimal Secondbeat
        {
            get
            {
                return _secondbeat;
            }
            set
            {
                _secondbeat = value;
            }
        }
        
        public decimal Lastbeat
        {
            get
            {
                return _lastbeat;
            }
            set
            {
                _lastbeat = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Emptytrillsound));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Emptytrillsound object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Emptytrillsound object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Emptytrillsound object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Emptytrillsound obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptytrillsound);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Emptytrillsound obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Emptytrillsound Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Emptytrillsound)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Emptytrillsound Deserialize(Stream s)
        {
            return ((Emptytrillsound)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Emptytrillsound object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Emptytrillsound object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Emptytrillsound object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Emptytrillsound obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptytrillsound);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Emptytrillsound obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Emptytrillsound LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Mordent : Emptytrillsound
    {
        #region Private fields
        private Yesno _long;
        private Abovebelow _approach;
        private Abovebelow _departure;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Long
        {
            get
            {
                return _long;
            }
            set
            {
                _long = value;
            }
        }
        
        public Abovebelow Approach
        {
            get
            {
                return _approach;
            }
            set
            {
                _approach = value;
            }
        }
        
        public Abovebelow Departure
        {
            get
            {
                return _departure;
            }
            set
            {
                _departure = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Mordent));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Mordent object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Mordent object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Mordent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Mordent obj, out Exception exception)
        {
            exception = null;
            obj = default(Mordent);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Mordent obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public new static Mordent Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Mordent)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Mordent Deserialize(Stream s)
        {
            return ((Mordent)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Mordent object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Mordent object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Mordent object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Mordent obj, out Exception exception)
        {
            exception = null;
            obj = default(Mordent);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Mordent obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public new static Mordent LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Ornaments
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType2[] _itemsElementName;
        private List<Accidentalmark> _accidentalmark;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Ornaments()
        {
            _accidentalmark = new List<Accidentalmark>();
        }
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType2[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public List<Accidentalmark> Accidentalmark
        {
            get
            {
                return _accidentalmark;
            }
            set
            {
                _accidentalmark = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Ornaments));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Ornaments object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Ornaments object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Ornaments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Ornaments obj, out Exception exception)
        {
            exception = null;
            obj = default(Ornaments);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Ornaments obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Ornaments Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Ornaments)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Ornaments Deserialize(Stream s)
        {
            return ((Ornaments)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Ornaments object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Ornaments object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Ornaments object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Ornaments obj, out Exception exception)
        {
            exception = null;
            obj = default(Ornaments);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Ornaments obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Ornaments LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType2
    {
        [XmlEnumAttribute("delayed-inverted-turn")]
        delayedinvertedturn,
        [XmlEnumAttribute("delayed-turn")]
        delayedturn,
        haydn,
        [XmlEnumAttribute("inverted-mordent")]
        invertedmordent,
        [XmlEnumAttribute("inverted-turn")]
        invertedturn,
        [XmlEnumAttribute("inverted-vertical-turn")]
        invertedverticalturn,
        mordent,
        [XmlEnumAttribute("other-ornament")]
        otherornament,
        schleifer,
        shake,
        tremolo,
        [XmlEnumAttribute("trill-mark")]
        trillmark,
        turn,
        [XmlEnumAttribute("vertical-turn")]
        verticalturn,
        [XmlEnumAttribute("wavy-line")]
        wavyline,
    }
    
    [DebuggerStepThrough]
    public partial class Slide
    {
        #region Private fields
        private Startstop _type;
        private string _number;
        private Linetype _linetype;
        private decimal _dashlength;
        private decimal _spacelength;
        private Yesno _accelerate;
        private decimal _beats;
        private decimal _firstbeat;
        private decimal _lastbeat;
        private string _id;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Slide()
        {
            _number = "1";
        }
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Linetype Linetype
        {
            get
            {
                return _linetype;
            }
            set
            {
                _linetype = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public Yesno Accelerate
        {
            get
            {
                return _accelerate;
            }
            set
            {
                _accelerate = value;
            }
        }
        
        public decimal Beats
        {
            get
            {
                return _beats;
            }
            set
            {
                _beats = value;
            }
        }
        
        public decimal Firstbeat
        {
            get
            {
                return _firstbeat;
            }
            set
            {
                _firstbeat = value;
            }
        }
        
        public decimal Lastbeat
        {
            get
            {
                return _lastbeat;
            }
            set
            {
                _lastbeat = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Slide));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Slide object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Slide object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Slide object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Slide obj, out Exception exception)
        {
            exception = null;
            obj = default(Slide);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Slide obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Slide Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Slide)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Slide Deserialize(Stream s)
        {
            return ((Slide)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Slide object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Slide object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Slide object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Slide obj, out Exception exception)
        {
            exception = null;
            obj = default(Slide);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Slide obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Slide LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Glissando
    {
        #region Private fields
        private Startstop _type;
        private string _number;
        private Linetype _linetype;
        private decimal _dashlength;
        private decimal _spacelength;
        private string _id;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Glissando()
        {
            _number = "1";
        }
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Linetype Linetype
        {
            get
            {
                return _linetype;
            }
            set
            {
                _linetype = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Glissando));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Glissando object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Glissando object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Glissando object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Glissando obj, out Exception exception)
        {
            exception = null;
            obj = default(Glissando);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Glissando obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Glissando Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Glissando)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Glissando Deserialize(Stream s)
        {
            return ((Glissando)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Glissando object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Glissando object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Glissando object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Glissando obj, out Exception exception)
        {
            exception = null;
            obj = default(Glissando);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Glissando obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Glissando LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Tupletdot
    {
        #region Private fields
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tupletdot));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tupletdot object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tupletdot object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tupletdot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tupletdot obj, out Exception exception)
        {
            exception = null;
            obj = default(Tupletdot);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tupletdot obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tupletdot Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tupletdot)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tupletdot Deserialize(Stream s)
        {
            return ((Tupletdot)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tupletdot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tupletdot object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tupletdot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tupletdot obj, out Exception exception)
        {
            exception = null;
            obj = default(Tupletdot);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tupletdot obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tupletdot LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Tuplettype
    {
        #region Private fields
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private Notetypevalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Notetypevalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tuplettype));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tuplettype object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tuplettype object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tuplettype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tuplettype obj, out Exception exception)
        {
            exception = null;
            obj = default(Tuplettype);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tuplettype obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tuplettype Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tuplettype)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tuplettype Deserialize(Stream s)
        {
            return ((Tuplettype)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tuplettype object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tuplettype object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tuplettype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tuplettype obj, out Exception exception)
        {
            exception = null;
            obj = default(Tuplettype);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tuplettype obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tuplettype LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Tupletnumber
    {
        #region Private fields
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tupletnumber));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tupletnumber object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tupletnumber object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tupletnumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tupletnumber obj, out Exception exception)
        {
            exception = null;
            obj = default(Tupletnumber);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tupletnumber obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tupletnumber Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tupletnumber)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tupletnumber Deserialize(Stream s)
        {
            return ((Tupletnumber)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tupletnumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tupletnumber object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tupletnumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tupletnumber obj, out Exception exception)
        {
            exception = null;
            obj = default(Tupletnumber);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tupletnumber obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tupletnumber LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Tupletportion
    {
        #region Private fields
        private Tupletnumber _tupletnumber;
        private Tuplettype _tuplettype;
        private List<Tupletdot> _tupletdot;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Tupletportion()
        {
            _tupletdot = new List<Tupletdot>();
            _tuplettype = new Tuplettype();
            _tupletnumber = new Tupletnumber();
        }
        
        public Tupletnumber Tupletnumber
        {
            get
            {
                return _tupletnumber;
            }
            set
            {
                _tupletnumber = value;
            }
        }
        
        public Tuplettype Tuplettype
        {
            get
            {
                return _tuplettype;
            }
            set
            {
                _tuplettype = value;
            }
        }
        
        public List<Tupletdot> Tupletdot
        {
            get
            {
                return _tupletdot;
            }
            set
            {
                _tupletdot = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tupletportion));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tupletportion object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tupletportion object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tupletportion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tupletportion obj, out Exception exception)
        {
            exception = null;
            obj = default(Tupletportion);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tupletportion obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tupletportion Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tupletportion)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tupletportion Deserialize(Stream s)
        {
            return ((Tupletportion)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tupletportion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tupletportion object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tupletportion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tupletportion obj, out Exception exception)
        {
            exception = null;
            obj = default(Tupletportion);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tupletportion obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tupletportion LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Tuplet
    {
        #region Private fields
        private Tupletportion _tupletactual;
        private Tupletportion _tupletnormal;
        private Startstop _type;
        private string _number;
        private Yesno _bracket;
        private Showtuplet _shownumber;
        private Showtuplet _showtype;
        private Lineshape _lineshape;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private Abovebelow _placement;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Tuplet()
        {
            _tupletnormal = new Tupletportion();
            _tupletactual = new Tupletportion();
        }
        
        public Tupletportion Tupletactual
        {
            get
            {
                return _tupletactual;
            }
            set
            {
                _tupletactual = value;
            }
        }
        
        public Tupletportion Tupletnormal
        {
            get
            {
                return _tupletnormal;
            }
            set
            {
                _tupletnormal = value;
            }
        }
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Yesno Bracket
        {
            get
            {
                return _bracket;
            }
            set
            {
                _bracket = value;
            }
        }
        
        public Showtuplet Shownumber
        {
            get
            {
                return _shownumber;
            }
            set
            {
                _shownumber = value;
            }
        }
        
        public Showtuplet Showtype
        {
            get
            {
                return _showtype;
            }
            set
            {
                _showtype = value;
            }
        }
        
        public Lineshape Lineshape
        {
            get
            {
                return _lineshape;
            }
            set
            {
                _lineshape = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tuplet));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tuplet object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tuplet object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tuplet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tuplet obj, out Exception exception)
        {
            exception = null;
            obj = default(Tuplet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tuplet obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tuplet Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tuplet)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tuplet Deserialize(Stream s)
        {
            return ((Tuplet)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tuplet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tuplet object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tuplet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tuplet obj, out Exception exception)
        {
            exception = null;
            obj = default(Tuplet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tuplet obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tuplet LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Slur
    {
        #region Private fields
        private Startstopcontinue _type;
        private string _number;
        private Linetype _linetype;
        private decimal _dashlength;
        private decimal _spacelength;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private Abovebelow _placement;
        private Overunder _orientation;
        private decimal _bezierx;
        private decimal _beziery;
        private decimal _bezierx2;
        private decimal _beziery2;
        private decimal _bezieroffset;
        private decimal _bezieroffset2;
        private string _color;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Slur()
        {
            _number = "1";
        }
        
        public Startstopcontinue Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Linetype Linetype
        {
            get
            {
                return _linetype;
            }
            set
            {
                _linetype = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Overunder Orientation
        {
            get
            {
                return _orientation;
            }
            set
            {
                _orientation = value;
            }
        }
        
        public decimal Bezierx
        {
            get
            {
                return _bezierx;
            }
            set
            {
                _bezierx = value;
            }
        }
        
        public decimal Beziery
        {
            get
            {
                return _beziery;
            }
            set
            {
                _beziery = value;
            }
        }
        
        public decimal Bezierx2
        {
            get
            {
                return _bezierx2;
            }
            set
            {
                _bezierx2 = value;
            }
        }
        
        public decimal Beziery2
        {
            get
            {
                return _beziery2;
            }
            set
            {
                _beziery2 = value;
            }
        }
        
        public decimal Bezieroffset
        {
            get
            {
                return _bezieroffset;
            }
            set
            {
                _bezieroffset = value;
            }
        }
        
        public decimal Bezieroffset2
        {
            get
            {
                return _bezieroffset2;
            }
            set
            {
                _bezieroffset2 = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Slur));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Slur object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Slur object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Slur object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Slur obj, out Exception exception)
        {
            exception = null;
            obj = default(Slur);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Slur obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Slur Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Slur)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Slur Deserialize(Stream s)
        {
            return ((Slur)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Slur object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Slur object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Slur object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Slur obj, out Exception exception)
        {
            exception = null;
            obj = default(Slur);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Slur obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Slur LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Overunder
    {
        over,
        under,
    }
    
    [DebuggerStepThrough]
    public partial class Tied
    {
        #region Private fields
        private Tiedtype _type;
        private string _number;
        private Linetype _linetype;
        private decimal _dashlength;
        private decimal _spacelength;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private Abovebelow _placement;
        private Overunder _orientation;
        private decimal _bezierx;
        private decimal _beziery;
        private decimal _bezierx2;
        private decimal _beziery2;
        private decimal _bezieroffset;
        private decimal _bezieroffset2;
        private string _color;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Tiedtype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Linetype Linetype
        {
            get
            {
                return _linetype;
            }
            set
            {
                _linetype = value;
            }
        }
        
        public decimal Dashlength
        {
            get
            {
                return _dashlength;
            }
            set
            {
                _dashlength = value;
            }
        }
        
        public decimal Spacelength
        {
            get
            {
                return _spacelength;
            }
            set
            {
                _spacelength = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public Abovebelow Placement
        {
            get
            {
                return _placement;
            }
            set
            {
                _placement = value;
            }
        }
        
        public Overunder Orientation
        {
            get
            {
                return _orientation;
            }
            set
            {
                _orientation = value;
            }
        }
        
        public decimal Bezierx
        {
            get
            {
                return _bezierx;
            }
            set
            {
                _bezierx = value;
            }
        }
        
        public decimal Beziery
        {
            get
            {
                return _beziery;
            }
            set
            {
                _beziery = value;
            }
        }
        
        public decimal Bezierx2
        {
            get
            {
                return _bezierx2;
            }
            set
            {
                _bezierx2 = value;
            }
        }
        
        public decimal Beziery2
        {
            get
            {
                return _beziery2;
            }
            set
            {
                _beziery2 = value;
            }
        }
        
        public decimal Bezieroffset
        {
            get
            {
                return _bezieroffset;
            }
            set
            {
                _bezieroffset = value;
            }
        }
        
        public decimal Bezieroffset2
        {
            get
            {
                return _bezieroffset2;
            }
            set
            {
                _bezieroffset2 = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tied));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tied object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tied object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tied object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tied obj, out Exception exception)
        {
            exception = null;
            obj = default(Tied);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tied obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tied Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tied)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tied Deserialize(Stream s)
        {
            return ((Tied)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tied object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tied object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tied object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tied obj, out Exception exception)
        {
            exception = null;
            obj = default(Tied);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tied obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tied LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Tiedtype
    {
        start,
        stop,
        @continue,
        [XmlEnumAttribute("let-ring")]
        letring,
    }
    
    [DebuggerStepThrough]
    public partial class Notations
    {
        #region Private fields
        private Formattedtext _footnote;
        private Level _level;
        private List<object> _items;
        private Yesno _printobject;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Notations()
        {
            _items = new List<object>();
            _level = new Level();
            _footnote = new Formattedtext();
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public Yesno Printobject
        {
            get
            {
                return _printobject;
            }
            set
            {
                _printobject = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Notations));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Notations object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Notations object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Notations object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Notations obj, out Exception exception)
        {
            exception = null;
            obj = default(Notations);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Notations obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Notations Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Notations)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Notations Deserialize(Stream s)
        {
            return ((Notations)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Notations object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Notations object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Notations object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Notations obj, out Exception exception)
        {
            exception = null;
            obj = default(Notations);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Notations obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Notations LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Beam
    {
        #region Private fields
        private string _number;
        private Yesno _repeater;
        private Fan _fan;
        private string _color;
        private string _id;
        private Beamvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Beam()
        {
            _number = "1";
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public Yesno Repeater
        {
            get
            {
                return _repeater;
            }
            set
            {
                _repeater = value;
            }
        }
        
        public Fan Fan
        {
            get
            {
                return _fan;
            }
            set
            {
                _fan = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public Beamvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Beam));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Beam object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Beam object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Beam object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Beam obj, out Exception exception)
        {
            exception = null;
            obj = default(Beam);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Beam obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Beam Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Beam)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Beam Deserialize(Stream s)
        {
            return ((Beam)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Beam object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Beam object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Beam object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Beam obj, out Exception exception)
        {
            exception = null;
            obj = default(Beam);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Beam obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Beam LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Fan
    {
        accel,
        rit,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Noteheadtext
    {
        #region Private fields
        private List<object> _items;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Noteheadtext()
        {
            _items = new List<object>();
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Noteheadtext));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Noteheadtext object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Noteheadtext object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Noteheadtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Noteheadtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Noteheadtext);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Noteheadtext obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Noteheadtext Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Noteheadtext)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Noteheadtext Deserialize(Stream s)
        {
            return ((Noteheadtext)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Noteheadtext object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Noteheadtext object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Noteheadtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Noteheadtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Noteheadtext);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Noteheadtext obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Noteheadtext LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Notehead
    {
        #region Private fields
        private Yesno _filled;
        private Yesno _parentheses;
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private string _smufl;
        private Noteheadvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Filled
        {
            get
            {
                return _filled;
            }
            set
            {
                _filled = value;
            }
        }
        
        public Yesno Parentheses
        {
            get
            {
                return _parentheses;
            }
            set
            {
                _parentheses = value;
            }
        }
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Noteheadvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Notehead));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Notehead object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Notehead object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Notehead object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Notehead obj, out Exception exception)
        {
            exception = null;
            obj = default(Notehead);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Notehead obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Notehead Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Notehead)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Notehead Deserialize(Stream s)
        {
            return ((Notehead)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Notehead object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Notehead object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Notehead object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Notehead obj, out Exception exception)
        {
            exception = null;
            obj = default(Notehead);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Notehead obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Notehead LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Noteheadvalue
    {
        slash,
        triangle,
        diamond,
        square,
        cross,
        x,
        [XmlEnumAttribute("circle-x")]
        circlex,
        [XmlEnumAttribute("inverted triangle")]
        invertedtriangle,
        [XmlEnumAttribute("arrow down")]
        arrowdown,
        [XmlEnumAttribute("arrow up")]
        arrowup,
        circled,
        slashed,
        [XmlEnumAttribute("back slashed")]
        backslashed,
        normal,
        cluster,
        [XmlEnumAttribute("circle dot")]
        circledot,
        [XmlEnumAttribute("left triangle")]
        lefttriangle,
        rectangle,
        none,
        @do,
        re,
        mi,
        fa,
        [XmlEnumAttribute("fa up")]
        faup,
        so,
        la,
        ti,
        other,
    }
    
    [DebuggerStepThrough]
    public partial class Stem
    {
        #region Private fields
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _color;
        private Stemvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Stemvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Stem));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Stem object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Stem object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Stem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Stem obj, out Exception exception)
        {
            exception = null;
            obj = default(Stem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Stem obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Stem Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Stem)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Stem Deserialize(Stream s)
        {
            return ((Stem)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Stem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Stem object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Stem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Stem obj, out Exception exception)
        {
            exception = null;
            obj = default(Stem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Stem obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Stem LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Stemvalue
    {
        down,
        up,
        @double,
        none,
    }
    
    [DebuggerStepThrough]
    public partial class Accidental
    {
        #region Private fields
        private Yesno _cautionary;
        private Yesno _editorial;
        private Yesno _parentheses;
        private Yesno _bracket;
        private Symbolsize _size;
        private string _smufl;
        private Accidentalvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Cautionary
        {
            get
            {
                return _cautionary;
            }
            set
            {
                _cautionary = value;
            }
        }
        
        public Yesno Editorial
        {
            get
            {
                return _editorial;
            }
            set
            {
                _editorial = value;
            }
        }
        
        public Yesno Parentheses
        {
            get
            {
                return _parentheses;
            }
            set
            {
                _parentheses = value;
            }
        }
        
        public Yesno Bracket
        {
            get
            {
                return _bracket;
            }
            set
            {
                _bracket = value;
            }
        }
        
        public Symbolsize Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
        
        public string Smufl
        {
            get
            {
                return _smufl;
            }
            set
            {
                _smufl = value;
            }
        }
        
        public Accidentalvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Accidental));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Accidental object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Accidental object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Accidental object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Accidental obj, out Exception exception)
        {
            exception = null;
            obj = default(Accidental);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Accidental obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Accidental Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Accidental)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Accidental Deserialize(Stream s)
        {
            return ((Accidental)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Accidental object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Accidental object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Accidental object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Accidental obj, out Exception exception)
        {
            exception = null;
            obj = default(Accidental);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Accidental obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Accidental LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Notetype
    {
        #region Private fields
        private Symbolsize _size;
        private Notetypevalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Symbolsize Size
        {
            get
            {
                return _size;
            }
            set
            {
                _size = value;
            }
        }
        
        public Notetypevalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Notetype));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Notetype object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Notetype object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Notetype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Notetype obj, out Exception exception)
        {
            exception = null;
            obj = default(Notetype);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Notetype obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Notetype Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Notetype)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Notetype Deserialize(Stream s)
        {
            return ((Notetype)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Notetype object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Notetype object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Notetype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Notetype obj, out Exception exception)
        {
            exception = null;
            obj = default(Notetype);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Notetype obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Notetype LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Instrument
    {
        #region Private fields
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Instrument));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Instrument object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Instrument object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Instrument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Instrument obj, out Exception exception)
        {
            exception = null;
            obj = default(Instrument);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Instrument obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Instrument Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Instrument)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Instrument Deserialize(Stream s)
        {
            return ((Instrument)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Instrument object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Instrument object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Instrument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Instrument obj, out Exception exception)
        {
            exception = null;
            obj = default(Instrument);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Instrument obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Instrument LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Tie
    {
        #region Private fields
        private Startstop _type;
        private string _timeonly;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Timeonly
        {
            get
            {
                return _timeonly;
            }
            set
            {
                _timeonly = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Tie));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Tie object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Tie object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Tie object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Tie obj, out Exception exception)
        {
            exception = null;
            obj = default(Tie);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Tie obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Tie Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Tie)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Tie Deserialize(Stream s)
        {
            return ((Tie)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Tie object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Tie object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Tie object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Tie obj, out Exception exception)
        {
            exception = null;
            obj = default(Tie);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Tie obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Tie LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Rest
    {
        #region Private fields
        private Step _displaystep;
        private string _displayoctave;
        private Yesno _measure;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Step Displaystep
        {
            get
            {
                return _displaystep;
            }
            set
            {
                _displaystep = value;
            }
        }
        
        public string Displayoctave
        {
            get
            {
                return _displayoctave;
            }
            set
            {
                _displayoctave = value;
            }
        }
        
        public Yesno Measure
        {
            get
            {
                return _measure;
            }
            set
            {
                _measure = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Rest));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Rest object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Rest object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Rest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Rest obj, out Exception exception)
        {
            exception = null;
            obj = default(Rest);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Rest obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Rest Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Rest)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Rest Deserialize(Stream s)
        {
            return ((Rest)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Rest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Rest object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Rest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Rest obj, out Exception exception)
        {
            exception = null;
            obj = default(Rest);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Rest obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Rest LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Unpitched
    {
        #region Private fields
        private Step _displaystep;
        private string _displayoctave;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Step Displaystep
        {
            get
            {
                return _displaystep;
            }
            set
            {
                _displaystep = value;
            }
        }
        
        public string Displayoctave
        {
            get
            {
                return _displayoctave;
            }
            set
            {
                _displayoctave = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Unpitched));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Unpitched object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Unpitched object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Unpitched object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Unpitched obj, out Exception exception)
        {
            exception = null;
            obj = default(Unpitched);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Unpitched obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Unpitched Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Unpitched)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Unpitched Deserialize(Stream s)
        {
            return ((Unpitched)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Unpitched object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Unpitched object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Unpitched object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Unpitched obj, out Exception exception)
        {
            exception = null;
            obj = default(Unpitched);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Unpitched obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Unpitched LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Pitch
    {
        #region Private fields
        private Step _step;
        private decimal _alter;
        private string _octave;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Step Step
        {
            get
            {
                return _step;
            }
            set
            {
                _step = value;
            }
        }
        
        public decimal Alter
        {
            get
            {
                return _alter;
            }
            set
            {
                _alter = value;
            }
        }
        
        public string Octave
        {
            get
            {
                return _octave;
            }
            set
            {
                _octave = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Pitch));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Pitch object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Pitch object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Pitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Pitch obj, out Exception exception)
        {
            exception = null;
            obj = default(Pitch);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Pitch obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Pitch Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Pitch)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Pitch Deserialize(Stream s)
        {
            return ((Pitch)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Pitch object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Pitch object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Pitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Pitch obj, out Exception exception)
        {
            exception = null;
            obj = default(Pitch);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Pitch obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Pitch LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Grace
    {
        #region Private fields
        private decimal _stealtimeprevious;
        private decimal _stealtimefollowing;
        private decimal _maketime;
        private Yesno _slash;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Stealtimeprevious
        {
            get
            {
                return _stealtimeprevious;
            }
            set
            {
                _stealtimeprevious = value;
            }
        }
        
        public decimal Stealtimefollowing
        {
            get
            {
                return _stealtimefollowing;
            }
            set
            {
                _stealtimefollowing = value;
            }
        }
        
        public decimal Maketime
        {
            get
            {
                return _maketime;
            }
            set
            {
                _maketime = value;
            }
        }
        
        public Yesno Slash
        {
            get
            {
                return _slash;
            }
            set
            {
                _slash = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Grace));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Grace object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Grace object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Grace object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Grace obj, out Exception exception)
        {
            exception = null;
            obj = default(Grace);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Grace obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Grace Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Grace)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Grace Deserialize(Stream s)
        {
            return ((Grace)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Grace object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Grace object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Grace object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Grace obj, out Exception exception)
        {
            exception = null;
            obj = default(Grace);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Grace obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Grace LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Note
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType1[] _itemsElementName;
        private List<Instrument> _instrument;
        private Formattedtext _footnote;
        private Level _level;
        private string _voice;
        private Notetype _type;
        private List<Emptyplacement> _dot;
        private Accidental _accidental;
        private Timemodification _timemodification;
        private Stem _stem;
        private Notehead _notehead;
        private Noteheadtext _noteheadtext;
        private string _staff;
        private List<Beam> _beam;
        private List<Notations> _notations;
        private List<Lyric> _lyric;
        private Play _play;
        private object[] _listen;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private string _color;
        private Yesno _printdot;
        private Yesno _printlyric;
        private Yesno _printleger;
        private decimal _dynamics;
        private decimal _enddynamics;
        private decimal _attack;
        private decimal _release;
        private string _timeonly;
        private Yesno _pizzicato;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Note()
        {
            _play = new Play();
            _lyric = new List<Lyric>();
            _notations = new List<Notations>();
            _beam = new List<Beam>();
            _noteheadtext = new Noteheadtext();
            _notehead = new Notehead();
            _stem = new Stem();
            _timemodification = new Timemodification();
            _accidental = new Accidental();
            _dot = new List<Emptyplacement>();
            _type = new Notetype();
            _level = new Level();
            _footnote = new Formattedtext();
            _instrument = new List<Instrument>();
        }
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType1[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        public List<Instrument> Instrument
        {
            get
            {
                return _instrument;
            }
            set
            {
                _instrument = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public string Voice
        {
            get
            {
                return _voice;
            }
            set
            {
                _voice = value;
            }
        }
        
        public Notetype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public List<Emptyplacement> Dot
        {
            get
            {
                return _dot;
            }
            set
            {
                _dot = value;
            }
        }
        
        public Accidental Accidental
        {
            get
            {
                return _accidental;
            }
            set
            {
                _accidental = value;
            }
        }
        
        public Timemodification Timemodification
        {
            get
            {
                return _timemodification;
            }
            set
            {
                _timemodification = value;
            }
        }
        
        public Stem Stem
        {
            get
            {
                return _stem;
            }
            set
            {
                _stem = value;
            }
        }
        
        public Notehead Notehead
        {
            get
            {
                return _notehead;
            }
            set
            {
                _notehead = value;
            }
        }
        
        public Noteheadtext Noteheadtext
        {
            get
            {
                return _noteheadtext;
            }
            set
            {
                _noteheadtext = value;
            }
        }
        
        public string Staff
        {
            get
            {
                return _staff;
            }
            set
            {
                _staff = value;
            }
        }
        
        public List<Beam> Beam
        {
            get
            {
                return _beam;
            }
            set
            {
                _beam = value;
            }
        }
        
        public List<Notations> Notations
        {
            get
            {
                return _notations;
            }
            set
            {
                _notations = value;
            }
        }
        
        public List<Lyric> Lyric
        {
            get
            {
                return _lyric;
            }
            set
            {
                _lyric = value;
            }
        }
        
        public Play Play
        {
            get
            {
                return _play;
            }
            set
            {
                _play = value;
            }
        }
        
        public object[] listen
        {
            get
            {
                return _listen;
            }
            set
            {
                _listen = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Yesno Printdot
        {
            get
            {
                return _printdot;
            }
            set
            {
                _printdot = value;
            }
        }
        
        public Yesno Printlyric
        {
            get
            {
                return _printlyric;
            }
            set
            {
                _printlyric = value;
            }
        }
        
        public Yesno Printleger
        {
            get
            {
                return _printleger;
            }
            set
            {
                _printleger = value;
            }
        }
        
        public decimal Dynamics
        {
            get
            {
                return _dynamics;
            }
            set
            {
                _dynamics = value;
            }
        }
        
        public decimal Enddynamics
        {
            get
            {
                return _enddynamics;
            }
            set
            {
                _enddynamics = value;
            }
        }
        
        public decimal Attack
        {
            get
            {
                return _attack;
            }
            set
            {
                _attack = value;
            }
        }
        
        public decimal Release
        {
            get
            {
                return _release;
            }
            set
            {
                _release = value;
            }
        }
        
        public string Timeonly
        {
            get
            {
                return _timeonly;
            }
            set
            {
                _timeonly = value;
            }
        }
        
        public Yesno Pizzicato
        {
            get
            {
                return _pizzicato;
            }
            set
            {
                _pizzicato = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Note));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Note object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Note object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Note object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Note obj, out Exception exception)
        {
            exception = null;
            obj = default(Note);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Note obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Note Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Note)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Note Deserialize(Stream s)
        {
            return ((Note)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Note object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Note object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Note object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Note obj, out Exception exception)
        {
            exception = null;
            obj = default(Note);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Note obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Note LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType1
    {
        chord,
        cue,
        duration,
        grace,
        pitch,
        rest,
        tie,
        unpitched,
    }
    
    [DebuggerStepThrough]
    public partial class Player
    {
        #region Private fields
        private string _playername;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Playername
        {
            get
            {
                return _playername;
            }
            set
            {
                _playername = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Player));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Player object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Player object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Player object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Player obj, out Exception exception)
        {
            exception = null;
            obj = default(Player);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Player obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Player Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Player)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Player Deserialize(Stream s)
        {
            return ((Player)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Player object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Player object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Player object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Player obj, out Exception exception)
        {
            exception = null;
            obj = default(Player);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Player obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Player LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Scoreinstrument
    {
        #region Private fields
        private string _instrumentname;
        private string _instrumentabbreviation;
        private string _instrumentsound;
        private object _item;
        private Virtualinstrument _virtualinstrument;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Scoreinstrument()
        {
            _virtualinstrument = new Virtualinstrument();
        }
        
        public string Instrumentname
        {
            get
            {
                return _instrumentname;
            }
            set
            {
                _instrumentname = value;
            }
        }
        
        public string Instrumentabbreviation
        {
            get
            {
                return _instrumentabbreviation;
            }
            set
            {
                _instrumentabbreviation = value;
            }
        }
        
        public string Instrumentsound
        {
            get
            {
                return _instrumentsound;
            }
            set
            {
                _instrumentsound = value;
            }
        }
        
        public object Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }
        
        public Virtualinstrument Virtualinstrument
        {
            get
            {
                return _virtualinstrument;
            }
            set
            {
                _virtualinstrument = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Scoreinstrument));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Scoreinstrument object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Scoreinstrument object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Scoreinstrument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Scoreinstrument obj, out Exception exception)
        {
            exception = null;
            obj = default(Scoreinstrument);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Scoreinstrument obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Scoreinstrument Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Scoreinstrument)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Scoreinstrument Deserialize(Stream s)
        {
            return ((Scoreinstrument)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Scoreinstrument object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Scoreinstrument object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Scoreinstrument object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Scoreinstrument obj, out Exception exception)
        {
            exception = null;
            obj = default(Scoreinstrument);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Scoreinstrument obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Scoreinstrument LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Partname
    {
        #region Private fields
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Partname));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Partname object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Partname object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Partname object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Partname obj, out Exception exception)
        {
            exception = null;
            obj = default(Partname);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Partname obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Partname Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Partname)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Partname Deserialize(Stream s)
        {
            return ((Partname)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Partname object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Partname object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Partname object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Partname obj, out Exception exception)
        {
            exception = null;
            obj = default(Partname);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Partname obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Partname LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Instrumentlink
    {
        #region Private fields
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Instrumentlink));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Instrumentlink object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Instrumentlink object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Instrumentlink object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Instrumentlink obj, out Exception exception)
        {
            exception = null;
            obj = default(Instrumentlink);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Instrumentlink obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Instrumentlink Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Instrumentlink)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Instrumentlink Deserialize(Stream s)
        {
            return ((Instrumentlink)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Instrumentlink object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Instrumentlink object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Instrumentlink object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Instrumentlink obj, out Exception exception)
        {
            exception = null;
            obj = default(Instrumentlink);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Instrumentlink obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Instrumentlink LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Partlink
    {
        #region Private fields
        private List<Instrumentlink> _instrumentlink;
        private List<string> _grouplink;
        private string _href;
        private OpusType _type;
        private string _role;
        private string _title;
        private OpusShow _show;
        private OpusActuate _actuate;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Partlink()
        {
            _grouplink = new List<string>();
            _instrumentlink = new List<Instrumentlink>();
            _type = OpusType.simple;
            _show = OpusShow.replace;
            _actuate = OpusActuate.onRequest;
        }
        
        public List<Instrumentlink> Instrumentlink
        {
            get
            {
                return _instrumentlink;
            }
            set
            {
                _instrumentlink = value;
            }
        }
        
        public List<string> Grouplink
        {
            get
            {
                return _grouplink;
            }
            set
            {
                _grouplink = value;
            }
        }
        
        public string Href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }
        
        public OpusType Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Role
        {
            get
            {
                return _role;
            }
            set
            {
                _role = value;
            }
        }
        
        public string Title
        {
            get
            {
                return _title;
            }
            set
            {
                _title = value;
            }
        }
        
        [DefaultValue(OpusShow.replace)]
        public OpusShow Show
        {
            get
            {
                return _show;
            }
            set
            {
                _show = value;
            }
        }
        
        [DefaultValue(OpusActuate.onRequest)]
        public OpusActuate Actuate
        {
            get
            {
                return _actuate;
            }
            set
            {
                _actuate = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Partlink));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Partlink object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Partlink object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Partlink object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Partlink obj, out Exception exception)
        {
            exception = null;
            obj = default(Partlink);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Partlink obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Partlink Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Partlink)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Partlink Deserialize(Stream s)
        {
            return ((Partlink)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Partlink object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Partlink object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Partlink object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Partlink obj, out Exception exception)
        {
            exception = null;
            obj = default(Partlink);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Partlink obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Partlink LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Scorepart
    {
        #region Private fields
        private Identification _identification;
        private List<Partlink> _partlink;
        private Partname _partname;
        private Namedisplay _partnamedisplay;
        private Partname _partabbreviation;
        private Namedisplay _partabbreviationdisplay;
        private List<string> _group;
        private List<Scoreinstrument> _scoreinstrument;
        private List<Player> _player;
        private List<Mididevice> _mididevice;
        private List<Midiinstrument> _midiinstrument;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Scorepart()
        {
            _midiinstrument = new List<Midiinstrument>();
            _mididevice = new List<Mididevice>();
            _player = new List<Player>();
            _scoreinstrument = new List<Scoreinstrument>();
            _group = new List<string>();
            _partabbreviationdisplay = new Namedisplay();
            _partabbreviation = new Partname();
            _partnamedisplay = new Namedisplay();
            _partname = new Partname();
            _partlink = new List<Partlink>();
            _identification = new Identification();
        }
        
        public Identification Identification
        {
            get
            {
                return _identification;
            }
            set
            {
                _identification = value;
            }
        }
        
        public List<Partlink> Partlink
        {
            get
            {
                return _partlink;
            }
            set
            {
                _partlink = value;
            }
        }
        
        public Partname Partname
        {
            get
            {
                return _partname;
            }
            set
            {
                _partname = value;
            }
        }
        
        public Namedisplay Partnamedisplay
        {
            get
            {
                return _partnamedisplay;
            }
            set
            {
                _partnamedisplay = value;
            }
        }
        
        public Partname Partabbreviation
        {
            get
            {
                return _partabbreviation;
            }
            set
            {
                _partabbreviation = value;
            }
        }
        
        public Namedisplay Partabbreviationdisplay
        {
            get
            {
                return _partabbreviationdisplay;
            }
            set
            {
                _partabbreviationdisplay = value;
            }
        }
        
        public List<string> Group
        {
            get
            {
                return _group;
            }
            set
            {
                _group = value;
            }
        }
        
        public List<Scoreinstrument> Scoreinstrument
        {
            get
            {
                return _scoreinstrument;
            }
            set
            {
                _scoreinstrument = value;
            }
        }
        
        public List<Player> Player
        {
            get
            {
                return _player;
            }
            set
            {
                _player = value;
            }
        }
        
        public List<Mididevice> Mididevice
        {
            get
            {
                return _mididevice;
            }
            set
            {
                _mididevice = value;
            }
        }
        
        public List<Midiinstrument> Midiinstrument
        {
            get
            {
                return _midiinstrument;
            }
            set
            {
                _midiinstrument = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Scorepart));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Scorepart object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Scorepart object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Scorepart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Scorepart obj, out Exception exception)
        {
            exception = null;
            obj = default(Scorepart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Scorepart obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Scorepart Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Scorepart)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Scorepart Deserialize(Stream s)
        {
            return ((Scorepart)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Scorepart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Scorepart object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Scorepart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Scorepart obj, out Exception exception)
        {
            exception = null;
            obj = default(Scorepart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Scorepart obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Scorepart LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Identification
    {
        #region Private fields
        private List<Typedtext> _creator;
        private List<Typedtext> _rights;
        private Encoding _encoding;
        private string _source;
        private List<Typedtext> _relation;
        private List<Miscellaneousfield> _miscellaneous;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Identification()
        {
            _miscellaneous = new List<Miscellaneousfield>();
            _relation = new List<Typedtext>();
            _encoding = new Encoding();
            _rights = new List<Typedtext>();
            _creator = new List<Typedtext>();
        }
        
        public List<Typedtext> Creator
        {
            get
            {
                return _creator;
            }
            set
            {
                _creator = value;
            }
        }
        
        public List<Typedtext> Rights
        {
            get
            {
                return _rights;
            }
            set
            {
                _rights = value;
            }
        }
        
        public Encoding Encoding
        {
            get
            {
                return _encoding;
            }
            set
            {
                _encoding = value;
            }
        }
        
        public string Source
        {
            get
            {
                return _source;
            }
            set
            {
                _source = value;
            }
        }
        
        public List<Typedtext> Relation
        {
            get
            {
                return _relation;
            }
            set
            {
                _relation = value;
            }
        }
        
        public List<Miscellaneousfield> miscellaneous
        {
            get
            {
                return _miscellaneous;
            }
            set
            {
                _miscellaneous = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Identification));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Identification object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Identification object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Identification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Identification obj, out Exception exception)
        {
            exception = null;
            obj = default(Identification);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Identification obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Identification Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Identification)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Identification Deserialize(Stream s)
        {
            return ((Identification)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Identification object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Identification object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Identification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Identification obj, out Exception exception)
        {
            exception = null;
            obj = default(Identification);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Identification obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Identification LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Typedtext
    {
        #region Private fields
        private string _type;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Typedtext));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Typedtext object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Typedtext object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Typedtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Typedtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Typedtext);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Typedtext obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Typedtext Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Typedtext)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Typedtext Deserialize(Stream s)
        {
            return ((Typedtext)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Typedtext object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Typedtext object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Typedtext object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Typedtext obj, out Exception exception)
        {
            exception = null;
            obj = default(Typedtext);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Typedtext obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Typedtext LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Encoding
    {
        #region Private fields
        private object[] _items;
        private ItemsChoiceType[] _itemsElementName;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public object[] Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public ItemsChoiceType[] ItemsElementName
        {
            get
            {
                return _itemsElementName;
            }
            set
            {
                _itemsElementName = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Encoding));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Encoding object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Encoding object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Encoding object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Encoding obj, out Exception exception)
        {
            exception = null;
            obj = default(Encoding);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Encoding obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Encoding Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Encoding)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Encoding Deserialize(Stream s)
        {
            return ((Encoding)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Encoding object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Encoding object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Encoding object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Encoding obj, out Exception exception)
        {
            exception = null;
            obj = default(Encoding);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Encoding obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Encoding LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Supports
    {
        #region Private fields
        private Yesno _type;
        private string _element;
        private string _attribute;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Yesno Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Element
        {
            get
            {
                return _element;
            }
            set
            {
                _element = value;
            }
        }
        
        public string Attribute
        {
            get
            {
                return _attribute;
            }
            set
            {
                _attribute = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Supports));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Supports object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Supports object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Supports object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Supports obj, out Exception exception)
        {
            exception = null;
            obj = default(Supports);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Supports obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Supports Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Supports)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Supports Deserialize(Stream s)
        {
            return ((Supports)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Supports object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Supports object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Supports object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Supports obj, out Exception exception)
        {
            exception = null;
            obj = default(Supports);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Supports obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Supports LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum ItemsChoiceType
    {
        encoder,
        [XmlEnumAttribute("encoding-date")]
        encodingdate,
        [XmlEnumAttribute("encoding-description")]
        encodingdescription,
        software,
        supports,
    }
    
    [DebuggerStepThrough]
    public partial class Miscellaneousfield
    {
        #region Private fields
        private string _name;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Miscellaneousfield));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Miscellaneousfield object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Miscellaneousfield object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Miscellaneousfield object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Miscellaneousfield obj, out Exception exception)
        {
            exception = null;
            obj = default(Miscellaneousfield);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Miscellaneousfield obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Miscellaneousfield Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Miscellaneousfield)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Miscellaneousfield Deserialize(Stream s)
        {
            return ((Miscellaneousfield)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Miscellaneousfield object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Miscellaneousfield object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Miscellaneousfield object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Miscellaneousfield obj, out Exception exception)
        {
            exception = null;
            obj = default(Miscellaneousfield);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Miscellaneousfield obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Miscellaneousfield LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Groupbarline
    {
        #region Private fields
        private string _color;
        private Groupbarlinevalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Groupbarlinevalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Groupbarline));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Groupbarline object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Groupbarline object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Groupbarline object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Groupbarline obj, out Exception exception)
        {
            exception = null;
            obj = default(Groupbarline);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Groupbarline obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Groupbarline Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Groupbarline)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Groupbarline Deserialize(Stream s)
        {
            return ((Groupbarline)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Groupbarline object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Groupbarline object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Groupbarline object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Groupbarline obj, out Exception exception)
        {
            exception = null;
            obj = default(Groupbarline);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Groupbarline obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Groupbarline LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Groupbarlinevalue
    {
        yes,
        no,
        Mensurstrich,
    }
    
    [DebuggerStepThrough]
    public partial class Groupsymbol
    {
        #region Private fields
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private string _color;
        private Groupsymbolvalue _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        public string Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
        
        public Groupsymbolvalue Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Groupsymbol));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Groupsymbol object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Groupsymbol object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Groupsymbol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Groupsymbol obj, out Exception exception)
        {
            exception = null;
            obj = default(Groupsymbol);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Groupsymbol obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Groupsymbol Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Groupsymbol)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Groupsymbol Deserialize(Stream s)
        {
            return ((Groupsymbol)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Groupsymbol object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Groupsymbol object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Groupsymbol object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Groupsymbol obj, out Exception exception)
        {
            exception = null;
            obj = default(Groupsymbol);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Groupsymbol obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Groupsymbol LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Groupname
    {
        #region Private fields
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Groupname));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Groupname object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Groupname object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Groupname object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Groupname obj, out Exception exception)
        {
            exception = null;
            obj = default(Groupname);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Groupname obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Groupname Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Groupname)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Groupname Deserialize(Stream s)
        {
            return ((Groupname)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Groupname object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Groupname object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Groupname object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Groupname obj, out Exception exception)
        {
            exception = null;
            obj = default(Groupname);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Groupname obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Groupname LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Partgroup
    {
        #region Private fields
        private Groupname _groupname;
        private Namedisplay _groupnamedisplay;
        private Groupname _groupabbreviation;
        private Namedisplay _groupabbreviationdisplay;
        private Groupsymbol _groupsymbol;
        private Groupbarline _groupbarline;
        private Empty _grouptime;
        private Formattedtext _footnote;
        private Level _level;
        private Startstop _type;
        private string _number;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Partgroup()
        {
            _level = new Level();
            _footnote = new Formattedtext();
            _grouptime = new Empty();
            _groupbarline = new Groupbarline();
            _groupsymbol = new Groupsymbol();
            _groupabbreviationdisplay = new Namedisplay();
            _groupabbreviation = new Groupname();
            _groupnamedisplay = new Namedisplay();
            _groupname = new Groupname();
            _number = "1";
        }
        
        public Groupname Groupname
        {
            get
            {
                return _groupname;
            }
            set
            {
                _groupname = value;
            }
        }
        
        public Namedisplay Groupnamedisplay
        {
            get
            {
                return _groupnamedisplay;
            }
            set
            {
                _groupnamedisplay = value;
            }
        }
        
        public Groupname Groupabbreviation
        {
            get
            {
                return _groupabbreviation;
            }
            set
            {
                _groupabbreviation = value;
            }
        }
        
        public Namedisplay Groupabbreviationdisplay
        {
            get
            {
                return _groupabbreviationdisplay;
            }
            set
            {
                _groupabbreviationdisplay = value;
            }
        }
        
        public Groupsymbol Groupsymbol
        {
            get
            {
                return _groupsymbol;
            }
            set
            {
                _groupsymbol = value;
            }
        }
        
        public Groupbarline Groupbarline
        {
            get
            {
                return _groupbarline;
            }
            set
            {
                _groupbarline = value;
            }
        }
        
        public Empty Grouptime
        {
            get
            {
                return _grouptime;
            }
            set
            {
                _grouptime = value;
            }
        }
        
        public Formattedtext Footnote
        {
            get
            {
                return _footnote;
            }
            set
            {
                _footnote = value;
            }
        }
        
        public Level Level
        {
            get
            {
                return _level;
            }
            set
            {
                _level = value;
            }
        }
        
        public Startstop Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        [DefaultValue("1")]
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Partgroup));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Partgroup object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Partgroup object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Partgroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Partgroup obj, out Exception exception)
        {
            exception = null;
            obj = default(Partgroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Partgroup obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Partgroup Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Partgroup)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Partgroup Deserialize(Stream s)
        {
            return ((Partgroup)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Partgroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Partgroup object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Partgroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Partgroup obj, out Exception exception)
        {
            exception = null;
            obj = default(Partgroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Partgroup obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Partgroup LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Partlist
    {
        #region Private fields
        private List<Partgroup> _partgroup;
        private Scorepart _scorepart;
        private List<object> _items;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Partlist()
        {
            _items = new List<object>();
            _scorepart = new Scorepart();
            _partgroup = new List<Partgroup>();
        }
        
        public List<Partgroup> Partgroup
        {
            get
            {
                return _partgroup;
            }
            set
            {
                _partgroup = value;
            }
        }
        
        public Scorepart Scorepart
        {
            get
            {
                return _scorepart;
            }
            set
            {
                _scorepart = value;
            }
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Partlist));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Partlist object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Partlist object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Partlist object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Partlist obj, out Exception exception)
        {
            exception = null;
            obj = default(Partlist);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Partlist obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Partlist Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Partlist)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Partlist Deserialize(Stream s)
        {
            return ((Partlist)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Partlist object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Partlist object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Partlist object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Partlist obj, out Exception exception)
        {
            exception = null;
            obj = default(Partlist);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Partlist obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Partlist LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Bookmark
    {
        #region Private fields
        private string _id;
        private string _name;
        private string _element;
        private string _position;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        public string Element
        {
            get
            {
                return _element;
            }
            set
            {
                _element = value;
            }
        }
        
        public string Position
        {
            get
            {
                return _position;
            }
            set
            {
                _position = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Bookmark));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Bookmark object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Bookmark object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Bookmark object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Bookmark obj, out Exception exception)
        {
            exception = null;
            obj = default(Bookmark);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Bookmark obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Bookmark Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Bookmark)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Bookmark Deserialize(Stream s)
        {
            return ((Bookmark)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Bookmark object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Bookmark object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Bookmark object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Bookmark obj, out Exception exception)
        {
            exception = null;
            obj = default(Bookmark);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Bookmark obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Bookmark LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Link
    {
        #region Private fields
        private string _href;
        private OpusType _type;
        private string _role;
        private string _title;
        private OpusShow _show;
        private OpusActuate _actuate;
        private string _name;
        private string _element;
        private string _position;
        private decimal _defaultx;
        private decimal _defaulty;
        private decimal _relativex;
        private decimal _relativey;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Link()
        {
            _type = OpusType.simple;
            _show = OpusShow.replace;
            _actuate = OpusActuate.onRequest;
        }
        
        public string Href
        {
            get
            {
                return _href;
            }
            set
            {
                _href = value;
            }
        }
        
        public OpusType Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Role
        {
            get
            {
                return _role;
            }
            set
            {
                _role = value;
            }
        }
        
        public string Title
        {
            get
            {
                return _title;
            }
            set
            {
                _title = value;
            }
        }
        
        [DefaultValue(OpusShow.replace)]
        public OpusShow Show
        {
            get
            {
                return _show;
            }
            set
            {
                _show = value;
            }
        }
        
        [DefaultValue(OpusActuate.onRequest)]
        public OpusActuate Actuate
        {
            get
            {
                return _actuate;
            }
            set
            {
                _actuate = value;
            }
        }
        
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        public string Element
        {
            get
            {
                return _element;
            }
            set
            {
                _element = value;
            }
        }
        
        public string Position
        {
            get
            {
                return _position;
            }
            set
            {
                _position = value;
            }
        }
        
        public decimal Defaultx
        {
            get
            {
                return _defaultx;
            }
            set
            {
                _defaultx = value;
            }
        }
        
        public decimal Defaulty
        {
            get
            {
                return _defaulty;
            }
            set
            {
                _defaulty = value;
            }
        }
        
        public decimal Relativex
        {
            get
            {
                return _relativex;
            }
            set
            {
                _relativex = value;
            }
        }
        
        public decimal Relativey
        {
            get
            {
                return _relativey;
            }
            set
            {
                _relativey = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Link));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Link object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Link object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Link object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Link obj, out Exception exception)
        {
            exception = null;
            obj = default(Link);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Link obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Link Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Link)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Link Deserialize(Stream s)
        {
            return ((Link)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Link object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Link object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Link object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Link obj, out Exception exception)
        {
            exception = null;
            obj = default(Link);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Link obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Link LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Credit
    {
        #region Private fields
        private List<string> _credittype;
        private List<Link> _link;
        private List<Bookmark> _bookmark;
        private List<object> _items;
        private string _page;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Credit()
        {
            _items = new List<object>();
            _bookmark = new List<Bookmark>();
            _link = new List<Link>();
            _credittype = new List<string>();
        }
        
        public List<string> Credittype
        {
            get
            {
                return _credittype;
            }
            set
            {
                _credittype = value;
            }
        }
        
        public List<Link> Link
        {
            get
            {
                return _link;
            }
            set
            {
                _link = value;
            }
        }
        
        public List<Bookmark> Bookmark
        {
            get
            {
                return _bookmark;
            }
            set
            {
                _bookmark = value;
            }
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public string Page
        {
            get
            {
                return _page;
            }
            set
            {
                _page = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Credit));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Credit object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Credit object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Credit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Credit obj, out Exception exception)
        {
            exception = null;
            obj = default(Credit);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Credit obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Credit Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Credit)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Credit Deserialize(Stream s)
        {
            return ((Credit)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Credit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Credit object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Credit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Credit obj, out Exception exception)
        {
            exception = null;
            obj = default(Credit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Credit obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Credit LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Lyriclanguage
    {
        #region Private fields
        private string _number;
        private string _name;
        private string _lang;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        public string Lang
        {
            get
            {
                return _lang;
            }
            set
            {
                _lang = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Lyriclanguage));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Lyriclanguage object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Lyriclanguage object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Lyriclanguage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Lyriclanguage obj, out Exception exception)
        {
            exception = null;
            obj = default(Lyriclanguage);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Lyriclanguage obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Lyriclanguage Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Lyriclanguage)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Lyriclanguage Deserialize(Stream s)
        {
            return ((Lyriclanguage)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Lyriclanguage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Lyriclanguage object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Lyriclanguage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Lyriclanguage obj, out Exception exception)
        {
            exception = null;
            obj = default(Lyriclanguage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Lyriclanguage obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Lyriclanguage LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Lyricfont
    {
        #region Private fields
        private string _number;
        private string _name;
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Lyricfont));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Lyricfont object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Lyricfont object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Lyricfont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Lyricfont obj, out Exception exception)
        {
            exception = null;
            obj = default(Lyricfont);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Lyricfont obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Lyricfont Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Lyricfont)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Lyricfont Deserialize(Stream s)
        {
            return ((Lyricfont)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Lyricfont object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Lyricfont object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Lyricfont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Lyricfont obj, out Exception exception)
        {
            exception = null;
            obj = default(Lyricfont);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Lyricfont obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Lyricfont LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Emptyfont
    {
        #region Private fields
        private string _fontfamily;
        private Fontstyle _fontstyle;
        private string _fontsize;
        private Fontweight _fontweight;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Fontfamily
        {
            get
            {
                return _fontfamily;
            }
            set
            {
                _fontfamily = value;
            }
        }
        
        public Fontstyle Fontstyle
        {
            get
            {
                return _fontstyle;
            }
            set
            {
                _fontstyle = value;
            }
        }
        
        public string Fontsize
        {
            get
            {
                return _fontsize;
            }
            set
            {
                _fontsize = value;
            }
        }
        
        public Fontweight Fontweight
        {
            get
            {
                return _fontweight;
            }
            set
            {
                _fontweight = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Emptyfont));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Emptyfont object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Emptyfont object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Emptyfont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Emptyfont obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyfont);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Emptyfont obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Emptyfont Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Emptyfont)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Emptyfont Deserialize(Stream s)
        {
            return ((Emptyfont)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Emptyfont object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Emptyfont object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Emptyfont object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Emptyfont obj, out Exception exception)
        {
            exception = null;
            obj = default(Emptyfont);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Emptyfont obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Emptyfont LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Otherappearance
    {
        #region Private fields
        private string _type;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Otherappearance));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Otherappearance object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Otherappearance object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Otherappearance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Otherappearance obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherappearance);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Otherappearance obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Otherappearance Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Otherappearance)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Otherappearance Deserialize(Stream s)
        {
            return ((Otherappearance)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Otherappearance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Otherappearance object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Otherappearance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Otherappearance obj, out Exception exception)
        {
            exception = null;
            obj = default(Otherappearance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Otherappearance obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Otherappearance LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Glyph
    {
        #region Private fields
        private string _type;
        private string _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Glyph));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Glyph object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Glyph object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Glyph object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Glyph obj, out Exception exception)
        {
            exception = null;
            obj = default(Glyph);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Glyph obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Glyph Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Glyph)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Glyph Deserialize(Stream s)
        {
            return ((Glyph)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Glyph object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Glyph object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Glyph object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Glyph obj, out Exception exception)
        {
            exception = null;
            obj = default(Glyph);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Glyph obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Glyph LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Distance
    {
        #region Private fields
        private string _type;
        private decimal _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public decimal Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Distance));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Distance object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Distance object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Distance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Distance obj, out Exception exception)
        {
            exception = null;
            obj = default(Distance);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Distance obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Distance Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Distance)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Distance Deserialize(Stream s)
        {
            return ((Distance)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Distance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Distance object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Distance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Distance obj, out Exception exception)
        {
            exception = null;
            obj = default(Distance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Distance obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Distance LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Notesize
    {
        #region Private fields
        private Notesizetype _type;
        private decimal _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Notesizetype Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public decimal Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Notesize));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Notesize object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Notesize object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Notesize object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Notesize obj, out Exception exception)
        {
            exception = null;
            obj = default(Notesize);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Notesize obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Notesize Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Notesize)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Notesize Deserialize(Stream s)
        {
            return ((Notesize)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Notesize object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Notesize object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Notesize object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Notesize obj, out Exception exception)
        {
            exception = null;
            obj = default(Notesize);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Notesize obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Notesize LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    public enum Notesizetype
    {
        cue,
        grace,
        [XmlEnumAttribute("grace-cue")]
        gracecue,
        large,
    }
    
    [DebuggerStepThrough]
    public partial class Linewidth
    {
        #region Private fields
        private string _type;
        private decimal _value;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public string Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public decimal Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Linewidth));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Linewidth object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Linewidth object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Linewidth object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Linewidth obj, out Exception exception)
        {
            exception = null;
            obj = default(Linewidth);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Linewidth obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Linewidth Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Linewidth)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Linewidth Deserialize(Stream s)
        {
            return ((Linewidth)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Linewidth object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Linewidth object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Linewidth object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Linewidth obj, out Exception exception)
        {
            exception = null;
            obj = default(Linewidth);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Linewidth obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Linewidth LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Appearance
    {
        #region Private fields
        private List<Linewidth> _linewidth;
        private List<Notesize> _notesize;
        private List<Distance> _distance;
        private List<Glyph> _glyph;
        private List<Otherappearance> _otherappearance;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Appearance()
        {
            _otherappearance = new List<Otherappearance>();
            _glyph = new List<Glyph>();
            _distance = new List<Distance>();
            _notesize = new List<Notesize>();
            _linewidth = new List<Linewidth>();
        }
        
        public List<Linewidth> Linewidth
        {
            get
            {
                return _linewidth;
            }
            set
            {
                _linewidth = value;
            }
        }
        
        public List<Notesize> Notesize
        {
            get
            {
                return _notesize;
            }
            set
            {
                _notesize = value;
            }
        }
        
        public List<Distance> Distance
        {
            get
            {
                return _distance;
            }
            set
            {
                _distance = value;
            }
        }
        
        public List<Glyph> Glyph
        {
            get
            {
                return _glyph;
            }
            set
            {
                _glyph = value;
            }
        }
        
        public List<Otherappearance> Otherappearance
        {
            get
            {
                return _otherappearance;
            }
            set
            {
                _otherappearance = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Appearance));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Appearance object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Appearance object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Appearance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Appearance obj, out Exception exception)
        {
            exception = null;
            obj = default(Appearance);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Appearance obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Appearance Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Appearance)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Appearance Deserialize(Stream s)
        {
            return ((Appearance)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Appearance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Appearance object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Appearance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Appearance obj, out Exception exception)
        {
            exception = null;
            obj = default(Appearance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Appearance obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Appearance LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Scaling
    {
        #region Private fields
        private decimal _millimeters;
        private decimal _tenths;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public decimal Millimeters
        {
            get
            {
                return _millimeters;
            }
            set
            {
                _millimeters = value;
            }
        }
        
        public decimal Tenths
        {
            get
            {
                return _tenths;
            }
            set
            {
                _tenths = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Scaling));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Scaling object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Scaling object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Scaling object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Scaling obj, out Exception exception)
        {
            exception = null;
            obj = default(Scaling);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Scaling obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Scaling Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Scaling)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Scaling Deserialize(Stream s)
        {
            return ((Scaling)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Scaling object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Scaling object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Scaling object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Scaling obj, out Exception exception)
        {
            exception = null;
            obj = default(Scaling);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Scaling obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Scaling LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Defaults
    {
        #region Private fields
        private Scaling _scaling;
        private Empty _concertscore;
        private Pagelayout _pagelayout;
        private Systemlayout _systemlayout;
        private List<Stafflayout> _stafflayout;
        private Appearance _appearance;
        private Emptyfont _musicfont;
        private Emptyfont _wordfont;
        private List<Lyricfont> _lyricfont;
        private List<Lyriclanguage> _lyriclanguage;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Defaults()
        {
            _lyriclanguage = new List<Lyriclanguage>();
            _lyricfont = new List<Lyricfont>();
            _wordfont = new Emptyfont();
            _musicfont = new Emptyfont();
            _appearance = new Appearance();
            _stafflayout = new List<Stafflayout>();
            _systemlayout = new Systemlayout();
            _pagelayout = new Pagelayout();
            _concertscore = new Empty();
            _scaling = new Scaling();
        }
        
        public Scaling Scaling
        {
            get
            {
                return _scaling;
            }
            set
            {
                _scaling = value;
            }
        }
        
        public Empty Concertscore
        {
            get
            {
                return _concertscore;
            }
            set
            {
                _concertscore = value;
            }
        }
        
        public Pagelayout Pagelayout
        {
            get
            {
                return _pagelayout;
            }
            set
            {
                _pagelayout = value;
            }
        }
        
        public Systemlayout Systemlayout
        {
            get
            {
                return _systemlayout;
            }
            set
            {
                _systemlayout = value;
            }
        }
        
        public List<Stafflayout> Stafflayout
        {
            get
            {
                return _stafflayout;
            }
            set
            {
                _stafflayout = value;
            }
        }
        
        public Appearance Appearance
        {
            get
            {
                return _appearance;
            }
            set
            {
                _appearance = value;
            }
        }
        
        public Emptyfont Musicfont
        {
            get
            {
                return _musicfont;
            }
            set
            {
                _musicfont = value;
            }
        }
        
        public Emptyfont Wordfont
        {
            get
            {
                return _wordfont;
            }
            set
            {
                _wordfont = value;
            }
        }
        
        public List<Lyricfont> Lyricfont
        {
            get
            {
                return _lyricfont;
            }
            set
            {
                _lyricfont = value;
            }
        }
        
        public List<Lyriclanguage> Lyriclanguage
        {
            get
            {
                return _lyriclanguage;
            }
            set
            {
                _lyriclanguage = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Defaults));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Defaults object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Defaults object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Defaults object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Defaults obj, out Exception exception)
        {
            exception = null;
            obj = default(Defaults);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Defaults obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Defaults Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Defaults)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Defaults Deserialize(Stream s)
        {
            return ((Defaults)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Defaults object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Defaults object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Defaults object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Defaults obj, out Exception exception)
        {
            exception = null;
            obj = default(Defaults);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Defaults obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Defaults LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class ScorepartwisePart
    {
        #region Private fields
        private List<ScorepartwisePartMeasure> _measure;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public ScorepartwisePart()
        {
            _measure = new List<ScorepartwisePartMeasure>();
        }
        
        public List<ScorepartwisePartMeasure> Measure
        {
            get
            {
                return _measure;
            }
            set
            {
                _measure = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(ScorepartwisePart));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize ScorepartwisePart object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes ScorepartwisePart object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output ScorepartwisePart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ScorepartwisePart obj, out Exception exception)
        {
            exception = null;
            obj = default(ScorepartwisePart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ScorepartwisePart obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ScorepartwisePart Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ScorepartwisePart)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ScorepartwisePart Deserialize(Stream s)
        {
            return ((ScorepartwisePart)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ScorepartwisePart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ScorepartwisePart object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output ScorepartwisePart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ScorepartwisePart obj, out Exception exception)
        {
            exception = null;
            obj = default(ScorepartwisePart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ScorepartwisePart obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ScorepartwisePart LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class ScorepartwisePartMeasure
    {
        #region Private fields
        private List<object> _items;
        private string _number;
        private string _text;
        private Yesno _implicit;
        private Yesno _noncontrolling;
        private decimal _width;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public ScorepartwisePartMeasure()
        {
            _items = new List<object>();
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public Yesno Implicit
        {
            get
            {
                return _implicit;
            }
            set
            {
                _implicit = value;
            }
        }
        
        public Yesno Noncontrolling
        {
            get
            {
                return _noncontrolling;
            }
            set
            {
                _noncontrolling = value;
            }
        }
        
        public decimal Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(ScorepartwisePartMeasure));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize ScorepartwisePartMeasure object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes ScorepartwisePartMeasure object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output ScorepartwisePartMeasure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ScorepartwisePartMeasure obj, out Exception exception)
        {
            exception = null;
            obj = default(ScorepartwisePartMeasure);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ScorepartwisePartMeasure obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ScorepartwisePartMeasure Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ScorepartwisePartMeasure)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ScorepartwisePartMeasure Deserialize(Stream s)
        {
            return ((ScorepartwisePartMeasure)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ScorepartwisePartMeasure object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ScorepartwisePartMeasure object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output ScorepartwisePartMeasure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ScorepartwisePartMeasure obj, out Exception exception)
        {
            exception = null;
            obj = default(ScorepartwisePartMeasure);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ScorepartwisePartMeasure obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ScorepartwisePartMeasure LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class Scoretimewise
    {
        #region Private fields
        private Work _work;
        private string _movementnumber;
        private string _movementtitle;
        private Identification _identification;
        private Defaults _defaults;
        private List<Credit> _credit;
        private Partlist _partlist;
        private List<ScoretimewiseMeasure> _measure;
        private string _version;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public Scoretimewise()
        {
            _measure = new List<ScoretimewiseMeasure>();
            _partlist = new Partlist();
            _credit = new List<Credit>();
            _defaults = new Defaults();
            _identification = new Identification();
            _work = new Work();
            _version = "1.0";
        }
        
        public Work Work
        {
            get
            {
                return _work;
            }
            set
            {
                _work = value;
            }
        }
        
        public string Movementnumber
        {
            get
            {
                return _movementnumber;
            }
            set
            {
                _movementnumber = value;
            }
        }
        
        public string Movementtitle
        {
            get
            {
                return _movementtitle;
            }
            set
            {
                _movementtitle = value;
            }
        }
        
        public Identification Identification
        {
            get
            {
                return _identification;
            }
            set
            {
                _identification = value;
            }
        }
        
        public Defaults Defaults
        {
            get
            {
                return _defaults;
            }
            set
            {
                _defaults = value;
            }
        }
        
        public List<Credit> Credit
        {
            get
            {
                return _credit;
            }
            set
            {
                _credit = value;
            }
        }
        
        public Partlist Partlist
        {
            get
            {
                return _partlist;
            }
            set
            {
                _partlist = value;
            }
        }
        
        public List<ScoretimewiseMeasure> Measure
        {
            get
            {
                return _measure;
            }
            set
            {
                _measure = value;
            }
        }
        
        [DefaultValue("1.0")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(Scoretimewise));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Scoretimewise object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes Scoretimewise object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output Scoretimewise object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Scoretimewise obj, out Exception exception)
        {
            exception = null;
            obj = default(Scoretimewise);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out Scoretimewise obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static Scoretimewise Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Scoretimewise)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static Scoretimewise Deserialize(Stream s)
        {
            return ((Scoretimewise)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current Scoretimewise object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Scoretimewise object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output Scoretimewise object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Scoretimewise obj, out Exception exception)
        {
            exception = null;
            obj = default(Scoretimewise);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Scoretimewise obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Scoretimewise LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class ScoretimewiseMeasure
    {
        #region Private fields
        private List<ScoretimewiseMeasurePart> _part;
        private string _number;
        private string _text;
        private Yesno _implicit;
        private Yesno _noncontrolling;
        private decimal _width;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public ScoretimewiseMeasure()
        {
            _part = new List<ScoretimewiseMeasurePart>();
        }
        
        public List<ScoretimewiseMeasurePart> Part
        {
            get
            {
                return _part;
            }
            set
            {
                _part = value;
            }
        }
        
        public string Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
        
        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }
        
        public Yesno Implicit
        {
            get
            {
                return _implicit;
            }
            set
            {
                _implicit = value;
            }
        }
        
        public Yesno Noncontrolling
        {
            get
            {
                return _noncontrolling;
            }
            set
            {
                _noncontrolling = value;
            }
        }
        
        public decimal Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(ScoretimewiseMeasure));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize ScoretimewiseMeasure object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes ScoretimewiseMeasure object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output ScoretimewiseMeasure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ScoretimewiseMeasure obj, out Exception exception)
        {
            exception = null;
            obj = default(ScoretimewiseMeasure);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ScoretimewiseMeasure obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ScoretimewiseMeasure Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ScoretimewiseMeasure)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ScoretimewiseMeasure Deserialize(Stream s)
        {
            return ((ScoretimewiseMeasure)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ScoretimewiseMeasure object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ScoretimewiseMeasure object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output ScoretimewiseMeasure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ScoretimewiseMeasure obj, out Exception exception)
        {
            exception = null;
            obj = default(ScoretimewiseMeasure);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ScoretimewiseMeasure obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ScoretimewiseMeasure LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [DebuggerStepThrough]
    public partial class ScoretimewiseMeasurePart
    {
        #region Private fields
        private List<object> _items;
        private string _id;
        private static XmlSerializer _serializerXml;
        #endregion
        
        public ScoretimewiseMeasurePart()
        {
            _items = new List<object>();
        }
        
        public List<object> Items
        {
            get
            {
                return _items;
            }
            set
            {
                _items = value;
            }
        }
        
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                _id = value;
            }
        }
        
        private static XmlSerializer SerializerXml
        {
            get
            {
                if ((_serializerXml == null))
                {
                    _serializerXml = new XmlSerializerFactory().CreateSerializer(typeof(ScoretimewiseMeasurePart));
                }
                return _serializerXml;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serialize ScoretimewiseMeasurePart object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXml.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes ScoretimewiseMeasurePart object
        /// </summary>
        /// <param name="input">string to deserialize</param>
        /// <param name="obj">Output ScoretimewiseMeasurePart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ScoretimewiseMeasurePart obj, out Exception exception)
        {
            exception = null;
            obj = default(ScoretimewiseMeasurePart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out ScoretimewiseMeasurePart obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static ScoretimewiseMeasurePart Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ScoretimewiseMeasurePart)(SerializerXml.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static ScoretimewiseMeasurePart Deserialize(Stream s)
        {
            return ((ScoretimewiseMeasurePart)(SerializerXml.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current ScoretimewiseMeasurePart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ScoretimewiseMeasurePart object
        /// </summary>
        /// <param name="fileName">File to load and deserialize</param>
        /// <param name="obj">Output ScoretimewiseMeasurePart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ScoretimewiseMeasurePart obj, out Exception exception)
        {
            exception = null;
            obj = default(ScoretimewiseMeasurePart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ScoretimewiseMeasurePart obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ScoretimewiseMeasurePart LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
